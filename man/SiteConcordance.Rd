% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Concordance.R
\name{SiteConcordance}
\alias{SiteConcordance}
\alias{QuartetConcordance}
\alias{ClusteringConcordance}
\alias{PhylogeneticConcordance}
\alias{MutualClusteringConcordance}
\alias{SharedPhylogeneticConcordance}
\title{Calculate site concordance factor}
\usage{
QuartetConcordance(tree, dataset = NULL, weight = TRUE)

ClusteringConcordance(tree, dataset, return = "edge", normalize = TRUE)

PhylogeneticConcordance(tree, dataset)

MutualClusteringConcordance(tree, dataset)

SharedPhylogeneticConcordance(tree, dataset)
}
\arguments{
\item{tree}{A tree of class \code{\link[ape:read.tree]{phylo}}.}

\item{dataset}{A phylogenetic data matrix of \pkg{phangorn} class
\code{phyDat}, whose names correspond to the labels of any accompanying tree.
Perhaps load into R using \code{\link[TreeTools]{ReadAsPhyDat}()}.
Additive (ordered) characters can be handled using
\code{\link[TreeTools]{Decompose}()}.}

\item{weight}{Logical specifying whether to weight sites according to the
number of quartets they are decisive for.}

\item{return}{Character specifying what to return.
\itemize{
\item \code{"mean"} returns the mean concordance index at each split across all sites.
\item \code{"all"} returns all values calculated during the working for each site at
each split.
}}

\item{normalize}{Logical; if \code{TRUE} the mutual information will be
normalized such that zero corresponds to the expected mutual information of
a randomly drawn character with the same distribution of tokens.
If \code{FALSE}, zero will correspond to zero mutual information,
even if this is not possible to accomplish in practice.}
}
\value{
\code{ClusteringConcordance(return = "all")} returns a 3D array where each
slice corresponds to a site; each row to a split; and each row to a
measure of information: \code{normalized} gives the mutual information (\code{mi})
normalized such that a value of one corresponds to \code{hBest},
which is the lower of \code{hSplit}, the clustering information
(entropy) of the split, and \code{hChar}, the clustering information of the
site / character; and zero corresponds to \code{miRand}, the expected mutual
information of a randomly drawn character with the same distribution of
tokens. Negative values denote that the observed tokens contain less mutual
information than a random draw. \code{n} records the number of relevant
observations.
\code{NA} is returned where $hBest = 0$.
\code{hJoint} gives the joint entropy â€“ the entropy of the
confusion matrix of the split and character considered together.

\code{ClusteringConcordance(return = "edge")} returns a matrix or vector listing
for each split the proportion of clustering information across all sites
held in common with the split.
\code{ClusteringConcordance(return = "char")} returns a vector listing for each
site (character) the proportion of clustering information across all edges
held in common with the site.
\code{ClusteringConcordance(return = "tree")} returns the mean of the
normalized site-wise concordance scores; this single value gives a measure
analogous to the consistency index.
}
\description{
The site concordance factor \insertCite{Minh2020}{TreeSearch} is a measure
of the strength of support that the dataset presents for a given split in a
tree.
}
\details{
\code{QuartetConcordance()} is the proportion of quartets (sets of four leaves)
that are decisive for a split which are also concordant with it.
For example, a quartet with the characters \verb{0 0 0 1} is not decisive, as
all relationships between those leaves are equally parsimonious.
But a quartet with characters \verb{0 0 1 1} is decisive, and is concordant
with any tree that groups the first two leaves together to the exclusion
of the second.

By default, the reported value weights each site by the number of quartets
it is decisive for.  This value can be interpreted as the proportion of
all decisive quartets that are concordant with a split.
If \code{weight = FALSE}, the reported value is the mean of the concordance
value for each site.
Consider a split associated with two sites:
one that is concordant with 25\% of 96 decisive quartets, and
a second that is concordant with 75\% of 4 decisive quartets.
If \code{weight = TRUE}, the split concordance will be 24 + 3 / 96 + 4 = 27\%.
If \code{weight = FALSE}, the split concordance will be mean(75\%, 25\%) = 50\%.

\code{QuartetConcordance()} is computed exactly, using all quartets, where as
other implementations (e.g. IQ-TREE) follow
\insertCite{@Minh2020;textual}{TreeSearch} in using a random subsample
of quartets for a faster, if potentially less accurate, computation.

\strong{NOTE:} These functions are under development. They are incompletely
tested, and may change without notice.
Complete documentation and discussion will follow in due course.
}
\examples{
data("congreveLamsdellMatrices", package = "TreeSearch")
dataset <- congreveLamsdellMatrices[[1]][, 1:20]
tree <- referenceTree
qc <- QuartetConcordance(tree, dataset)
cc <- ClusteringConcordance(tree, dataset)
pc <- PhylogeneticConcordance(tree, dataset)
spc <- SharedPhylogeneticConcordance(tree, dataset)
mcc <- MutualClusteringConcordance(tree, dataset)

oPar <- par(mar = rep(0, 4), cex = 0.8) # Set plotting parameters
plot(tree)
TreeTools::LabelSplits(tree, signif(qc, 3), cex = 0.8)
plot(tree)
TreeTools::LabelSplits(tree, signif(cc, 3), cex = 0.8)
par(oPar) # Restore plotting parameters

# Write concordance factors to file
labels <- paste0(qc, "/", cc, "/", pc) # "/" is a valid delimiter
# Identify the node that corresponds to each label
whichNode <- match(TreeTools::NTip(tree) + 1:tree$Nnode, names(qc))

# The contents of tree$node.label will be written at each node
tree$node.label <- labels[whichNode]

ape::write.tree(tree) # or write.nexus(tree, file = "mytree.nex")

# Display correlation between concordance factors
pairs(cbind(qc, cc, pc, spc, mcc), asp = 1)
data(congreveLamsdellMatrices)
myMatrix <- congreveLamsdellMatrices[[10]]
ClusteringConcordance(TreeTools::NJTree(myMatrix), myMatrix)
}
\references{
\insertAllCited{}
}
\seealso{
\itemize{
\item \code{\link[=Consistency]{Consistency()}}
}

Other split support functions: 
\code{\link{JackLabels}()},
\code{\link{Jackknife}()},
\code{\link{MaximizeParsimony}()},
\code{\link{MostContradictedFreq}()},
\code{\link{PresCont}()}
}
\author{
\href{https://smithlabdurham.github.io/}{Martin R. Smith}
(\href{mailto:martin.smith@durham.ac.uk}{martin.smith@durham.ac.uk})
}
\concept{split support functions}
