#NEXUS
BEGIN data;
  DIMENSIONS NTAX=88 NCHAR=220;
	FORMAT DATATYPE=Standard SYMBOLS= "0123456789" MISSING=? GAP= -;
  MATRIX
    Ablautus_coquilletti                001101202001011000100010011011101110111100003100001102100200020102012201220101100020000211111100120000110000120202010000000-102000001000010000001010100000000000000000021402110001100000200000000000101-11011100000010000000
    Acnephalum_cylindricum              002401302011001000100110111011111110111000000100101100100100020022012201120101110020000311111101120000110000120102000000010-101000001001010200001110100000000000000000011402110001101000000000000000101-00101200000010000000
    Afroestricus_chiastoneurus          00230120200001100000001001100110112001110000010000110500021002000201210114010110102012021111110112101301100012020201000001110000001000112100000010101000100000000111100000-0200001110000100011100000100-110112000000001011-0
    Afroleptomydas_sp_Clanwilliam       001421302000000004000003010210020001100--01200000010030143011010020111101012100001100100000111020001100100000201010200000010002000114011320400302101100000100000000000011022211000101000300000010000002002000-000000011011-0
    Apiocera_painteri                   000000--20101011040000031110100000011011000000000001051002010100020122002201000000000003111011011210000100000202110100011110002000100011210000000000100000000000000000021722210?011??000000000000000101-01011100000010001100
    Apsilocephala_longistyla            000000--2111000004000003111210020001101110000000001100000100000002002-0010000010000000011111110112100000000002021100000111110000110000110000000011101000000000000000000000-0200001132000200000000000021-01001200000010000000
    Asilus_crabroniformis               00220110200000100000001111101110112001110000000010110010010002010201210111010110112022021110110112101001100012020201000001110000001020112100100010101000000000000000000202-0200001100010100000000000100-100110000000021011-0
    Asilus_sericeus                     0022011020000010000000100110011011200111000000001011000002000101020121011101001011202102111011011210100110001?020201000111110010001020112100100010101000000000000000000202-0200001111010100000000000100-100110000000021011-0
    Atomosia_puella                     0022010020100010000000211-101110111011120100000000110100530002000201210110110111021010011111111112100301100012010100020001110000011010114003000010101110000001022000011000-5200001121000022220006010001-01001100000012001100
    Beameromyia_bifida                  001101002001001000000020011011102120211100000100001100000200000001010002101102200010000111011101111001001000101101000001110-1010020000000000002010101000200000100000000000-4200200112001000000000000112022101210000020001100
    Bombylius_major                     010000--1001000000000003011010120001100--0000000001100000100011001001-1012000110001011001000000111100010000002010101000111110010000011-0-11000011010000100000000000000003812110001132000000000000010001-01001201000020000100
    Ceraturgus_fasciatus                0024012020110110021001111011111011101111000001000011011031000200020111011201011000200002111011011110000110000201010000000111001000001000000000001010100001000000000000021402110?011??000100000000010101-00011200001110000100
    Cerotainia_albipilosa               0022011020000010000000221-101110111011120100010101111100530001000201210110110110021010011110111111100301100012010100020001110010011000114103000010101110000001000000011000-5200001120001000000006010001-01001100000022001100
    Choerades_bella                     0022011020100110020010221-101110111011120100110000111200430002000101110111110111002010011111110312110101100002010100000111110000001010112000000010101000000000020000000001-5200001121000020000005010002101001200000032101110
    Clephydroneura_sp_Kepong            00220110200000100000001001100110112001110000010000110010010001000201210111010110112011021111110111101101100012020201000111110010001020112100000010101000000000011110000203-0200001122010111000000000100-100110001000021011-0
    Connomyia_varipennis                0012013020110110001000111111111011101110100000001011010002000200020122012301011000200002111111011210000100001202020100011111001000001001000000001010100000000000000000021702110001121000300000000010000-00011200000010000000
    Cyrtopogon_rattus                   0024013020110110000000100111111011101111000001000011010011000100020111011301011000200002111111011210000110001201010000010111000001001000000000001010100000000000000000021402110001121000200000000000100-10011100001110000000
    Damalis_annulata                    0013012020000010020000211-101110111011110001010000110400230001000101110101110110002000001011110111000101100012010212000000110010000010012102000010101000000000000000000000-5200001121100100000001010002012001200000010000000
    Damalis_monochaetes                 0012011020000010020000211-101110111011110001010000110400230001000201110101110110002010001001110111001101100012010211000000110000000010012102000010101000000000000000000000-5200001101100100000001010202012001100000020000000
    Dasophrys_crenulatus                00240130200002100000001001100110112001110000000000110510010001010211210112010110002011021111110112101001100012010201000011110000001000112100000010101000000000011100000203-0200001010010111100000000100-100110000000001011-0
    Dasypogon_diadema                   0014011020110010002001111111111111101111100000000011011012000200220122011301001000200003111011001200000112121202020000011111000000001011210010001010100000000000000000010602110001111000200000000010001-10001100100110000000
    Dioctria_atricapillus               0022010020000210031100211-101110111011110000000000111110320001000201110113110220002000011100101111100001100012012200020001110010010010000000000010101000010000000000000000-0200001101001000000004000001-00011200001010000100
    Dioctria_hyalipennis                0022011020000210031100211-101110111011110000000000111110320001000201110113110220002000011100101111100001100012012200020001110010010010000000001010101000110000000000000000-0200001101001000000004000001-00011200001010000100
    Dioctria_rufipes                    0022011020000210031100211-101110111011110000000000111110320001000201110113110220002000011100101111100001100012012200020011110010010010000000001010101000110000000000000000-0200001101001000000004000000-00011200001010000100
    Diogmites_grossus                   0012010020110010020001211-11111111101111000001000011021043000200220111012301001000200003111011011200000112011202020100011111000000001010200010001010100000000000000000010602110000112000000000001000101-10011200000020000100
    Dysmachus_trigonus                  00230120200001100000001001100110112001110000010000110010010002010201210111010110112021031111110112101001100012020201000001110000001020112000100010101000000000011111000203-0200001110010111111000000100-100110000000021011-0
    Emphysomera_conopsoides             002101302000011000000010011001101120011100000100001105100210020002112101110101101020220211111101121013011000120202010000011100110010001120000000101010001001000??????????????????????????00000000000100-100111000010001011-0
    Emphysomera_pallidapex              00220130200001100000001001100110112001110000010000110500021002000211210111010110102022021111110112101301100012020201000001110010001000112100000010101000100100000111100000-4200001110000200000000000100-100111000000001011-0
    Eudioctria_albius                   00210100201002100010001011101110111011110000010000111210320001000101110113010020002000011101110110000001100012012100020101110000010000000000000010101000010000000000000004-0200001101001000000004010000-01011200001010000100
    Euscelidia_pulchra                  001101002001001000000020011011102120011100000100001100000200000001010002101102200010000111001112111002001000101001000001010-1010020000000000001010101000200000100000000000-4200100111000000000000000112022101210000020001100
    Gonioscelis_ventralis               1013012020110210000000101110111011001110000000001011010001000200021121012201011000000003111111011200000110001202020100011111001000001010200011001010100000000000000000011402110001101000200000000000100-11111200000010000000
    Hemigephyra_atra                    000000--211102000420000301001002000110110000000000010100120000000201210021000000001000011110000112000000000002021200000111110000100010110001000010101000000000000000000037-0201001131001000000000000000-00011200000010101110
    Holcocephala_abdominalis            0020110020000010020000211-101110111011110001010000110110020001000101110111110110002000001000100210100001100012010100000000110010010000010000000010101001000000000000000000-4200001101100200000004000202022111201000012001000
    Holcocephala_calva                  0020110020000000020000211-101110111011110001010000110110020001000101110111110110002000001000100210100001100012010100000000110010010000010000000010101000100000000000000000-4200001101100200000004000202022111201000012001000
    Hoplistomerus_nobilis               0024010020110110001010201-101110111011110100010010110110120002000201110120110110002010001110101111110001100002010102001001110000002011112002110110101010000000022222000000-5200001121000022222003010002100101200000022101110
    Lamyra_gulo                         0022010020000110000010221-111110110011110100011010110210430002000201110121110111002011021110100112111001100002010200000111110100001010112000100010101000100100022200000001-5200001121000022220003010001-01101200000032101110
    Laphria_aktis                       0022011020100110020010221-101110111011120100100010111200430002000211210111110111012010021111110312110101100000010200001111110000001010112000100010101000000000022000000001-5200001121000000000001010002101101100000022101000
    Laphystia_tolandi                   00240100201001100000001000101110111011110100010000110210110001000201110110110110002011021110110112110101100002010100000001110010002010112002000110101000000000022222000000-5200011121000022222003010002001001100000020100010
    Lasiocnemus_lugens                  002101002001001000000020011011102120011100000100001100000200000001010002101102200020010211001102111002001000101101000000000-1010020000011000002010101000200000100000000000-4200110112000000000000000111-11101210000020001100
    Lasiopogon_aldrichii                0013012020110210000001100111111011100111000000010011001002000102021111011001000000200002111111011200000110001201010000000011000002001001000000101010100000000000000000020602110001100001200000001010101-11011200010010001001
    Lasiopogon_cinctus                  001301202011021000000010011111101110011100000001001101100200010202111101100100000020000?111111011200000110001201010000000011000002001001000000101010100000000000000000020602110001100000200000001010101-11011200010010001000
    Laxenecera_albicincta               002401302010011000000010001011101110111101000100101102104300020002011101111101110020110?1111110112110101100002010110001000110000001011112001100010101000000000020000000000-5200001121000022000003010002000101100000022101110
    Leptarthrus_brevirostris            00140130201100100000011101111111111011110000010000110100010001000201110113010110001000031001111111000001110012010200000111110010010010010100001010101010000000000000021101-2200001120100000000000000101-20011200000010000000
    Leptogaster_arida                   001101002001001000000020011011102120011100000100001100000200000002010002101102200010000111001102110001001000101101000001100-1010020000001000002010101000200000100000000000-4200010112000000000000000110-11101210000020001100
    Leptogaster_cylindrica              001101002001001000000020011011102120011100000100001100000200000002010002101102200010000111101102111001001000101101000000000-1010020000001000002010101000200000100000000000-4200010111001000000000000111-11101210000020001100
    Lestomyia_fraudiger                 0023012020110010000001111111111111101111100001000011021012000201220122012301001000200002111111011200000112011202010100011111100000000000210000001010100000000000000000021402110001100000200000000010001-10011200000110000100
    Lycostommyia_albifacies             0014010020110110000001211-1111111110111010000000001101001100010022011101120101100020110?111011011210000110001201020200010111000000001000200000001010100000000000000000011402110001121000200000000010101-11011100100120010000
    Machimus_occidentalis               00230120200001100000001001100110112001110000010000110010010001010201210111010110112021021111110112101001100012020201000001110000001020112100000010101000000000011110000203-0200001111010111110000000100-100110001000021011-0
    Megaphorus_pulchrus                 00220130200001100000001001100110112001110000010000110000020001010101110112010110101011021111110111101101100010010101000000110100001010112001000012101001000000000000000002-1200001110010100000000000100-100211000000021011-0
    Microstylum_sp_Karkloof             0012011020000110021001211110111011101110100000001011020012000100020112012301011001201103111111011210000100001201020100011111000000001011210010001010120000000000000000020402110001112000300000000010101-10011200001010010000
    Mitrodetus_dentitarsis              001421300000020004000003010210020001100--01200000010030143011110010111101012100001000100000111010011100100000201010100000110002000114111320420302001100000100000000000011022212--0012000100000010000102002010-00001020101110
    Molobratia_teutonus                 0024011020110010020001211-111111111011110000000010110210020002002201210103010010001000021110100100000001121212020101000111110010000010002000101010101000010100000000000000-2200001121000000000001010001-10011200000010000000
    Mydas_clavatus                      001421301000020004000003110210020002200--012000000100301430110100101111010121000000001000000000200111001000002010112001000100020001140113200003020011000001000000000000000-0200000100000000000015000102002010-000000001011-0
    Nemomydas_brachyrhynchus            001421300000000004000003110210020001100--0120000001003014301101001011110101210000010000000000002000110010000000101010000001000200011401132040030210110000010000??????????????????????????00000015000102002000-000000001011-0
    Neoitamus_cyanurus                  00220110200000100000001001100110112001110000010000110010010002010211210113010110112022031111110112101001100012020201000111110000001020112100100010101001000000011100000202-0200011100000111110000001100-100111001000000010-0
    Neolophonotus_bimaculatus           00240130200000100000001001100110112001110000010000110010010002010211210112010110002021021111110112101001100012010201000000110000001000112100000010101000000000000000000203-0200010000000100000000000100-100110000000001011-0
    Nicocles_politus                    0024010020110010001001110011111111101111000001000011010001000200020111011301001000100001111111011210000111001201010000010111001001000000210000001010100010000000000000021602010001112100200000000000101-11011200000010000000
    Nusa_infumata                       00240130201001100000001000101110111011110100000000110200120002000201220111110111002011031110110112110001100002020200001111110000001011112001100010101000000000022222000001-5200011101100022222005010002000101200000022101112
    Ommatius_tibialis                   0022013020000110000000100110011011201111000001000011050002100200020121011401011010202102111011011110130110001?020201000001110011001000112000000010101000100000000111100000-0200001110000101111100000200-111112000010001011-0
    Opomydas_townsendi                  001421300001000004000003110210020001100--01200000010031143011010010101101012100001000100000111020111100100000201020100010110002000114011320000302101100000100000000000011022210101101001300000015000001-00010-000000001010-0
    Ospriocerus_aeacus                  101201102011021000000110111011101120011010000000101111?012000200020122012201001000200003111011011200000100001202020100011111000000001011200001001010100000000000000000020402110001121100200000000000101-10011200000110000100
    Pegesimallus_laticornis             0024011020000010022001211-11111111101111000001000011020012000100120111011301001000100001111010010110000112121201020100011111001000001000200010201010100011010000000000011402110001111000010000001010001-200012000001000011-0
    Perasis_transvaalensis              0024010020100110001010211-101110111011110100200010110100120002000201220110110110002010011110100110110001100002010200000111110000002011112000010110101000000000000000000000-5200011101000200000003000001-01111100000010101100
    Philodicus_tenuipes                 00220110200000100000001001100110112001110000010010110510020001010201210112010010102021021110110112101101100011020201000001110000001010112000100012101001000000000000000202-0220010011010111110000000100-100210001000021010-0
    Philonicus_albiceps                 00220110200001100000001001100110112001110000010010110010010002010201210111010110112021021111110112101001100012020201000111110000001020112100100010101000000000011100000202-0220001111010111111000000100-100110000000021011-0
    Phycus_frommeri                     000000--21110200042000031112100200011011000000000001010001000100020121001100010000200002111011011210000000000201110000011111000010001011000010001010100000000000000000000712210001131000000000000000002000011200000010101110
    Pilica_formidolosa                  0023012020001010110010211-111110111011110100010010110200430002000201210111110111012011011111110112111101100002010200001111110000001011112000100010101000000000022220000001-3200000122010122220005010002101001200100022101110
    Plesiomma_sp_Guanacaste             0024010020110010001000111110111021101112000200020011011011000200020121012301001000200003111011010000000100001202020000011111000000001001210000001010100010000000000000021402110011121100200000000010100-10011200000020000100
    Pogonioefferia_pogonias             00240130200001100000001001100110112001110000010010110510020002010201210112010110002011021111110112101001100010020201000101110000001030112000000001101001000000000000000203-0200001111000100000000001100-200010001000021010-0
    Proctacanthus_philadelphicus        00230120200000100000011011110110112001110000000010110510010002010201220122010110002011021110110112101001100012020201000001110000001030112000000000101001000000000000000202-0221001132010100000000000100-100110000000011010-0
    Prolepsis_tristis                   0013012020110110001001111111111011101110100000001011010043000200020122012301001000201003111011011210000110001202020100011111000000001011210000001010100000000000000000020402110001132000200000000010101-11011100001110000100
    Promachus_amastrus                  00220110200000100000001001100110112001110000010010110510020002010201210112010110102021021111110112101101100012020201000011110010001010112000000012101001000000000000000002-1200011000010111111000000100-100210000000021011-0
    Prorates_sp_Escalante               010000--2111000004000003010010020001101100000000000100001200000000002-1120010000000000001010000011000000000000001100000111110020100010012101000010100001000000000000000000-221????????00000000000000102001021200000010101110
    Rhabdogaster_pedion                 0021011020110210001000110010111111101111000001000011010001000100020111010301011000100002111111011200030110001201020100011111000001000001010200101010100010000000000000021402110001101100000000000000101-10001200000010010000
    Rhipidocephala_sp_HaroldJohnson     0010011021100010000000221-101110111011110001010000110110320001000101110111110110002000001001110210100001100012010101000011110010010010000000000010101001000010000000000005-0200001101100200000002000101-11011200000010001000
    Saropogon_luteus                    0011010020110010002001110011111111101111000001001011121012000200220122012301001000200003111011011200000112121202010000011111000000001000210000001010100000000000000000021402110001121000200000004010100-10011200001020000000
    Scylaticus_costalis                 001201102011021000100110111011111110111010000000101101001200010002012101220100100020000?111111011200000100001202020100011111000000001000210000001010100000000000000000021402110001121100200000000010101-10011200000130000000
    Stenopogon_rufibarbis               1024013020110210000001101110111011200110100000000011001001000100021122011201001000000003111111011200000110001202020100011111000000001000200001011010100010000000000000001402110001101000200000000000100-10011101000020000100
    Stichopogon_elegantulus             00110101201102100000001101111110111001110000010100110000020001020201110110110010002000011111010211000101000002011201000000110000020010010000000010101000000000000000000206021100011010002000000040000020310112002001001010-1
    Stichopogon_punctum                 00110101201102100010001101111110111001110000010100110000020002020201110110110110002000011111110211100101000002011100000000110000020010010000001010101000000000000000000106021100011010002000000040000020310112002001001010-1
    Stichopogon_trifasciatus            00110101201102100000001001111110111001110000010100110000020001020201110110110010002000011010100211000101000002011200000000110000020010010000001010101000000000000000000006021100011211002000000040000020310112002001001010-1
    Stiphrolamyra_angularis             0024012020000010000010221-111110110011110100011010110200430002000201110111110111002011011110111111110001100002010200000111110100001010112000100110101010000000022220000001-5200001121000022200003010002111111100000022101110
    Tillobroma_punctipennis             0024013020110110000001101110111111101110100001000011020012000200010111011301011000200002111111011210000110000201120100011111000000001000200000001010100010000000000000021402110001121100200000000010101-10011201000110000000
    Tipulogaster_glabrata               002101002001001000000020011011102120011100000100001100000200000002010002130102200010000111000002111001001000101001000001110-1010020000001000002010101000200000100000000000-4200010112000000000000000110-11101210000020001100
    Tolmerus_atricapillus               00230120200001100000001001100110112001110000000000110010010001010201210111010110112021021111110112101001100012020201000001110000001020112000000010101000000000011111000203-0200001100010111110000000100-100110000000021011-0
    Trichardis_effrena                  00240100201101100000001000101110111011110100010000110210120002000201210120110111002011021110101110110101100002010102001000110000001011112001010110101010000000022222000000-5200001121000022222003010002000101100000022101110
    Trichoura_sp_Tierberg               0011010120110210001000100110111021101110000001011011000002000101020122011201001000200002111111011200001100001202120000000011000001001011210200001010100000000000000000021602110001100001000000000000102022011200000010000000
    Willistonina_bilineata              0011010120110210001001100110011011001110000001011011021012000201020121011301001000200003111011011200000100001202120000000111000001001000010000001010100100000000000000021402110001121000200000000000200-10011100000010000101
  ;
END;


BEGIN TAXA;
	DIMENSIONS NTAX = 88;
	TAXLABELS
		Ablautus_coquilletti
		Acnephalum_cylindricum
		Afroestricus_chiastoneurus
		Afroleptomydas_sp_Clanwilliam
		Apiocera_painteri
		Apsilocephala_longistyla
		Asilus_crabroniformis
		Asilus_sericeus
		Atomosia_puella
		Beameromyia_bifida
		Bombylius_major
		Ceraturgus_fasciatus
		Cerotainia_albipilosa
		Choerades_bella
		Clephydroneura_sp_Kepong
		Connomyia_varipennis
		Cyrtopogon_rattus
		Damalis_annulata
		Damalis_monochaetes
		Dasophrys_crenulatus
		Dasypogon_diadema
		Dioctria_atricapillus
		Dioctria_hyalipennis
		Dioctria_rufipes
		Diogmites_grossus
		Dysmachus_trigonus
		Emphysomera_conopsoides
		Emphysomera_pallidapex
		Eudioctria_albius
		Euscelidia_pulchra
		Gonioscelis_ventralis
		Hemigephyra_atra
		Holcocephala_abdominalis
		Holcocephala_calva
		Hoplistomerus_nobilis
		Lamyra_gulo
		Laphria_aktis
		Laphystia_tolandi
		Lasiocnemus_lugens
		Lasiopogon_aldrichii
		Lasiopogon_cinctus
		Laxenecera_albicincta
		Leptarthrus_brevirostris
		Leptogaster_arida
		Leptogaster_cylindrica
		Lestomyia_fraudiger
		Lycostommyia_albifacies
		Machimus_occidentalis
		Megaphorus_pulchrus
		Microstylum_sp_Karkloof
		Mitrodetus_dentitarsis
		Molobratia_teutonus
		Mydas_clavatus
		Nemomydas_brachyrhynchus
		Neoitamus_cyanurus
		Neolophonotus_bimaculatus
		Nicocles_politus
		Nusa_infumata
		Ommatius_tibialis
		Opomydas_townsendi
		Ospriocerus_aeacus
		Pegesimallus_laticornis
		Perasis_transvaalensis
		Philodicus_tenuipes
		Philonicus_albiceps
		Phycus_frommeri
		Pilica_formidolosa
		Plesiomma_sp_Guanacaste
		Pogonioefferia_pogonias
		Proctacanthus_philadelphicus
		Prolepsis_tristis
		Promachus_amastrus
		Prorates_sp_Escalante
		Rhabdogaster_pedion
		Rhipidocephala_sp_HaroldJohnson
		Saropogon_luteus
		Scylaticus_costalis
		Stenopogon_rufibarbis
		Stichopogon_elegantulus
		Stichopogon_punctum
		Stichopogon_trifasciatus
		Stiphrolamyra_angularis
		Tillobroma_punctipennis
		Tipulogaster_glabrata
		Tolmerus_atricapillus
		Trichardis_effrena
		Trichoura_sp_Tierberg
		Willistonina_bilineata
	;
END;
BEGIN TREES;
	TRANSLATE
		1	Ablautus_coquilletti,
		2	Acnephalum_cylindricum,
		3	Afroestricus_chiastoneurus,
		4	Afroleptomydas_sp_Clanwilliam,
		5	Apiocera_painteri,
		6	Apsilocephala_longistyla,
		7	Asilus_crabroniformis,
		8	Asilus_sericeus,
		9	Atomosia_puella,
		10	Beameromyia_bifida,
		11	Bombylius_major,
		12	Ceraturgus_fasciatus,
		13	Cerotainia_albipilosa,
		14	Choerades_bella,
		15	Clephydroneura_sp_Kepong,
		16	Connomyia_varipennis,
		17	Cyrtopogon_rattus,
		18	Damalis_annulata,
		19	Damalis_monochaetes,
		20	Dasophrys_crenulatus,
		21	Dasypogon_diadema,
		22	Dioctria_atricapillus,
		23	Dioctria_hyalipennis,
		24	Dioctria_rufipes,
		25	Diogmites_grossus,
		26	Dysmachus_trigonus,
		27	Emphysomera_conopsoides,
		28	Emphysomera_pallidapex,
		29	Eudioctria_albius,
		30	Euscelidia_pulchra,
		31	Gonioscelis_ventralis,
		32	Hemigephyra_atra,
		33	Holcocephala_abdominalis,
		34	Holcocephala_calva,
		35	Hoplistomerus_nobilis,
		36	Lamyra_gulo,
		37	Laphria_aktis,
		38	Laphystia_tolandi,
		39	Lasiocnemus_lugens,
		40	Lasiopogon_aldrichii,
		41	Lasiopogon_cinctus,
		42	Laxenecera_albicincta,
		43	Leptarthrus_brevirostris,
		44	Leptogaster_arida,
		45	Leptogaster_cylindrica,
		46	Lestomyia_fraudiger,
		47	Lycostommyia_albifacies,
		48	Machimus_occidentalis,
		49	Megaphorus_pulchrus,
		50	Microstylum_sp_Karkloof,
		51	Mitrodetus_dentitarsis,
		52	Molobratia_teutonus,
		53	Mydas_clavatus,
		54	Nemomydas_brachyrhynchus,
		55	Neoitamus_cyanurus,
		56	Neolophonotus_bimaculatus,
		57	Nicocles_politus,
		58	Nusa_infumata,
		59	Ommatius_tibialis,
		60	Opomydas_townsendi,
		61	Ospriocerus_aeacus,
		62	Pegesimallus_laticornis,
		63	Perasis_transvaalensis,
		64	Philodicus_tenuipes,
		65	Philonicus_albiceps,
		66	Phycus_frommeri,
		67	Pilica_formidolosa,
		68	Plesiomma_sp_Guanacaste,
		69	Pogonioefferia_pogonias,
		70	Proctacanthus_philadelphicus,
		71	Prolepsis_tristis,
		72	Promachus_amastrus,
		73	Prorates_sp_Escalante,
		74	Rhabdogaster_pedion,
		75	Rhipidocephala_sp_HaroldJohnson,
		76	Saropogon_luteus,
		77	Scylaticus_costalis,
		78	Stenopogon_rufibarbis,
		79	Stichopogon_elegantulus,
		80	Stichopogon_punctum,
		81	Stichopogon_trifasciatus,
		82	Stiphrolamyra_angularis,
		83	Tillobroma_punctipennis,
		84	Tipulogaster_glabrata,
		85	Tolmerus_atricapillus,
		86	Trichardis_effrena,
		87	Trichoura_sp_Tierberg,
		88	Willistonina_bilineata
	;
	TREE * ambiguous = [&R] (1,((2,(88,((76,(21,(46,((83,(47,((12,(((((((3,59),(27,28)),(((7,(8,(65,(55,(15,(48,(26,85))))))),((20,56),(69,70))),(49,(64,72)))),(39,(45,(44,(84,(10,30)))))),(5,(6,((73,(11,((51,(4,60)),(53,54)))),(32,66))))),((9,13),(63,((14,37),((67,(58,(42,(38,(35,86))))),(36,82)))))),((75,((18,19),(33,34))),(29,(22,(23,24)))))),(17,(57,(43,74)))))),(25,(52,62)))))),(68,(16,((77,(61,(31,78))),(50,71))))))),(87,((40,41),(81,(79,80))))));
	TREE * ambiguous = [&R] (1,((2,(88,((76,(21,(46,((83,(47,((12,(((((((3,59),(27,28)),(((7,(8,(65,(55,(15,(48,(26,85))))))),((20,56),(69,70))),(49,(64,72)))),(39,(45,(44,(84,(10,30)))))),(5,(6,((73,(11,((51,(4,60)),(53,54)))),(32,66))))),((9,13),(63,((14,37),((58,(42,(38,(35,86)))),(67,(36,82))))))),((75,((18,19),(33,34))),(29,(22,(23,24)))))),(17,(57,(43,74)))))),(25,(52,62)))))),(68,((16,(50,71)),(77,(61,(31,78)))))))),(87,((40,41),(81,(79,80))))));
	TREE * ambiguous = [&R] (1,((2,(88,((68,(21,(76,(46,((83,(47,((12,(((((((3,59),(27,28)),((((7,8),(65,(55,(15,(48,(26,85)))))),((20,56),(69,70))),(49,(64,72)))),(39,(45,(44,(84,(10,30)))))),(5,(6,((73,(11,((51,(4,60)),(53,54)))),(32,66))))),((9,13),(63,((14,37),((67,(58,(42,(38,(35,86))))),(36,82)))))),((75,((18,19),(33,34))),(29,(22,(23,24)))))),(17,(57,(43,74)))))),(25,(52,62))))))),((16,(50,71)),(77,(61,(31,78))))))),(87,((40,41),(81,(79,80))))));
	TREE * ambiguous = [&R] (1,((2,(88,((68,(21,(76,(46,((83,(47,((12,(((((((3,59),(27,28)),(((7,(8,(65,(55,(15,(48,(26,85))))))),((20,56),(69,70))),(49,(64,72)))),(39,(45,(44,(84,(10,30)))))),(5,(6,((73,(11,((51,(4,60)),(53,54)))),(32,66))))),((9,13),(63,((14,37),((58,(42,(38,(35,86)))),(67,(36,82))))))),((75,((18,19),(33,34))),(29,(22,(23,24)))))),(17,(57,(43,74)))))),(25,(52,62))))))),((16,(50,71)),(77,(61,(31,78))))))),(87,((40,41),(81,(79,80))))));
	TREE * ambiguous = [&R] (1,((2,(88,((76,(21,(46,((83,(47,((12,(((((((3,59),(27,28)),((((7,8),(65,(55,(15,(48,(26,85)))))),((20,56),(69,70))),(49,(64,72)))),(39,(45,(44,(84,(10,30)))))),(5,(6,((73,(11,((51,(4,60)),(53,54)))),(32,66))))),((9,13),(63,((14,37),((58,(42,(38,(35,86)))),(67,(36,82))))))),((75,((18,19),(33,34))),(29,(22,(23,24)))))),(17,(57,(43,74)))))),(25,(52,62)))))),(68,(16,((77,(61,(31,78))),(50,71))))))),(87,((40,41),(81,(79,80))))));
	TREE * ambiguous = [&R] (1,((2,(88,((76,(21,(46,((83,(47,((12,(((((((3,59),(27,28)),((69,((70,(7,(8,(65,(55,(15,(48,(26,85)))))))),(49,(64,72)))),(20,56))),(39,(45,(44,(84,(10,30)))))),(5,(6,((73,(11,((51,(4,60)),(53,54)))),(32,66))))),((9,13),(63,((14,37),((58,(42,(38,(35,86)))),(67,(36,82))))))),((75,((18,19),(33,34))),(29,(22,(23,24)))))),(17,(57,(43,74)))))),(25,(52,62)))))),(68,(16,((77,(61,(31,78))),(50,71))))))),(87,((40,41),(81,(79,80))))));
	TREE * ambiguous = [&R] (1,((2,(88,((76,(21,(46,((83,(47,((12,(((((((3,59),(27,28)),((69,((70,(7,(8,(65,(55,(15,(48,(26,85)))))))),(49,(64,72)))),(20,56))),(39,(45,(44,(84,(10,30)))))),(5,(6,((73,(11,((51,(4,60)),(53,54)))),(32,66))))),((9,13),(63,((14,37),((58,(42,(38,(35,86)))),(67,(36,82))))))),((75,((18,19),(33,34))),(29,(22,(23,24)))))),(17,(57,(43,74)))))),(25,(52,62)))))),(68,((16,(50,71)),(77,(61,(31,78)))))))),(87,((40,41),(81,(79,80))))));
	TREE * ambiguous = [&R] (1,((2,(88,((76,(21,(46,((83,(47,((12,(((((((3,59),(27,28)),((((7,8),(65,(55,(15,(48,(26,85)))))),((20,56),(69,70))),(49,(64,72)))),(39,(45,(44,(84,(10,30)))))),(5,(6,((73,(11,((51,(4,60)),(53,54)))),(32,66))))),((9,13),(63,((14,37),((58,(42,(38,(35,86)))),(67,(36,82))))))),((75,((18,19),(33,34))),(29,(22,(23,24)))))),(17,(57,(43,74)))))),(25,(52,62)))))),(68,((16,(50,71)),(77,(61,(31,78)))))))),(87,((40,41),(81,(79,80))))));
	TREE * ambiguous = [&R] (1,((2,(88,((68,(21,(76,(46,((83,(47,((12,(((((((3,59),(27,28)),((((7,8),(65,(55,(15,(48,(26,85)))))),((20,56),(69,70))),(49,(64,72)))),(39,(45,(44,(84,(10,30)))))),(5,(6,((73,(11,((51,(4,60)),(53,54)))),(32,66))))),((9,13),(63,((14,37),((58,(42,(38,(35,86)))),(67,(36,82))))))),((75,((18,19),(33,34))),(29,(22,(23,24)))))),(17,(57,(43,74)))))),(25,(52,62))))))),((16,(50,71)),(77,(61,(31,78))))))),(87,((40,41),(81,(79,80))))));
	TREE * ambiguous = [&R] (1,((2,(88,((76,(21,(46,((83,(47,((12,(((((((3,59),(27,28)),((((7,8),(65,(55,(15,(48,(26,85)))))),((20,56),(69,70))),(49,(64,72)))),(39,(45,(44,(84,(10,30)))))),(5,(6,((73,(11,((51,(4,60)),(53,54)))),(32,66))))),((9,13),(63,((14,37),((67,(58,(42,(38,(35,86))))),(36,82)))))),((75,((18,19),(33,34))),(29,(22,(23,24)))))),(17,(57,(43,74)))))),(25,(52,62)))))),(68,((16,(50,71)),(77,(61,(31,78)))))))),(87,((40,41),(81,(79,80))))));
	TREE * ambiguous = [&R] (1,((2,(88,((76,(21,(46,((83,(47,((12,(((((((3,59),(27,28)),((((7,8),(65,(55,(15,(48,(26,85)))))),((20,56),(69,70))),(49,(64,72)))),(39,(45,(44,(84,(10,30)))))),(5,(6,((73,(11,((51,(4,60)),(53,54)))),(32,66))))),((9,13),(63,((14,37),((67,(58,(42,(38,(35,86))))),(36,82)))))),((75,((18,19),(33,34))),(29,(22,(23,24)))))),(17,(57,(43,74)))))),(25,(52,62)))))),(68,(16,((77,(61,(31,78))),(50,71))))))),(87,((40,41),(81,(79,80))))));
	TREE * ambiguous = [&R] (1,((2,(88,((76,(21,(46,((83,(47,((12,(((((((3,59),(27,28)),(((7,(8,(65,(55,(15,(48,(26,85))))))),((20,56),(69,70))),(49,(64,72)))),(39,(45,(44,(84,(10,30)))))),(5,(6,((73,(11,((51,(4,60)),(53,54)))),(32,66))))),((9,13),(63,((14,37),((58,(42,(38,(35,86)))),(67,(36,82))))))),((75,((18,19),(33,34))),(29,(22,(23,24)))))),(17,(57,(43,74)))))),(25,(52,62)))))),(68,(16,((77,(61,(31,78))),(50,71))))))),(87,((40,41),(81,(79,80))))));
	TREE * ambiguous = [&R] (1,((2,(88,((76,(21,(46,((83,(47,((12,(((((((3,59),(27,28)),(((7,(8,(65,(55,(15,(48,(26,85))))))),((20,56),(69,70))),(49,(64,72)))),(39,(45,(44,(84,(10,30)))))),(5,(6,((73,(11,((51,(4,60)),(53,54)))),(32,66))))),((9,13),(63,((14,37),((67,(58,(42,(38,(35,86))))),(36,82)))))),((75,((18,19),(33,34))),(29,(22,(23,24)))))),(17,(57,(43,74)))))),(25,(52,62)))))),(68,((16,(50,71)),(77,(61,(31,78)))))))),(87,((40,41),(81,(79,80))))));
	TREE * ambiguous = [&R] (1,((2,(88,((76,(21,(46,((83,(47,((12,(((((((3,59),(27,28)),((69,((70,(7,(8,(65,(55,(15,(48,(26,85)))))))),(49,(64,72)))),(20,56))),(39,(45,(44,(84,(10,30)))))),(5,(6,((73,(11,((51,(4,60)),(53,54)))),(32,66))))),((9,13),(63,((14,37),((67,(58,(42,(38,(35,86))))),(36,82)))))),((75,((18,19),(33,34))),(29,(22,(23,24)))))),(17,(57,(43,74)))))),(25,(52,62)))))),(68,(16,((77,(61,(31,78))),(50,71))))))),(87,((40,41),(81,(79,80))))));
	TREE * ambiguous = [&R] (1,((2,(88,((76,(21,(46,((83,(47,((12,(((((((3,59),(27,28)),((69,((70,(7,(8,(65,(55,(15,(48,(26,85)))))))),(49,(64,72)))),(20,56))),(39,(45,(44,(84,(10,30)))))),(5,(6,((73,(11,((51,(4,60)),(53,54)))),(32,66))))),((9,13),(63,((14,37),((67,(58,(42,(38,(35,86))))),(36,82)))))),((75,((18,19),(33,34))),(29,(22,(23,24)))))),(17,(57,(43,74)))))),(25,(52,62)))))),(68,((16,(50,71)),(77,(61,(31,78)))))))),(87,((40,41),(81,(79,80))))));
	TREE * ambiguous = [&R] (1,((2,(88,((68,(21,(76,(46,((83,(47,((12,(((((((3,59),(27,28)),(((7,(8,(65,(55,(15,(48,(26,85))))))),((20,56),(69,70))),(49,(64,72)))),(39,(45,(44,(84,(10,30)))))),(5,(6,((73,(11,((51,(4,60)),(53,54)))),(32,66))))),((9,13),(63,((14,37),((67,(58,(42,(38,(35,86))))),(36,82)))))),((75,((18,19),(33,34))),(29,(22,(23,24)))))),(17,(57,(43,74)))))),(25,(52,62))))))),((16,(50,71)),(77,(61,(31,78))))))),(87,((40,41),(81,(79,80))))));
	TREE * ambiguous = [&R] (1,((2,(88,((68,(21,(76,(46,((83,(47,((12,(((((((3,59),(27,28)),((69,((70,(7,(8,(65,(55,(15,(48,(26,85)))))))),(49,(64,72)))),(20,56))),(39,(45,(44,(84,(10,30)))))),(5,(6,((73,(11,((51,(4,60)),(53,54)))),(32,66))))),((9,13),(63,((14,37),((58,(42,(38,(35,86)))),(67,(36,82))))))),((75,((18,19),(33,34))),(29,(22,(23,24)))))),(17,(57,(43,74)))))),(25,(52,62))))))),((16,(50,71)),(77,(61,(31,78))))))),(87,((40,41),(81,(79,80))))));
	TREE * ambiguous = [&R] (1,((2,(88,((68,(21,(76,(46,((83,(47,((12,(((((((3,59),(27,28)),((69,((70,(7,(8,(65,(55,(15,(48,(26,85)))))))),(49,(64,72)))),(20,56))),(39,(45,(44,(84,(10,30)))))),(5,(6,((73,(11,((51,(4,60)),(53,54)))),(32,66))))),((9,13),(63,((14,37),((67,(58,(42,(38,(35,86))))),(36,82)))))),((75,((18,19),(33,34))),(29,(22,(23,24)))))),(17,(57,(43,74)))))),(25,(52,62))))))),((16,(50,71)),(77,(61,(31,78))))))),(87,((40,41),(81,(79,80))))));
	TREE * extraState = [&R] (1,(2,((((46,(83,(47,(12,(17,(((((((3,59),(27,28)),((69,((70,(7,(8,(65,(55,(15,(48,(26,85)))))))),(49,(64,72)))),(20,56))),(39,(45,(44,(84,(10,30)))))),((5,((6,(73,(11,((51,(4,60)),(53,54))))),(32,66))),((9,13),(63,((14,37),((58,(42,(38,(35,86)))),(67,(36,82)))))))),((75,((18,19),(33,34))),(29,(22,(23,24))))),(57,(43,74)))))))),(76,(21,(25,(52,62))))),(68,((16,(50,71)),(77,(61,(31,78)))))),(88,(87,((40,41),(81,(79,80))))))));
	TREE * extraState = [&R] (1,(2,((((46,(83,(47,(17,((12,(((((((3,59),(27,28)),(((7,(8,(65,(55,(15,(48,(26,85))))))),((20,56),(69,70))),(49,(64,72)))),(39,(45,(44,(84,(10,30)))))),(5,((73,(11,((51,(4,60)),(53,54)))),(6,(32,66))))),((9,13),(63,((14,37),((58,(42,(38,(35,86)))),(67,(36,82))))))),((75,((18,19),(33,34))),(29,(22,(23,24)))))),(57,(43,74))))))),(76,(21,(25,(52,62))))),(68,((16,(50,71)),(77,(61,(31,78)))))),(88,(87,((40,41),(81,(79,80))))))));
	TREE * extraState = [&R] (1,(2,(((68,((83,(47,(17,((12,(((((((3,59),(27,28)),((((7,8),(65,(55,(15,(48,(26,85)))))),((20,56),(69,70))),(49,(64,72)))),(39,(45,(44,(84,(10,30)))))),(5,((73,(11,((51,(4,60)),(53,54)))),(6,(32,66))))),((9,13),(63,((14,37),((58,(42,(38,(35,86)))),(67,(36,82))))))),((75,((18,19),(33,34))),(29,(22,(23,24)))))),(57,(43,74)))))),(46,(76,(21,(25,(52,62))))))),(77,((16,(50,71)),(61,(31,78))))),(88,(87,((40,41),(81,(79,80))))))));
	TREE * extraState = [&R] (1,(2,((((46,(83,(47,(12,(17,(((((((3,59),(27,28)),((69,((70,(7,(8,(65,(55,(15,(48,(26,85)))))))),(49,(64,72)))),(20,56))),(39,(45,(44,(84,(10,30)))))),(((5,((6,(73,(11,((51,(4,60)),(53,54))))),(32,66))),(63,((14,37),((58,(42,(38,(35,86)))),(67,(36,82)))))),(9,13))),((75,((18,19),(33,34))),(29,(22,(23,24))))),(57,(43,74)))))))),(76,(21,(25,(52,62))))),(68,((16,(50,71)),(77,(61,(31,78)))))),(88,(87,((40,41),(81,(79,80))))))));
	TREE * extraState = [&R] (1,(2,((((46,(83,(47,(12,(17,((((((((3,59),(27,28)),((((7,8),(65,(55,(15,(48,(26,85)))))),((20,56),(69,70))),(49,(64,72)))),(39,(45,(44,(84,(10,30)))))),((((51,(4,60)),(53,54)),(5,((6,(11,73)),(32,66)))),((9,13),(63,((14,37),((67,(58,(42,(38,(35,86))))),(36,82))))))),((75,((18,19),(33,34))),(29,(22,(23,24))))),((40,41),(80,(79,81)))),(57,(43,74)))))))),(76,(21,(25,(52,62))))),(68,((16,(50,71)),(77,(61,(31,78)))))),(87,88))));
	TREE * extraState = [&R] (1,(2,(((68,((((17,(12,(((((((3,59),(27,28)),((((7,8),(65,(55,(15,(48,(26,85)))))),((20,56),(69,70))),(49,(64,72)))),(39,(45,(44,(84,(10,30)))))),(5,((73,(11,((51,(4,60)),(53,54)))),(6,(32,66))))),((9,13),(63,((14,37),((67,(58,(42,(38,(35,86))))),(36,82)))))),((75,((18,19),(33,34))),(29,(22,(23,24))))))),(47,83)),(57,(43,74))),(46,(76,(21,(25,(52,62))))))),(77,((16,(50,71)),(61,(31,78))))),(88,(87,((40,41),(81,(79,80))))))));
	TREE * extraState = [&R] (1,(2,(((68,((((17,(12,(((((((3,59),(27,28)),((((7,8),(65,(55,(15,(48,(26,85)))))),((20,56),(69,70))),(49,(64,72)))),(39,(45,(44,(84,(10,30)))))),(5,(6,((73,(11,((51,(4,60)),(53,54)))),(32,66))))),((9,13),(63,((14,37),((58,(42,(38,(35,86)))),(67,(36,82))))))),((75,((18,19),(33,34))),(29,(22,(23,24))))))),(47,83)),(57,(43,74))),(46,(76,(21,(25,(52,62))))))),(77,((16,(50,71)),(61,(31,78))))),(88,(87,((40,41),(81,(79,80))))))));
	TREE * extraState = [&R] (1,(2,((((46,(83,(47,(12,(17,((((((((3,59),(27,28)),((69,((70,(7,(8,(65,(55,(15,(48,(26,85)))))))),(49,(64,72)))),(20,56))),(39,(45,(44,(84,(10,30)))))),((((51,(4,60)),(53,54)),(5,((6,(11,73)),(32,66)))),((9,13),(63,((14,37),((58,(42,(38,(35,86)))),(67,(36,82)))))))),((75,((18,19),(33,34))),(29,(22,(23,24))))),((40,41),(80,(79,81)))),(57,(43,74)))))))),(76,(21,(25,(52,62))))),(68,((16,(50,71)),(77,(61,(31,78)))))),(87,88))));
	TREE * extraState = [&R] (1,(2,(((68,((83,(47,((12,(((((((3,59),(27,28)),(((7,(8,(65,(55,(15,(48,(26,85))))))),((20,56),(69,70))),(49,(64,72)))),(39,(45,(44,(84,(10,30)))))),(5,(6,((73,(11,((51,(4,60)),(53,54)))),(32,66))))),((9,13),(63,((14,37),((67,(58,(42,(38,(35,86))))),(36,82)))))),((75,((18,19),(33,34))),(29,(22,(23,24)))))),(17,(57,(43,74)))))),(46,(76,(21,(25,(52,62))))))),(77,((16,(50,71)),(61,(31,78))))),(88,(87,((40,41),(81,(79,80))))))));
	TREE * extraState = [&R] (1,(2,((((46,(83,(47,((12,((((((3,59),(27,28)),((((7,8),(65,(55,(15,(48,(26,85)))))),((20,56),(69,70))),(49,(64,72)))),(39,(45,(44,(84,(10,30)))))),((5,((6,(73,(11,((51,(4,60)),(53,54))))),(32,66))),((9,13),(63,((14,37),((58,(42,(38,(35,86)))),(67,(36,82)))))))),((75,((18,19),(33,34))),(29,(22,(23,24)))))),(17,(57,(43,74))))))),(76,(21,(25,(52,62))))),(68,((16,(50,71)),(77,(61,(31,78)))))),(88,(87,((40,41),(81,(79,80))))))));
	TREE * extraState = [&R] (1,(2,(((68,((83,(47,(12,(17,(((((((3,59),(27,28)),((((7,8),(65,(55,(15,(48,(26,85)))))),((20,56),(69,70))),(49,(64,72)))),(39,(45,(44,(84,(10,30)))))),(((5,((6,(73,(11,((51,(4,60)),(53,54))))),(32,66))),(63,((14,37),((58,(42,(38,(35,86)))),(67,(36,82)))))),(9,13))),((75,((18,19),(33,34))),(29,(22,(23,24))))),(57,(43,74))))))),(46,(76,(21,(25,(52,62))))))),(77,((16,(50,71)),(61,(31,78))))),(88,(87,((40,41),(81,(79,80))))))));
	TREE * extraState = [&R] (1,(2,((((46,(83,(47,((12,((((((3,59),(27,28)),(((7,(8,(65,(55,(15,(48,(26,85))))))),((20,56),(69,70))),(49,(64,72)))),(39,(45,(44,(84,(10,30)))))),((5,((6,(73,(11,((51,(4,60)),(53,54))))),(32,66))),((9,13),(63,((14,37),((58,(42,(38,(35,86)))),(67,(36,82)))))))),((75,((18,19),(33,34))),(29,(22,(23,24)))))),(17,(57,(43,74))))))),(76,(21,(25,(52,62))))),(68,((16,(50,71)),(77,(61,(31,78)))))),(88,(87,((40,41),(81,(79,80))))))));
	TREE * extraState = [&R] (1,(2,((((46,(83,(47,((12,(((((((3,59),(27,28)),(((7,(8,(65,(55,(15,(48,(26,85))))))),((20,56),(69,70))),(49,(64,72)))),(39,(45,(44,(84,(10,30)))))),(5,(6,((73,(11,((51,(4,60)),(53,54)))),(32,66))))),((9,13),(63,((14,37),((58,(42,(38,(35,86)))),(67,(36,82))))))),((75,((18,19),(33,34))),(29,(22,(23,24)))))),(17,(57,(43,74))))))),(76,(21,(25,(52,62))))),(68,((16,(50,71)),(77,(61,(31,78)))))),(88,(87,((40,41),(81,(79,80))))))));
	TREE * extraState = [&R] (1,(2,(((68,((83,(47,(12,(17,(((((((3,59),(27,28)),((69,((70,(7,(8,(65,(55,(15,(48,(26,85)))))))),(49,(64,72)))),(20,56))),(39,(45,(44,(84,(10,30)))))),(((5,((6,(73,(11,((51,(4,60)),(53,54))))),(32,66))),(63,((14,37),((58,(42,(38,(35,86)))),(67,(36,82)))))),(9,13))),((75,((18,19),(33,34))),(29,(22,(23,24))))),(57,(43,74))))))),(46,(76,(21,(25,(52,62))))))),(77,((16,(50,71)),(61,(31,78))))),(88,(87,((40,41),(81,(79,80))))))));
	TREE * extraState = [&R] (1,(2,(((68,((((17,(12,(((((((3,59),(27,28)),(((7,(8,(65,(55,(15,(48,(26,85))))))),((20,56),(69,70))),(49,(64,72)))),(39,(45,(44,(84,(10,30)))))),(5,((73,(11,((51,(4,60)),(53,54)))),(6,(32,66))))),((9,13),(63,((14,37),((67,(58,(42,(38,(35,86))))),(36,82)))))),((75,((18,19),(33,34))),(29,(22,(23,24))))))),(47,83)),(57,(43,74))),(46,(76,(21,(25,(52,62))))))),(77,((16,(50,71)),(61,(31,78))))),(88,(87,((40,41),(81,(79,80))))))));
	TREE * extraState = [&R] (1,(2,((((46,(83,(47,(12,(17,(((((((3,59),(27,28)),((69,((70,(7,(8,(65,(55,(15,(48,(26,85)))))))),(49,(64,72)))),(20,56))),(39,(45,(44,(84,(10,30)))))),((((5,((6,(73,(11,((51,(4,60)),(53,54))))),(32,66))),(63,((14,37),((58,(42,(38,(35,86)))),(67,(36,82)))))),(9,13)),((75,((18,19),(33,34))),(29,(22,(23,24)))))),((40,41),(80,(79,81)))),(57,(43,74)))))))),(76,(21,(25,(52,62))))),(68,((16,(50,71)),(77,(61,(31,78)))))),(87,88))));
	TREE * extraState = [&R] (1,(2,(((68,((83,(47,(12,(17,(((((((3,59),(27,28)),((((7,8),(65,(55,(15,(48,(26,85)))))),((20,56),(69,70))),(49,(64,72)))),(39,(45,(44,(84,(10,30)))))),(((5,((6,(73,(11,((51,(4,60)),(53,54))))),(32,66))),(63,((14,37),((67,(58,(42,(38,(35,86))))),(36,82))))),(9,13))),((75,((18,19),(33,34))),(29,(22,(23,24))))),(57,(43,74))))))),(46,(76,(21,(25,(52,62))))))),(77,((16,(50,71)),(61,(31,78))))),(88,(87,((40,41),(81,(79,80))))))));
	TREE * extraState = [&R] (1,(2,((((46,(83,(47,((12,(((((((3,59),(27,28)),((69,((70,(7,(8,(65,(55,(15,(48,(26,85)))))))),(49,(64,72)))),(20,56))),(39,(45,(44,(84,(10,30)))))),(((60,(4,51)),(53,54)),(5,((6,(11,73)),(32,66))))),((9,13),(63,((14,37),((58,(42,(38,(35,86)))),(67,(36,82))))))),((75,((18,19),(33,34))),(29,(22,(23,24)))))),(17,(57,(43,74))))))),(76,(21,(25,(52,62))))),(68,((16,(50,71)),(77,(61,(31,78)))))),(88,(87,((40,41),(81,(79,80))))))));
	TREE * extraState = [&R] (1,(2,((((46,(83,(47,((12,((((((3,59),(27,28)),((((7,8),(65,(55,(15,(48,(26,85)))))),((20,56),(69,70))),(49,(64,72)))),(39,(45,(44,(84,(10,30)))))),((5,((6,(73,(11,((51,(4,60)),(53,54))))),(32,66))),((9,13),(63,((14,37),((67,(58,(42,(38,(35,86))))),(36,82))))))),((75,((18,19),(33,34))),(29,(22,(23,24)))))),(17,(57,(43,74))))))),(76,(21,(25,(52,62))))),(68,((16,(50,71)),(77,(61,(31,78)))))),(88,(87,((40,41),(81,(79,80))))))));
	TREE * extraState = [&R] (1,(2,((((46,(83,(47,(12,(17,(((((((3,59),(27,28)),(((7,(8,(65,(55,(15,(48,(26,85))))))),((20,56),(69,70))),(49,(64,72)))),(39,(45,(44,(84,(10,30)))))),((5,((6,(73,(11,((51,(4,60)),(53,54))))),(32,66))),((9,13),(63,((14,37),((58,(42,(38,(35,86)))),(67,(36,82)))))))),((75,((18,19),(33,34))),(29,(22,(23,24))))),(57,(43,74)))))))),(76,(21,(25,(52,62))))),(68,((16,(50,71)),(77,(61,(31,78)))))),(88,(87,((40,41),(81,(79,80))))))));
	TREE * extraState = [&R] (1,(2,(((68,((((17,(12,(((((((3,59),(27,28)),((69,((70,(7,(8,(65,(55,(15,(48,(26,85)))))))),(49,(64,72)))),(20,56))),(39,(45,(44,(84,(10,30)))))),(5,(6,((73,(11,((51,(4,60)),(53,54)))),(32,66))))),((9,13),(63,((14,37),((67,(58,(42,(38,(35,86))))),(36,82)))))),((75,((18,19),(33,34))),(29,(22,(23,24))))))),(47,83)),(57,(43,74))),(46,(76,(21,(25,(52,62))))))),(77,((16,(50,71)),(61,(31,78))))),(88,(87,((40,41),(81,(79,80))))))));
	TREE * extraState = [&R] (1,(2,(((68,(((((((((3,59),(27,28)),((((7,8),(65,(55,(15,(48,(26,85)))))),((20,56),(69,70))),(49,(64,72)))),(39,(45,(44,(84,(10,30)))))),((5,((6,(73,(11,((51,(4,60)),(53,54))))),(32,66))),((9,13),(63,((14,37),((58,(42,(38,(35,86)))),(67,(36,82)))))))),((75,((18,19),(33,34))),(29,(22,(23,24))))),(57,(43,74))),((12,17),(47,83))),(46,(76,(21,(25,(52,62))))))),(77,((16,(50,71)),(61,(31,78))))),(88,(87,((40,41),(81,(79,80))))))));
	TREE * extraState = [&R] (1,(2,(((68,(((((((((3,59),(27,28)),((((7,8),(65,(55,(15,(48,(26,85)))))),((20,56),(69,70))),(49,(64,72)))),(39,(45,(44,(84,(10,30)))))),(5,(6,((73,(11,((51,(4,60)),(53,54)))),(32,66))))),((9,13),(63,((14,37),((67,(58,(42,(38,(35,86))))),(36,82)))))),((75,((18,19),(33,34))),(29,(22,(23,24))))),(12,((17,(57,(43,74))),(47,83)))),(46,(76,(21,(25,(52,62))))))),(77,((16,(50,71)),(61,(31,78))))),(88,(87,((40,41),(81,(79,80))))))));
	TREE * extraState = [&R] (1,(2,(((68,((83,(47,(17,(12,(((((((3,59),(27,28)),((((7,8),(65,(55,(15,(48,(26,85)))))),((20,56),(69,70))),(49,(64,72)))),(39,(45,(44,(84,(10,30)))))),(((5,((6,(73,(11,((51,(4,60)),(53,54))))),(32,66))),(63,((14,37),((67,(58,(42,(38,(35,86))))),(36,82))))),(9,13))),((75,((18,19),(33,34))),(29,(22,(23,24))))),(57,(43,74))))))),(46,(76,(21,(25,(52,62))))))),(77,((16,(50,71)),(61,(31,78))))),(88,(87,((40,41),(81,(79,80))))))));
	TREE * extraState = [&R] (1,(2,(((68,((83,(47,((12,((((((3,59),(27,28)),(((7,(8,(65,(55,(15,(48,(26,85))))))),((20,56),(69,70))),(49,(64,72)))),(39,(45,(44,(84,(10,30)))))),((5,((6,(73,(11,((51,(4,60)),(53,54))))),(32,66))),((9,13),(63,((14,37),((67,(58,(42,(38,(35,86))))),(36,82))))))),((75,((18,19),(33,34))),(29,(22,(23,24)))))),(17,(57,(43,74)))))),(46,(76,(21,(25,(52,62))))))),(77,((16,(50,71)),(61,(31,78))))),(88,(87,((40,41),(81,(79,80))))))));
	TREE * extraState = [&R] (1,(2,(((68,((((17,(12,((((((3,59),(27,28)),(((7,(8,(65,(55,(15,(48,(26,85))))))),((20,56),(69,70))),(49,(64,72)))),(39,(45,(44,(84,(10,30)))))),((5,((6,(73,(11,((51,(4,60)),(53,54))))),(32,66))),((9,13),(63,((14,37),((67,(58,(42,(38,(35,86))))),(36,82))))))),((75,((18,19),(33,34))),(29,(22,(23,24))))))),(47,83)),(57,(43,74))),(46,(76,(21,(25,(52,62))))))),(77,((16,(50,71)),(61,(31,78))))),(88,(87,((40,41),(81,(79,80))))))));
	TREE * extraState = [&R] (1,(2,(((68,((83,(47,(12,(17,(((((((3,59),(27,28)),((((7,8),(65,(55,(15,(48,(26,85)))))),((20,56),(69,70))),(49,(64,72)))),(39,(45,(44,(84,(10,30)))))),((5,((6,(73,(11,((51,(4,60)),(53,54))))),(32,66))),((9,13),(63,((14,37),((58,(42,(38,(35,86)))),(67,(36,82)))))))),((75,((18,19),(33,34))),(29,(22,(23,24))))),(57,(43,74))))))),(46,(76,(21,(25,(52,62))))))),(77,((16,(50,71)),(61,(31,78))))),(88,(87,((40,41),(81,(79,80))))))));
	TREE * extraState = [&R] (1,(2,(((68,(((((((((3,59),(27,28)),(((7,(8,(65,(55,(15,(48,(26,85))))))),((20,56),(69,70))),(49,(64,72)))),(39,(45,(44,(84,(10,30)))))),((5,((6,(73,(11,((51,(4,60)),(53,54))))),(32,66))),((9,13),(63,((14,37),((58,(42,(38,(35,86)))),(67,(36,82)))))))),((75,((18,19),(33,34))),(29,(22,(23,24))))),(57,(43,74))),((12,17),(47,83))),(46,(76,(21,(25,(52,62))))))),(77,((16,(50,71)),(61,(31,78))))),(88,(87,((40,41),(81,(79,80))))))));
	TREE * extraState = [&R] (1,(2,((((46,(83,(47,((12,(((((((3,59),(27,28)),((69,((70,(7,(8,(65,(55,(15,(48,(26,85)))))))),(49,(64,72)))),(20,56))),(39,(45,(44,(84,(10,30)))))),((9,13),(63,((14,37),((58,(42,(38,(35,86)))),(67,(36,82))))))),(5,((6,(73,(11,((51,(4,60)),(53,54))))),(32,66)))),((75,((18,19),(33,34))),(29,(22,(23,24)))))),(17,(57,(43,74))))))),(76,(21,(25,(52,62))))),(68,((16,(50,71)),(77,(61,(31,78)))))),(88,(87,((40,41),(81,(79,80))))))));
	TREE * extraState = [&R] (1,(2,((((46,(83,(47,(17,((12,(((((((3,59),(27,28)),((69,((70,(7,(8,(65,(55,(15,(48,(26,85)))))))),(49,(64,72)))),(20,56))),(39,(45,(44,(84,(10,30)))))),(5,((73,(11,((51,(4,60)),(53,54)))),(6,(32,66))))),((9,13),(63,((14,37),((67,(58,(42,(38,(35,86))))),(36,82)))))),((75,((18,19),(33,34))),(29,(22,(23,24)))))),(57,(43,74))))))),(76,(21,(25,(52,62))))),(68,((16,(50,71)),(77,(61,(31,78)))))),(88,(87,((40,41),(81,(79,80))))))));
	TREE * extraState = [&R] (1,(2,(((68,((83,(47,(17,(12,(((((((3,59),(27,28)),((69,((70,(7,(8,(65,(55,(15,(48,(26,85)))))))),(49,(64,72)))),(20,56))),(39,(45,(44,(84,(10,30)))))),(((5,((6,(73,(11,((51,(4,60)),(53,54))))),(32,66))),(63,((14,37),((67,(58,(42,(38,(35,86))))),(36,82))))),(9,13))),((75,((18,19),(33,34))),(29,(22,(23,24))))),(57,(43,74))))))),(46,(76,(21,(25,(52,62))))))),(77,((16,(50,71)),(61,(31,78))))),(88,(87,((40,41),(81,(79,80))))))));
	TREE * extraState = [&R] (1,(2,(((68,((83,(47,(17,((12,(((((((3,59),(27,28)),(((7,(8,(65,(55,(15,(48,(26,85))))))),((20,56),(69,70))),(49,(64,72)))),(39,(45,(44,(84,(10,30)))))),(5,(6,((73,(11,((51,(4,60)),(53,54)))),(32,66))))),((9,13),(63,((14,37),((67,(58,(42,(38,(35,86))))),(36,82)))))),((75,((18,19),(33,34))),(29,(22,(23,24)))))),(57,(43,74)))))),(46,(76,(21,(25,(52,62))))))),(77,((16,(50,71)),(61,(31,78))))),(88,(87,((40,41),(81,(79,80))))))));
	TREE * extraState = [&R] (1,(2,(((68,((83,(47,(12,(17,(((((((3,59),(27,28)),((69,((70,(7,(8,(65,(55,(15,(48,(26,85)))))))),(49,(64,72)))),(20,56))),(39,(45,(44,(84,(10,30)))))),((5,((6,(73,(11,((51,(4,60)),(53,54))))),(32,66))),((9,13),(63,((14,37),((67,(58,(42,(38,(35,86))))),(36,82))))))),((75,((18,19),(33,34))),(29,(22,(23,24))))),(57,(43,74))))))),(46,(76,(21,(25,(52,62))))))),(77,((16,(50,71)),(61,(31,78))))),(88,(87,((40,41),(81,(79,80))))))));
	TREE * extraState = [&R] (1,(2,((((46,(83,(47,((12,(((((((3,59),(27,28)),(((7,(8,(65,(55,(15,(48,(26,85))))))),((20,56),(69,70))),(49,(64,72)))),(39,(45,(44,(84,(10,30)))))),((9,13),(63,((14,37),((58,(42,(38,(35,86)))),(67,(36,82))))))),(5,((6,(73,(11,((51,(4,60)),(53,54))))),(32,66)))),((75,((18,19),(33,34))),(29,(22,(23,24)))))),(17,(57,(43,74))))))),(76,(21,(25,(52,62))))),(68,((16,(50,71)),(77,(61,(31,78)))))),(88,(87,((40,41),(81,(79,80))))))));
	TREE * extraState = [&R] (1,(2,(((68,((((17,(12,((((((3,59),(27,28)),((((7,8),(65,(55,(15,(48,(26,85)))))),((20,56),(69,70))),(49,(64,72)))),(39,(45,(44,(84,(10,30)))))),((5,((6,(73,(11,((51,(4,60)),(53,54))))),(32,66))),((9,13),(63,((14,37),((67,(58,(42,(38,(35,86))))),(36,82))))))),((75,((18,19),(33,34))),(29,(22,(23,24))))))),(47,83)),(57,(43,74))),(46,(76,(21,(25,(52,62))))))),(77,((16,(50,71)),(61,(31,78))))),(88,(87,((40,41),(81,(79,80))))))));
	TREE * extraState = [&R] (1,(2,(((68,(((((((((3,59),(27,28)),((((7,8),(65,(55,(15,(48,(26,85)))))),((20,56),(69,70))),(49,(64,72)))),(39,(45,(44,(84,(10,30)))))),(((5,((6,(73,(11,((51,(4,60)),(53,54))))),(32,66))),(63,((14,37),((58,(42,(38,(35,86)))),(67,(36,82)))))),(9,13))),((75,((18,19),(33,34))),(29,(22,(23,24))))),(57,(43,74))),((12,17),(47,83))),(46,(76,(21,(25,(52,62))))))),(77,((16,(50,71)),(61,(31,78))))),(88,(87,((40,41),(81,(79,80))))))));
	TREE * extraState = [&R] (1,(2,((((46,(83,(47,(12,(17,(((((((3,59),(27,28)),(((7,(8,(65,(55,(15,(48,(26,85))))))),((20,56),(69,70))),(49,(64,72)))),(39,(45,(44,(84,(10,30)))))),((((5,((6,(73,(11,((51,(4,60)),(53,54))))),(32,66))),(63,((14,37),((58,(42,(38,(35,86)))),(67,(36,82)))))),(9,13)),((75,((18,19),(33,34))),(29,(22,(23,24)))))),((40,41),(80,(79,81)))),(57,(43,74)))))))),(76,(21,(25,(52,62))))),(68,((16,(50,71)),(77,(61,(31,78)))))),(87,88))));
	TREE * extraState = [&R] (1,(2,((((46,(83,(47,(17,(12,(((((((3,59),(27,28)),((69,((70,(7,(8,(65,(55,(15,(48,(26,85)))))))),(49,(64,72)))),(20,56))),(39,(45,(44,(84,(10,30)))))),(((5,((6,(73,(11,((51,(4,60)),(53,54))))),(32,66))),(63,((14,37),((67,(58,(42,(38,(35,86))))),(36,82))))),(9,13))),((75,((18,19),(33,34))),(29,(22,(23,24))))),(57,(43,74)))))))),(76,(21,(25,(52,62))))),(68,((16,(50,71)),(77,(61,(31,78)))))),(88,(87,((40,41),(81,(79,80))))))));
	TREE * extraState = [&R] (1,(2,(((68,((83,(47,(17,((12,(((((((3,59),(27,28)),(((7,(8,(65,(55,(15,(48,(26,85))))))),((20,56),(69,70))),(49,(64,72)))),(39,(45,(44,(84,(10,30)))))),(5,(6,((73,(11,((51,(4,60)),(53,54)))),(32,66))))),((9,13),(63,((14,37),((58,(42,(38,(35,86)))),(67,(36,82))))))),((75,((18,19),(33,34))),(29,(22,(23,24)))))),(57,(43,74)))))),(46,(76,(21,(25,(52,62))))))),(77,((16,(50,71)),(61,(31,78))))),(88,(87,((40,41),(81,(79,80))))))));
	TREE * extraState = [&R] (1,(2,((((46,(83,(47,(12,(17,(((((((3,59),(27,28)),((((7,8),(65,(55,(15,(48,(26,85)))))),((20,56),(69,70))),(49,(64,72)))),(39,(45,(44,(84,(10,30)))))),((5,((6,(73,(11,((51,(4,60)),(53,54))))),(32,66))),((9,13),(63,((14,37),((67,(58,(42,(38,(35,86))))),(36,82))))))),((75,((18,19),(33,34))),(29,(22,(23,24))))),(57,(43,74)))))))),(76,(21,(25,(52,62))))),(68,((16,(50,71)),(77,(61,(31,78)))))),(88,(87,((40,41),(81,(79,80))))))));
	TREE * extraState = [&R] (1,(2,((((46,(83,(47,((12,(((((((3,59),(27,28)),((69,((70,(7,(8,(65,(55,(15,(48,(26,85)))))))),(49,(64,72)))),(20,56))),(39,(45,(44,(84,(10,30)))))),(((60,(4,51)),(53,54)),(5,((6,(11,73)),(32,66))))),((9,13),(63,((14,37),((67,(58,(42,(38,(35,86))))),(36,82)))))),((75,((18,19),(33,34))),(29,(22,(23,24)))))),(17,(57,(43,74))))))),(76,(21,(25,(52,62))))),(68,((16,(50,71)),(77,(61,(31,78)))))),(88,(87,((40,41),(81,(79,80))))))));
	TREE * extraState = [&R] (1,(2,(((68,((83,(47,(12,(17,(((((((3,59),(27,28)),(((7,(8,(65,(55,(15,(48,(26,85))))))),((20,56),(69,70))),(49,(64,72)))),(39,(45,(44,(84,(10,30)))))),((5,((6,(73,(11,((51,(4,60)),(53,54))))),(32,66))),((9,13),(63,((14,37),((67,(58,(42,(38,(35,86))))),(36,82))))))),((75,((18,19),(33,34))),(29,(22,(23,24))))),(57,(43,74))))))),(46,(76,(21,(25,(52,62))))))),(77,((16,(50,71)),(61,(31,78))))),(88,(87,((40,41),(81,(79,80))))))));
	TREE * extraState = [&R] (1,(2,(((68,((((17,(12,((((((3,59),(27,28)),(((7,(8,(65,(55,(15,(48,(26,85))))))),((20,56),(69,70))),(49,(64,72)))),(39,(45,(44,(84,(10,30)))))),(((5,((6,(73,(11,((51,(4,60)),(53,54))))),(32,66))),(63,((14,37),((67,(58,(42,(38,(35,86))))),(36,82))))),(9,13))),((75,((18,19),(33,34))),(29,(22,(23,24))))))),(47,83)),(57,(43,74))),(46,(76,(21,(25,(52,62))))))),(77,((16,(50,71)),(61,(31,78))))),(88,(87,((40,41),(81,(79,80))))))));
	TREE * extraState = [&R] (1,(2,((((46,(83,(47,(12,(17,((((((((3,59),(27,28)),((69,((70,(7,(8,(65,(55,(15,(48,(26,85)))))))),(49,(64,72)))),(20,56))),(39,(45,(44,(84,(10,30)))))),((((60,(4,51)),(53,54)),(5,((6,(11,73)),(32,66)))),((9,13),(63,((14,37),((58,(42,(38,(35,86)))),(67,(36,82)))))))),((75,((18,19),(33,34))),(29,(22,(23,24))))),((40,41),(80,(79,81)))),(57,(43,74)))))))),(76,(21,(25,(52,62))))),(68,((16,(50,71)),(77,(61,(31,78)))))),(87,88))));
	TREE * extraState = [&R] (1,(2,((((46,(83,(47,(12,(17,(((((((3,59),(27,28)),((((7,8),(65,(55,(15,(48,(26,85)))))),((20,56),(69,70))),(49,(64,72)))),(39,(45,(44,(84,(10,30)))))),(((5,((6,(73,(11,((51,(4,60)),(53,54))))),(32,66))),(63,((14,37),((58,(42,(38,(35,86)))),(67,(36,82)))))),(9,13))),((75,((18,19),(33,34))),(29,(22,(23,24))))),(57,(43,74)))))))),(76,(21,(25,(52,62))))),(68,((16,(50,71)),(77,(61,(31,78)))))),(88,(87,((40,41),(81,(79,80))))))));
	TREE * extraState = [&R] (1,(2,((((46,(83,(47,((12,((((((3,59),(27,28)),((((7,8),(65,(55,(15,(48,(26,85)))))),((20,56),(69,70))),(49,(64,72)))),(39,(45,(44,(84,(10,30)))))),(((5,((6,(73,(11,((51,(4,60)),(53,54))))),(32,66))),(63,((14,37),((58,(42,(38,(35,86)))),(67,(36,82)))))),(9,13))),((75,((18,19),(33,34))),(29,(22,(23,24)))))),(17,(57,(43,74))))))),(76,(21,(25,(52,62))))),(68,((16,(50,71)),(77,(61,(31,78)))))),(88,(87,((40,41),(81,(79,80))))))));
	TREE * extraState = [&R] (1,(2,((((46,(83,(47,(12,(17,((((((((3,59),(27,28)),((69,((70,(7,(8,(65,(55,(15,(48,(26,85)))))))),(49,(64,72)))),(20,56))),(39,(45,(44,(84,(10,30)))))),((((51,(4,60)),(53,54)),(5,((6,(11,73)),(32,66)))),((9,13),(63,((14,37),((67,(58,(42,(38,(35,86))))),(36,82))))))),((75,((18,19),(33,34))),(29,(22,(23,24))))),((40,41),(80,(79,81)))),(57,(43,74)))))))),(76,(21,(25,(52,62))))),(68,((16,(50,71)),(77,(61,(31,78)))))),(87,88))));
	TREE * extraState = [&R] (1,(2,((((46,(83,(47,((12,(((((((3,59),(27,28)),((((7,8),(65,(55,(15,(48,(26,85)))))),((20,56),(69,70))),(49,(64,72)))),(39,(45,(44,(84,(10,30)))))),(5,((73,(11,((51,(4,60)),(53,54)))),(6,(32,66))))),((9,13),(63,((14,37),((67,(58,(42,(38,(35,86))))),(36,82)))))),((75,((18,19),(33,34))),(29,(22,(23,24)))))),(17,(57,(43,74))))))),(76,(21,(25,(52,62))))),(68,((16,(50,71)),(77,(61,(31,78)))))),(88,(87,((40,41),(81,(79,80))))))));
	TREE * extraState = [&R] (1,(2,(((68,((83,(47,(17,((12,(((((((3,59),(27,28)),((((7,8),(65,(55,(15,(48,(26,85)))))),((20,56),(69,70))),(49,(64,72)))),(39,(45,(44,(84,(10,30)))))),(5,(6,((73,(11,((51,(4,60)),(53,54)))),(32,66))))),((9,13),(63,((14,37),((58,(42,(38,(35,86)))),(67,(36,82))))))),((75,((18,19),(33,34))),(29,(22,(23,24)))))),(57,(43,74)))))),(46,(76,(21,(25,(52,62))))))),(77,((16,(50,71)),(61,(31,78))))),(88,(87,((40,41),(81,(79,80))))))));
	TREE * extraState = [&R] (1,(2,((((46,(83,(47,(12,(17,((((((((3,59),(27,28)),((((7,8),(65,(55,(15,(48,(26,85)))))),((20,56),(69,70))),(49,(64,72)))),(39,(45,(44,(84,(10,30)))))),((((51,(4,60)),(53,54)),(5,((6,(11,73)),(32,66)))),((9,13),(63,((14,37),((58,(42,(38,(35,86)))),(67,(36,82)))))))),((75,((18,19),(33,34))),(29,(22,(23,24))))),((40,41),(80,(79,81)))),(57,(43,74)))))))),(76,(21,(25,(52,62))))),(68,((16,(50,71)),(77,(61,(31,78)))))),(87,88))));
	TREE * inapplicable = [&R] (1,((2,(88,((68,((77,(61,(31,78))),((71,50),(16,(83,(47,((17,(57,(43,74))),(12,(((29,(22,(24,23))),(75,((18,19),(33,34)))),(((9,13),(63,((14,37),((67,(58,(42,(38,(35,86))))),(36,82))))),((5,(6,((73,(11,((53,54),(51,(60,4))))),(66,32)))),((((((70,69),(20,56)),(7,(8,(65,(55,(15,(48,(26,85)))))))),(49,(72,64))),((59,3),(27,28))),(39,(45,(44,(84,(10,30))))))))))))))))),(76,(21,(46,(25,(52,62)))))))),(87,((40,41),(81,(79,80))))));
	TREE * inapplicable = [&R] (1,((87,((81,(80,79)),(40,41))),(2,(88,((68,(21,(76,(46,(25,(62,52)))))),((77,(61,(31,78))),((16,(47,(83,((17,(57,(43,74))),(12,(((75,((19,18),(34,33))),(29,(22,(24,23)))),(((13,9),(63,(((67,(58,(42,(38,(35,86))))),(36,82)),(37,14)))),((5,(6,((66,32),(73,(11,((54,53),(51,(4,60)))))))),((((((56,20),(70,69)),(7,(8,(65,(55,(15,(48,(26,85)))))))),(49,(64,72))),((27,28),(59,3))),(39,(45,(44,(84,(10,30)))))))))))))),(71,50))))))));
	TREE * inapplicable = [&R] (1,((2,(88,((68,(16,((71,50),(77,(61,(31,78)))))),(76,(21,(46,((83,(47,((17,(57,(74,43))),(12,((((63,((37,14),((67,(82,36)),(58,(42,(38,(35,86))))))),(13,9)),((5,(6,((73,(11,((54,53),(51,(60,4))))),(32,66)))),((((((69,70),(56,20)),((8,7),(65,(55,(15,(48,(85,26))))))),(49,(64,72))),((3,59),(27,28))),(39,(45,(44,(84,(30,10)))))))),((29,(22,(24,23))),(75,((19,18),(34,33))))))))),(25,(62,52))))))))),(87,((41,40),(81,(80,79))))));
	TREE * inapplicable = [&R] (1,((2,(88,((68,(21,(76,(46,(25,(62,52)))))),((77,(61,(31,78))),((16,(47,(83,((12,((((63,((37,14),((67,(82,36)),(58,(42,(38,(35,86))))))),(13,9)),((5,(6,((32,66),(73,(11,((51,(4,60)),(54,53))))))),((((((56,20),(69,70)),(7,(8,(65,(55,(15,(48,(85,26)))))))),(49,(64,72))),((3,59),(27,28))),(39,(45,(44,(84,(30,10)))))))),((29,(22,(24,23))),(75,((19,18),(34,33)))))),(17,(57,(43,74))))))),(71,50)))))),(87,((41,40),(81,(79,80))))));
	TREE * inapplicable = [&R] (1,((2,(88,(((68,((83,(47,(17,(12,(((((((((20,56),(69,70)),(7,(8,(65,(55,(15,(48,(26,85)))))))),(49,(72,64))),((59,3),(28,27))),(39,(45,(44,(84,(10,30)))))),(5,(6,((73,(11,((51,(4,60)),(54,53)))),(66,32))))),((63,((37,14),((67,(58,(42,(38,(35,86))))),(36,82)))),(9,13))),((29,(22,(23,24))),(75,((18,19),(33,34))))))))),(57,(43,74)))),(46,(76,(21,(25,(52,62)))))),((77,(61,(31,78))),(16,(71,50)))))),(87,((40,41),(81,(79,80))))));
	TREE * inapplicable = [&R] (1,((87,((40,41),(81,(79,80)))),(2,((88,((68,(46,(76,(21,(25,(62,52)))))),((12,((17,(57,(43,74))),(83,47))),((((9,13),(63,(((67,(58,(42,(38,(86,35))))),(82,36)),(37,14)))),(((39,(45,(44,(84,(30,10))))),(((56,20),(69,((70,(7,(8,(65,(55,(15,(48,(85,26)))))))),(49,(64,72))))),((3,59),(28,27)))),(5,(6,((73,(11,((54,53),(51,(4,60))))),(32,66)))))),((29,(22,(23,24))),(75,((18,19),(33,34)))))))),((77,(16,(71,50))),(61,(31,78)))))));
	TREE * inapplicable = [&R] (1,((2,(88,((68,(16,((50,71),(77,(61,(31,78)))))),(76,(21,(46,((83,(47,((17,(57,(43,74))),(12,(((75,((19,18),(34,33))),(29,(22,(24,23)))),(((63,(((67,(36,82)),(58,(42,(38,(86,35))))),(37,14))),(13,9)),((((((7,(8,(65,(55,(15,(48,(26,85))))))),((70,69),(56,20))),(49,(72,64))),((28,27),(59,3))),(39,(45,(44,(84,(10,30)))))),(5,(6,((73,(11,((51,(4,60)),(53,54)))),(32,66))))))))))),(25,(62,52))))))))),(87,((81,(80,79)),(41,40)))));
	TREE * inapplicable = [&R] (1,((2,(88,(((46,(76,(21,(25,(52,62))))),(68,((83,(47,(17,(12,(((((((((20,56),(69,70)),(7,(8,(65,(55,(15,(48,(26,85)))))))),(49,(72,64))),((59,3),(28,27))),(39,(45,(44,(84,(10,30)))))),(5,(6,((73,(11,((51,(4,60)),(54,53)))),(66,32))))),((63,((37,14),((67,(36,82)),(58,(42,(38,(35,86))))))),(9,13))),((29,(22,(23,24))),(75,((18,19),(33,34))))))))),(57,(43,74))))),((77,(61,(31,78))),(16,(71,50)))))),(87,((40,41),(81,(79,80))))));
	TREE * inapplicable = [&R] (1,((88,((2,((12,((((63,((14,37),((67,(58,(42,(38,(35,86))))),(82,36)))),(13,9)),(((39,(45,(44,(84,(30,10))))),(((59,3),(27,28)),((49,(64,72)),(((56,20),(69,70)),(7,(8,(65,(55,(15,(48,(85,26))))))))))),(5,(6,((32,66),(73,(11,((51,(60,4)),(54,53))))))))),((29,(22,(24,23))),(75,((34,33),(19,18)))))),((17,(47,83)),(57,(43,74))))),((68,((77,(61,(78,31))),(16,(50,71)))),(46,(76,(21,(25,(52,62)))))))),(87,((41,40),(81,(79,80))))));
	TREE * inapplicable = [&R] (1,((2,(88,((68,(((((((((69,((49,(64,72)),(70,(7,(8,(65,(55,(15,(48,(85,26)))))))))),(20,56)),((59,3),(28,27))),(39,(45,(44,(84,(30,10)))))),(5,(6,((66,32),(73,(11,((54,53),(51,(4,60))))))))),((13,9),(63,((37,14),((67,(36,82)),(58,(42,(38,(86,35))))))))),((75,((34,33),(19,18))),(29,(22,(23,24))))),(12,((17,(57,(74,43))),(83,47)))),(46,(76,(21,(25,(62,52))))))),((77,(16,(50,71))),(61,(78,31)))))),(87,((41,40),(81,(80,79))))));
	TREE * inapplicable = [&R] (1,((2,(88,((68,(21,(76,(46,(25,(62,52)))))),((77,(61,(78,31))),((16,(47,(83,((17,(57,(43,74))),(12,(((29,(22,(23,24))),(75,((19,18),(34,33)))),(((13,9),(63,(((67,(58,(42,(38,(86,35))))),(82,36)),(37,14)))),((5,(6,((73,(11,((54,53),(51,(4,60))))),(32,66)))),((((49,(64,72)),(((7,8),(65,(55,(15,(48,(85,26)))))),((69,70),(56,20)))),((59,3),(28,27))),(39,(45,(44,(84,(30,10)))))))))))))),(50,71)))))),(87,((41,40),(81,(80,79))))));
	TREE * inapplicable = [&R] (1,((87,((41,40),(81,(80,79)))),(2,(88,((76,(21,(46,(25,(62,52))))),(68,(((16,(47,(83,((17,(57,(43,74))),(12,(((29,(22,(24,23))),(75,((18,19),(33,34)))),(((63,((37,14),((67,(82,36)),(58,(42,(38,(35,86))))))),(9,13)),((5,(6,((66,32),(73,(11,((53,54),(51,(60,4)))))))),((39,(45,(44,(84,(10,30))))),(((69,((49,(64,72)),(70,(7,(8,(65,(55,(15,(48,(85,26)))))))))),(56,20)),((59,3),(28,27)))))))))))),(50,71)),(77,(61,(78,31))))))))));
	TREE * inapplicable = [&R] (1,((2,(88,((68,(((50,71),(16,(83,(47,((17,(57,(74,43))),(12,(((29,(22,(24,23))),(75,((34,33),(19,18)))),(((63,(((67,(58,(42,(38,(86,35))))),(36,82)),(37,14))),(13,9)),((5,(6,((66,32),(73,(11,((54,53),(51,(4,60)))))))),((((((69,70),(56,20)),((7,8),(65,(55,(15,(48,(85,26))))))),(49,(72,64))),((59,3),(28,27))),(39,(45,(44,(84,(10,30))))))))))))))),(77,(61,(31,78))))),(76,(46,(21,(25,(62,52)))))))),(87,((81,(79,80)),(41,40)))));
	TREE * inapplicable = [&R] (1,((2,(88,((68,((46,(83,(47,((17,(57,(74,43))),(12,((((9,13),(63,((14,37),((67,(58,(42,(38,(35,86))))),(82,36))))),(((39,(45,(44,(84,(10,30))))),(((((20,56),(70,69)),(7,(8,(65,(55,(15,(48,(85,26)))))))),(49,(64,72))),((59,3),(27,28)))),(5,(6,((73,(11,((51,(60,4)),(53,54)))),(32,66)))))),((75,((18,19),(33,34))),(29,(22,(23,24)))))))))),(76,(21,(25,(52,62)))))),((77,(61,(31,78))),(16,(71,50)))))),(87,((81,(80,79)),(40,41)))));
	TREE * inapplicable = [&R] (1,(2,((88,(87,((41,40),(81,(80,79))))),((77,((61,(78,31)),(16,(50,71)))),(68,((83,(47,((17,(57,(74,43))),(12,(((75,((19,18),(34,33))),(29,(22,(23,24)))),(((13,9),(63,(((67,(82,36)),(58,(42,(38,(86,35))))),(37,14)))),((5,(6,((32,66),(73,(11,((54,53),(51,(4,60)))))))),((((((69,70),(56,20)),(7,(8,(65,(55,(15,(48,(85,26)))))))),(49,(64,72))),((59,3),(28,27))),(39,(45,(44,(84,(30,10))))))))))))),(46,(76,(21,(25,(62,52)))))))))));
	TREE * inapplicable = [&R] (1,((88,((2,((12,((17,(57,(43,74))),(47,83))),(((29,(22,(24,23))),(75,((19,18),(34,33)))),(((63,((37,14),((67,(58,(42,(38,(35,86))))),(36,82)))),(13,9)),(((39,(45,(44,(84,(10,30))))),((((7,(8,(65,(55,(15,(48,(26,85))))))),((56,20),(70,69))),(49,(64,72))),((28,27),(3,59)))),(5,(6,((73,(11,((51,(60,4)),(53,54)))),(32,66))))))))),((68,((16,(71,50)),(77,(61,(31,78))))),(46,(76,(21,(25,(52,62)))))))),(87,((81,(79,80)),(40,41)))));
	TREE * inapplicable = [&R] (1,((88,(((68,((16,(71,50)),(77,(61,(78,31))))),(46,(76,(21,(25,(62,52)))))),(2,((12,(((75,((19,18),(34,33))),(29,(22,(24,23)))),(((63,(((67,(82,36)),(58,(42,(38,(86,35))))),(14,37))),(13,9)),(((39,(45,(44,(84,(10,30))))),(((((70,69),(56,20)),((7,8),(65,(55,(15,(48,(26,85))))))),(49,(72,64))),((59,3),(28,27)))),(5,(6,((73,(11,((53,54),(51,(4,60))))),(32,66)))))))),(57,((17,(47,83)),(43,74))))))),(87,((81,(79,80)),(41,40)))));
	TREE * inapplicable = [&R] (1,((87,((41,40),(81,(79,80)))),(2,(88,((68,((((47,83),(17,(12,(((75,((34,33),(19,18))),(29,(22,(24,23)))),(((5,(6,((73,(11,((51,(60,4)),(54,53)))),(32,66)))),((39,(45,(44,(84,(30,10))))),(((((69,70),(56,20)),((7,8),(65,(55,(15,(48,(85,26))))))),(49,(64,72))),((3,59),(27,28))))),((63,((14,37),((67,(82,36)),(58,(42,(38,(35,86))))))),(13,9))))))),(57,(74,43))),(46,(76,(21,(25,(52,62))))))),((77,(61,(78,31))),(16,(50,71))))))));
	TREE * inapplicable = [&R] (1,((2,(88,(((77,(61,(78,31))),((50,71),(16,(83,(47,((17,(57,(74,43))),(12,(((29,(22,(23,24))),(75,((33,34),(18,19)))),((((((((70,69),(56,20)),(7,(8,(65,(55,(15,(48,(26,85)))))))),(49,(72,64))),((3,59),(28,27))),(39,(45,(44,(84,(10,30)))))),(5,(6,((32,66),(73,(11,((54,53),(51,(60,4))))))))),((63,(((67,(36,82)),(58,(42,(38,(35,86))))),(37,14))),(9,13))))))))))),(68,(21,(76,(46,(25,(52,62))))))))),(87,((40,41),(81,(80,79))))));
	TREE * inapplicable = [&R] (1,((2,(88,((68,(((12,((83,47),(17,(57,(74,43))))),(((75,((19,18),(34,33))),(29,(22,(23,24)))),(((13,9),(63,(((67,(58,(42,(38,(86,35))))),(82,36)),(37,14)))),((5,(6,((32,66),(73,(11,((54,53),(51,(4,60)))))))),((((((69,70),(56,20)),(7,(8,(65,(55,(15,(48,(85,26)))))))),(49,(64,72))),((59,3),(28,27))),(39,(45,(44,(84,(30,10)))))))))),(46,(76,(21,(25,(62,52))))))),((77,(61,(78,31))),(16,(50,71)))))),(87,((41,40),(81,(80,79))))));
	TREE * inapplicable = [&R] (1,(2,((88,(87,((40,41),(81,(80,79))))),(((46,(83,(47,((17,(57,(74,43))),(12,(((((39,(45,(44,(84,(30,10))))),(((69,((70,(7,(8,(65,(55,(15,(48,(26,85)))))))),(49,(72,64)))),(20,56)),((59,3),(27,28)))),(5,(6,((73,(11,((53,54),(51,(4,60))))),(32,66))))),((63,(((67,(58,(42,(38,(35,86))))),(36,82)),(37,14))),(13,9))),((29,(22,(23,24))),(75,((19,18),(34,33)))))))))),(76,(21,(25,(52,62))))),(68,((16,(50,71)),(77,(61,(78,31)))))))));
	TREE * inapplicable = [&R] (1,(2,((88,(87,((41,40),(81,(80,79))))),((68,((77,(61,(31,78))),(16,(71,50)))),((46,(83,(47,((17,(57,(43,74))),(12,((((63,(((67,(58,(42,(38,(86,35))))),(36,82)),(14,37))),(13,9)),(((((((20,56),(69,70)),(7,(8,(65,(55,(15,(48,(85,26)))))))),(49,(64,72))),((59,3),(27,28))),(39,(45,(44,(84,(30,10)))))),(5,(6,((73,(11,((53,54),(51,(60,4))))),(66,32)))))),((29,(22,(24,23))),(75,((34,33),(19,18)))))))))),(76,(21,(25,(62,52)))))))));
	TREE * inapplicable = [&R] (1,((2,(88,((68,((16,(50,71)),(77,(61,(78,31))))),(((21,(25,(52,62))),(76,46)),(83,(47,((17,(57,(74,43))),(12,(((((((69,((70,(7,(8,(65,(55,(15,(48,(85,26)))))))),(49,(72,64)))),(20,56)),((59,3),(27,28))),(39,(45,(44,(84,(10,30)))))),(5,(6,((73,(11,((51,(4,60)),(54,53)))),(66,32))))),((63,(((67,(58,(42,(38,(86,35))))),(36,82)),(37,14))),(13,9))),((29,(22,(24,23))),(75,((19,18),(34,33))))))))))))),(87,((41,40),(81,(80,79))))));
	TREE * inapplicable = [&R] (1,((87,((41,40),(81,(79,80)))),(88,((2,((12,((17,(57,(74,43))),(47,83))),((((63,((14,37),((67,(36,82)),(58,(42,(38,(35,86))))))),(13,9)),((5,(6,((32,66),(73,(11,((51,(60,4)),(53,54))))))),((39,(45,(44,(84,(30,10))))),(((((69,70),(20,56)),(7,(8,(65,(55,(15,(48,(85,26)))))))),(49,(64,72))),((3,59),(27,28)))))),((75,((19,18),(34,33))),(29,(22,(24,23))))))),((68,((77,(61,(78,31))),(16,(50,71)))),(46,(76,(21,(25,(62,52))))))))));
	TREE * inapplicable = [&R] (1,((87,((41,40),(81,(79,80)))),(2,(88,(((77,(61,(78,31))),(16,(50,71))),(68,((46,(76,(21,(25,(52,62))))),((12,((17,(57,(43,74))),(83,47))),(((((((49,(72,64)),(((20,56),(70,69)),((7,8),(65,(55,(15,(48,(26,85)))))))),((3,59),(27,28))),(39,(45,(44,(84,(10,30)))))),(5,(6,((73,(11,((51,(4,60)),(54,53)))),(66,32))))),((63,(((67,(58,(42,(38,(35,86))))),(36,82)),(37,14))),(13,9))),((29,(22,(24,23))),(75,((34,33),(19,18)))))))))))));
	TREE * inapplicable = [&R] (1,((87,((41,40),(81,(80,79)))),(2,(88,((68,(((71,50),(16,(83,(47,((12,(((29,(22,(23,24))),(75,((18,19),(33,34)))),(((63,(((67,(58,(42,(38,(35,86))))),(36,82)),(37,14))),(9,13)),(((39,(45,(44,(84,(10,30))))),(((((70,69),(56,20)),((8,7),(65,(55,(15,(48,(26,85))))))),(49,(64,72))),((3,59),(28,27)))),(5,(6,((66,32),(73,(11,((53,54),(51,(4,60)))))))))))),(17,(57,(74,43)))))))),(77,(61,(78,31))))),(76,(21,(46,(25,(62,52))))))))));
	TREE * inapplicable = [&R] (1,(2,(((77,((16,(71,50)),(61,(78,31)))),(68,((((47,83),(17,(12,(((75,((19,18),(34,33))),(29,(22,(24,23)))),(((63,((37,14),((67,(58,(42,(38,(86,35))))),(82,36)))),(13,9)),((5,(6,((32,66),(73,(11,((54,53),(51,(4,60)))))))),((((((69,70),(20,56)),((7,8),(65,(55,(15,(48,(26,85))))))),(49,(72,64))),((3,59),(28,27))),(39,(45,(44,(84,(30,10)))))))))))),(57,(74,43))),(46,(76,(21,(25,(62,52)))))))),(88,(87,((81,(80,79)),(41,40)))))));
	TREE * inapplicable = [&R] (1,((87,((41,40),(81,(80,79)))),(88,((2,((12,((((5,(6,((73,(11,((51,(60,4)),(53,54)))),(32,66)))),((39,(45,(44,(84,(30,10))))),(((((8,7),(65,(55,(15,(48,(85,26)))))),((69,70),(56,20))),(49,(64,72))),((3,59),(27,28))))),((63,(((67,(36,82)),(58,(42,(38,(35,86))))),(37,14))),(13,9))),((75,((19,18),(34,33))),(29,(22,(24,23)))))),((57,(74,43)),(17,(83,47))))),((68,((77,(61,(78,31))),(16,(71,50)))),(46,(76,(21,(25,(62,52))))))))));
	TREE * inapplicable = [&R] (1,((87,((81,(79,80)),(40,41))),(2,(88,(((83,(47,((17,(57,(74,43))),(12,(((75,((18,19),(33,34))),(29,(22,(23,24)))),((((((69,((49,(64,72)),(70,(7,(8,(65,(55,(15,(48,(85,26)))))))))),(56,20)),((59,3),(27,28))),(39,(45,(44,(84,(10,30)))))),(5,(6,((73,(11,((53,54),(51,(60,4))))),(32,66))))),((63,((14,37),((67,(36,82)),(58,(42,(38,(35,86))))))),(9,13)))))))),((76,46),(21,(25,(52,62))))),(68,((77,(61,(31,78))),(16,(50,71)))))))));
	TREE * inapplicable = [&R] (1,(2,(((77,((16,(71,50)),(61,(78,31)))),(68,((46,(76,(21,(25,(62,52))))),(83,(47,((12,(((29,(22,(24,23))),(75,((33,34),(18,19)))),((((((49,(64,72)),(((70,69),(56,20)),((7,8),(65,(55,(15,(48,(85,26)))))))),((3,59),(28,27))),(39,(45,(44,(84,(10,30)))))),(5,(6,((66,32),(73,(11,((54,53),(51,(60,4))))))))),((63,((14,37),((67,(82,36)),(58,(42,(38,(35,86))))))),(9,13))))),(17,(57,(74,43))))))))),(88,(87,((41,40),(81,(79,80))))))));
	TREE * inapplicable = [&R] (1,((2,(88,((68,((46,(76,(21,(25,(52,62))))),(83,(47,((17,(57,(74,43))),(12,(((29,(22,(24,23))),(75,((34,33),(19,18)))),((((39,(45,(44,(84,(10,30))))),(((69,((49,(64,72)),(70,(7,(8,(65,(55,(15,(48,(85,26)))))))))),(20,56)),((3,59),(27,28)))),(5,(6,((66,32),(73,(11,((53,54),(51,(60,4))))))))),((63,((37,14),((67,(36,82)),(58,(42,(38,(86,35))))))),(13,9)))))))))),(77,((61,(78,31)),(16,(50,71))))))),(87,((41,40),(81,(80,79))))));
	TREE * inapplicable = [&R] (1,((87,((40,41),(81,(79,80)))),(88,(((68,((16,(71,50)),(77,(61,(31,78))))),(46,(76,(21,(25,(62,52)))))),(2,((12,(((29,(22,(23,24))),(75,((18,19),(33,34)))),((((39,(45,(44,(84,(30,10))))),(((69,((49,(64,72)),(70,(7,(8,(65,(55,(15,(48,(85,26)))))))))),(56,20)),((59,3),(28,27)))),(5,(6,((73,(11,((54,53),(51,(60,4))))),(32,66))))),((63,((37,14),((67,(58,(42,(38,(86,35))))),(82,36)))),(9,13))))),((17,(47,83)),(57,(43,74)))))))));
	TREE * inapplicable = [&R] (1,((2,(88,((68,((46,(83,(47,((17,(57,(43,74))),(12,(((75,((33,34),(18,19))),(29,(22,(23,24)))),((((39,(45,(44,(84,(30,10))))),(((49,(64,72)),(((70,69),(56,20)),((7,8),(65,(55,(15,(48,(85,26)))))))),((3,59),(27,28)))),(5,(6,((66,32),(73,(11,((54,53),(51,(4,60))))))))),((63,(((67,(36,82)),(58,(42,(38,(86,35))))),(14,37))),(9,13))))))))),(76,(21,(25,(52,62)))))),((77,(61,(31,78))),(16,(50,71)))))),(87,((81,(79,80)),(40,41)))));
	TREE * inapplicable = [&R] (1,((87,((40,41),(81,(79,80)))),(88,((2,((12,((((5,(6,((73,(11,((51,(4,60)),(54,53)))),(66,32)))),((39,(45,(44,(84,(10,30))))),((((7,(8,(65,(55,(15,(48,(26,85))))))),((70,69),(20,56))),(49,(72,64))),((59,3),(28,27))))),((63,(((67,(82,36)),(58,(42,(38,(86,35))))),(14,37))),(9,13))),((75,((18,19),(33,34))),(29,(22,(23,24)))))),((57,(43,74)),(17,(47,83))))),((68,((77,(61,(31,78))),(16,(50,71)))),(46,(76,(21,(25,(52,62))))))))));
	TREE * inapplicable = [&R] (1,((87,((41,40),(81,(79,80)))),(2,(88,((68,(21,(76,(46,((25,(62,52)),(83,(47,((17,(57,(43,74))),(12,(((((((((69,70),(20,56)),(7,(8,(65,(55,(15,(48,(85,26)))))))),(49,(64,72))),((59,3),(27,28))),(39,(45,(44,(84,(30,10)))))),(5,(6,((66,32),(73,(11,((51,(60,4)),(53,54)))))))),((63,((37,14),((67,(58,(42,(38,(86,35))))),(82,36)))),(13,9))),((75,((19,18),(34,33))),(29,(22,(24,23)))))))))))))),((77,(61,(31,78))),(16,(50,71))))))));
	TREE * inapplicable = [&R] (1,((2,(88,((68,((((83,47),(17,(12,((((13,9),(63,((37,14),((67,(58,(42,(38,(86,35))))),(36,82))))),(((39,(45,(44,(84,(30,10))))),(((49,(72,64)),(((20,56),(69,70)),(7,(8,(65,(55,(15,(48,(26,85))))))))),((3,59),(28,27)))),(5,(6,((73,(11,((51,(4,60)),(54,53)))),(66,32)))))),((75,((19,18),(34,33))),(29,(22,(24,23)))))))),(57,(74,43))),(46,(76,(21,(25,(62,52))))))),(77,((61,(78,31)),(16,(50,71))))))),(87,((81,(79,80)),(41,40)))));
	TREE * inapplicable = [&R] (1,((2,(88,((68,((46,(76,(21,(25,(52,62))))),(83,(47,((12,(((((((69,((70,(7,(8,(65,(55,(15,(48,(85,26)))))))),(49,(72,64)))),(20,56)),((3,59),(27,28))),(39,(45,(44,(84,(10,30)))))),(5,(6,((73,(11,((51,(4,60)),(54,53)))),(66,32))))),((63,(((67,(58,(42,(38,(86,35))))),(36,82)),(37,14))),(13,9))),((29,(22,(24,23))),(75,((34,33),(19,18)))))),(17,(57,(43,74)))))))),((77,(61,(78,31))),(16,(50,71)))))),(87,((41,40),(81,(80,79))))));
	TREE * inapplicable = [&R] (1,((2,(88,((68,((46,(76,(21,(25,(52,62))))),(83,(47,((17,(57,(43,74))),(12,((((5,(6,((73,(11,((53,54),(51,(60,4))))),(66,32)))),((((((70,69),(20,56)),(7,(8,(65,(55,(15,(48,(26,85)))))))),(49,(72,64))),((3,59),(27,28))),(39,(45,(44,(84,(30,10))))))),((63,((37,14),((67,(58,(42,(38,(35,86))))),(82,36)))),(13,9))),((29,(22,(23,24))),(75,((34,33),(19,18))))))))))),((77,(61,(78,31))),(16,(50,71)))))),(87,((40,41),(81,(79,80))))));
	TREE * inapplicable = [&R] (1,(2,((88,(87,((41,40),(81,(79,80))))),((68,((46,(76,(21,(25,(62,52))))),((12,((17,(57,(43,74))),(47,83))),((((63,((37,14),((67,(82,36)),(58,(42,(38,(35,86))))))),(13,9)),((5,(6,((73,(11,((54,53),(51,(60,4))))),(66,32)))),((((((69,70),(56,20)),((7,8),(65,(55,(15,(48,(85,26))))))),(49,(64,72))),((3,59),(27,28))),(39,(45,(44,(84,(30,10)))))))),((29,(22,(24,23))),(75,((19,18),(34,33)))))))),(77,((16,(50,71)),(61,(31,78))))))));
	TREE * inapplicable = [&R] (1,((2,(88,((68,((16,(50,71)),(77,(61,(78,31))))),(76,(21,(46,((83,(47,((17,(57,(74,43))),(12,(((29,(22,(24,23))),(75,((34,33),(19,18)))),((((39,(45,(44,(84,(10,30))))),(((((20,56),(69,70)),(7,(8,(65,(55,(15,(48,(85,26)))))))),(49,(64,72))),((3,59),(27,28)))),(5,(6,((32,66),(73,(11,((53,54),(51,(60,4))))))))),((63,((37,14),((67,(58,(42,(38,(86,35))))),(36,82)))),(13,9)))))))),(25,(52,62))))))))),(87,((41,40),(81,(80,79))))));
	TREE * inapplicable = [&R] (1,((87,((40,41),(81,(79,80)))),(88,(2,((68,((16,(50,71)),(77,(61,(31,78))))),((46,(76,(21,(25,(52,62))))),(83,(47,((17,(57,(74,43))),(12,(((29,(22,(24,23))),(75,((34,33),(19,18)))),((((((59,3),(27,28)),((49,(72,64)),(((20,56),(70,69)),(7,(8,(65,(55,(15,(48,(85,26)))))))))),(39,(45,(44,(84,(30,10)))))),(5,(6,((32,66),(73,(11,((54,53),(51,(60,4))))))))),((63,(((67,(82,36)),(58,(42,(38,(86,35))))),(37,14))),(13,9))))))))))))));
	TREE * inapplicable = [&R] (1,((2,(88,((68,((46,(83,(47,((17,(57,(74,43))),(12,(((29,(22,(23,24))),(75,((18,19),(33,34)))),(((9,13),(63,((14,37),((67,(82,36)),(58,(42,(38,(86,35)))))))),(((39,(45,(44,(84,(30,10))))),(((56,20),(69,((70,(7,(8,(65,(55,(15,(48,(85,26)))))))),(49,(64,72))))),((3,59),(28,27)))),(5,(6,((73,(11,((53,54),(51,(4,60))))),(32,66)))))))))))),(76,(21,(25,(62,52)))))),((77,(61,(31,78))),(16,(71,50)))))),(87,((40,41),(81,(79,80))))));
	TREE * inapplicable = [&R] (1,((2,(88,((68,((77,(61,(31,78))),(16,(50,71)))),((46,(83,(47,((17,(57,(43,74))),(12,((((5,(6,((73,(11,((53,54),(51,(60,4))))),(32,66)))),((39,(45,(44,(84,(10,30))))),(((27,28),(3,59)),((49,(64,72)),(((56,20),(70,69)),((7,8),(65,(55,(15,(48,(85,26))))))))))),((63,(((67,(36,82)),(58,(42,(38,(35,86))))),(37,14))),(9,13))),((75,((33,34),(18,19))),(29,(22,(23,24)))))))))),(76,(21,(25,(52,62)))))))),(87,((81,(79,80)),(40,41)))));
	TREE * inapplicable = [&R] (1,((88,((2,(((47,83),(17,(12,(((75,((18,19),(33,34))),(29,(22,(23,24)))),(((63,(((67,(36,82)),(58,(42,(38,(35,86))))),(14,37))),(9,13)),(((((49,(64,72)),(((20,56),(70,69)),((8,7),(65,(55,(15,(48,(85,26)))))))),((59,3),(27,28))),(39,(45,(44,(84,(30,10)))))),(5,(6,((32,66),(73,(11,((53,54),(51,(4,60)))))))))))))),(57,(43,74)))),((68,((16,(50,71)),(77,(61,(31,78))))),(46,(76,(21,(25,(52,62)))))))),(87,((81,(79,80)),(40,41)))));
	TREE * inapplicable = [&R] (1,((2,(88,((68,(21,(76,(46,((25,(52,62)),(83,(47,((17,(57,(43,74))),(12,(((((((69,((70,(7,(8,(65,(55,(15,(48,(26,85)))))))),(49,(64,72)))),(56,20)),((3,59),(27,28))),(39,(45,(44,(84,(10,30)))))),(5,(6,((32,66),(73,(11,((51,(4,60)),(54,53)))))))),((63,(((67,(82,36)),(58,(42,(38,(86,35))))),(37,14))),(13,9))),((29,(22,(24,23))),(75,((34,33),(19,18)))))))))))))),((77,(61,(31,78))),(16,(50,71)))))),(87,((81,(80,79)),(40,41)))));
	TREE * inapplicable = [&R] (1,((2,(88,((68,(((12,((83,47),(17,(57,(43,74))))),(((75,((19,18),(34,33))),(29,(22,(24,23)))),(((63,(((67,(36,82)),(58,(42,(38,(86,35))))),(14,37))),(13,9)),((5,(6,((73,(11,((54,53),(51,(4,60))))),(32,66)))),((((((56,20),(69,70)),((7,8),(65,(55,(15,(48,(26,85))))))),(49,(72,64))),((59,3),(28,27))),(39,(45,(44,(84,(10,30)))))))))),(46,(76,(21,(25,(62,52))))))),((77,(16,(71,50))),(61,(78,31)))))),(87,((81,(80,79)),(41,40)))));
	TREE * inapplicable = [&R] (1,((2,(88,((68,(((16,(47,(83,((17,(57,(43,74))),(12,(((29,(22,(24,23))),(75,((18,19),(33,34)))),((((((((69,70),(56,20)),(7,(8,(65,(55,(15,(48,(85,26)))))))),(49,(64,72))),((3,59),(28,27))),(39,(45,(44,(84,(10,30)))))),(5,(6,((73,(11,((54,53),(51,(4,60))))),(32,66))))),((63,(((67,(58,(42,(38,(86,35))))),(36,82)),(37,14))),(9,13))))))))),(71,50)),(77,(61,(31,78))))),(76,(21,(46,(25,(62,52)))))))),(87,((40,41),(81,(80,79))))));
	TREE * inapplicable = [&R] (1,((87,((81,(79,80)),(41,40))),(2,(88,((68,(((50,71),(16,(83,(47,((17,(57,(43,74))),(12,(((29,(22,(24,23))),(75,((34,33),(19,18)))),((((((((8,7),(65,(55,(15,(48,(85,26)))))),((69,70),(56,20))),(49,(72,64))),((3,59),(28,27))),(39,(45,(44,(84,(10,30)))))),(5,(6,((73,(11,((54,53),(51,(4,60))))),(66,32))))),((63,((37,14),((67,(36,82)),(58,(42,(38,(35,86))))))),(13,9)))))))))),(77,(61,(31,78))))),(76,(46,(21,(25,(62,52))))))))));
	TREE * inapplicable = [&R] (1,(2,((88,(87,((41,40),(81,(80,79))))),((68,((((17,(12,(((((((((20,56),(69,70)),((8,7),(65,(55,(15,(48,(85,26))))))),(49,(72,64))),((59,3),(28,27))),(39,(45,(44,(84,(30,10)))))),(5,(6,((66,32),(73,(11,((51,(60,4)),(53,54)))))))),((13,9),(63,((37,14),((67,(36,82)),(58,(42,(38,(86,35))))))))),((75,((19,18),(34,33))),(29,(22,(23,24))))))),(47,83)),(57,(74,43))),(46,(76,(21,(25,(62,52))))))),(77,((61,(78,31)),(16,(50,71))))))));
	TREE * inapplicable = [&R] (1,((87,((41,40),(81,(80,79)))),(2,(88,((68,((46,(76,(21,(25,(62,52))))),(83,(47,((12,(((75,((18,19),(33,34))),(29,(22,(24,23)))),(((5,(6,((66,32),(73,(11,((54,53),(51,(4,60)))))))),((((49,(64,72)),(((70,69),(56,20)),(7,(8,(65,(55,(15,(48,(85,26))))))))),((3,59),(28,27))),(39,(45,(44,(84,(10,30))))))),((63,((14,37),((67,(82,36)),(58,(42,(38,(86,35))))))),(9,13))))),(17,(57,(43,74)))))))),((77,(61,(78,31))),(16,(71,50))))))));
END;
