#NEXUS
begin data;
  dimensions ntax=67 nchar=135;
  format datatype=standard gap=- missing=? Interleave=no;
  matrix
    Lepidonotus_squamatus       0?10121---?0000-0--000000-0000000-010010000-0-010000000000000011111005100-1400-000--0-0-0104001-70-00-0-0-001002100100?0-?00000100--00-
    Scoloplos_armiger           020-0-1---00000-0--000000-0000000-01020-000-0-000000000000000010000004000-1600-000--0-0-0100001-?0-00-0-0-01100201000000-?00?101010-00-
    Phylo_norvegica             020-0-0---00000-0--000000-0000000-01020-000-0-000000000000000010000004000-1600-000--0-0-0100001-?0-00-0-0-011002010000013?001101010-00-
    Flabelligera_affinis        0?0-0-1---00000-0--000000-0000000-010010000-0-000000111100000010000104110-1700-000--0-0-0102001-50-00-0-0-0000020101002???001111012200-
    Diplocirrus_glaucus         0?100-1---00000-0--000000-0000000-01000-000-0-000000111100000010000004110-1700-000--0-0-0102001-50-00-0-0-000002010100????001111012200-
    Dodecaceria_concharum       000-0-0---00000-0--000000-0000000-010210000-0-000000000000000010000003110-1400-000--0-0-0100011441010-0-1200000201000010-?001001011000-
    Dodecaceria_sp_             000-0-0---00000-0--000000-0000000-010210000-0-000000000000000010000003110-1400-000--0-0-0100011441010-0-1200000201000010-?001001011000-
    Thelepus_cincinnatus        200-0-0---00000-0--000000-0000000-01010-000-0-000000000000100011000002100-1301011100110-01010110310111111101000201011010-?0010-10111010
    Amphitritides_harpa         200-0-1---00000-0--000000-0000000-01010-000-0-000000000000100011000002100-1301011100110-01010110310111111101000201011010-?0010-10110010
    Marenzelleria_viridis       000-0-1---00000-0--000000-0000000-011210000-0-000000000000000011000001110-13010100--10100100001-1100001012011002010000010????1?10100011
    Polydora_giardi             000-101---00000-0--000000-0000000-012210000-0-000000000000000011000001110-13011100--10100100001-1100001012011002010000010?0001?10100011
    Augeneriella_alata          11120-000000000-0-010000110100000-01030-01110-00000000000000111100000210101001011100101000000?101100111010000101000000210100101100--010
    Fabricinuda_sp_             11120-000000000-0-010000100000000-01030-01100-00000000000000111100000210101001011100101000000?101100111010000?01000000210100101100--010
    Manayunkia_athallasia       11120-000000000-0-010000100100000-01030-01100-00000000000000111100000210101001011100101000000?101100111010000001000000210100101100--010
    Novofrabricia_labrus        11120-000000000-0-0100000-0100000-01030-01110-00000000000000111100000210101301011100101000000?101100111010000?01000000210100101100--010
    Amphicorina_mobilis         11120-01000110100-1000010-0110010-01030-01121110000000001000111100000210101311011100101001000110110111100-000101000000110000101100--010
    Amphiglena_terebro          11120-01010000100-0000100-0110000-01030-01100-000000000000101111000002101111010110001010110001133101111111000101000001010200101100--010
    Bispira_crassicornis        11120-1101011012130000000-0111?11111030-00121010000000000011111100001210101201011010111111011110210111111001000100000000-000101100--010
    Bispira_guinensis           11120-1101011012130000000-0111011111030-0012101000000000001111110000121010120101101011111101111021011111100100010000000??000101100--010
    Bispira_porifera            11120-01110110120-0010000-0111111111030-0012101000000000001111110000121010120101101011111101111021011111100100010000000??000101100--010
    Bispira_serrata             11120-1101011012130010000-0111111111030-0012101000000000001111110000121010120101110011111101111021011011100200010000000??000101100--010
    Branchiomma_bairdi          11120-1101010111130000000-0111111111030-00121010000000000011111100001210101201011000111201011110210110111002010100000?00-000101100--010
    Branchiomma_nigromaculatum  11120-1101010111130000000-0111111111030-00121010000000000011111100001210101201011000111201011110210110111002010100000100-000101100--010
    Branchiomma_sp__A           11120-1101010111130000000-0111111111030-00121010000000000011111100001210101201011000111201011110210110111002010100000?00-000101100--010
    Branchiomma_sp__B           11120-1101010111130000000-0111111111030-00121010000000000011111100001210101201011000111201011110210110111002010100000?00-000101100--010
    Calcisabella_piloseta       11120-01010010110-?000010-01?001??11030-00121010000000000010111100000210101301011110110-21000110010111110-02000100000????????01100--010
    Chone_sp_                   11120-01010110110-1000010-01?0?10-01030-00121100000000001000111100000210101011011??01010010001101101101?0-0000010000001???00101100--010
    Dialychone_perkinsi         11120-01010110100-1000010-0110010-01030-00121100000000001000111100000210101011011100101001000110110110110-0000010000001???00101100--010
    Euchone_variabilis          11120-01010110100-1000010-0110110-01030-0012111000000000100011110000021010101101101010100100011011011010101000010000001???00101100--010
    Euchone_sp_                 11120-01010110100-1000010-0110110-01030-0012111001000000100011110000021010101101101110100100011011011010101000010000001???00101100--010
    Eudistylia_vancouveri       11120-111110001?111010?00-011?111011030-001010100000000000101111000002101?110101101011111100011331011111120?0?0100000000-0?0101100--010
    Fabrisabella_vasculosa      11120-01010000100--000010-0100011001030-00121110000000001010111100000210101101011110101001000110110111121000000100000?1???00?01100--010
    Megalomma_sp__A             11120-1101000012120000000-0110?11011030-00101110000000000010111100000210101001011010111111000113310111111101000100000000-000101100--010
    Myxicola_sp_                11120-01010110100-0000010-0110010-01030-00120-00000000001010111100002210101301011000101001022110010110110-000?0100000010-000101100--010
    Notaulax_sp__A              11120-1101011011100010100-0111010-11030-0010110000000000001011110000021011110101101011111100011081011111100?000100000000-000101100--010
    Notaulax_sp__B              11120-1101011011100010100-0111010-11030-0010110000000000001011110000021011110101101011111100011081011111100?000100000000-000101100--010
    Pseudopotamilla_reniformis  11120-1101000012110010100-0110111011030-001011100000000000101111000002101011010110101111110001133101111210020101000000010?00101100--010
    Pseudopotamilla_sp__A       11120-1101000012110010100-0110111011030-001011100000000000101111000002101011010110101111110001133101111210020101000000010?00101100--010
    Pseudopotamilla_sp__B       11120-1101000012110010100-0110111011030-001011100000000000101111000002101011010110101111110001133101111210020101000000010?00101100--010
    Pseudopotamilla_sp_BC       11120-1101000012110010100-0110111011030-001011100000000000101111000002101011010110101111110001133101111210020101000000010?00101100--010
    Sabella_spallanzanii        11120-01110100110-0000000-0111011111030-00121010000000000011111100001210101201011010111111011110210111111001000100000200-000101100--010
    Sabella_pavonina            11120-01110100110-0000000-0111011111030-00121010000000000011111100001210101201011010111111011110210111111001000100000200-000101100--010
    Sabellastarte_australiensis 11120-01110100120-0010000-0111011011030-00101110000000000011111100001210101201011010111101011110210111111101010100000200-000101100--010
    Sabellastate_sp_            11120-01110100120-0010000-0111011011030-00101110000000000011111100001210101201011010111101011110210111111101010100000200-000101100--010
    Sabellastarte_spectabilis   11120-01110100120-0010000-0111011011030-00101110000000000011111100001210101201011010111101011110210111111101010100000200-000101100--010
    Schizobranchia_insignis     11120-110110001?111010?00-011?111011030-001010100000000000101111000002101?110101101011111100011331011111120?0?0100000000-0?0101100--010
    Stylomma_palmatum           11120-1101011012110011000-0110011011030-00121010000000000011111100001210101201011010111111011110210111111001000100000?0???00101100--010
    Crucigera_zygophora         11120-000100000-0-0000000-1100000-01030-001010000000000001001111000002100-1301011011110-0100001-610011100-0?000100000000-000001100--012
    Ditrupa_arietina            11120-000101000-0-0000000-1100100-01030-001010100000000001001111000002100-1301011011110-0100001-010011100-0?000100000000-000001100--012
    Hydroides_sp_               11120-001100000-0-0000000-1100100-01030-001010000000000001001111000002100-1301011011110-0100001-610011100-0?000100000000-000001100--012
    Pomatoceros_triqueter       11120-000101000-0-0000000-1100000-01030-001010000000000001001111000002100-1301011011110-0100001-010011100-02000100000000-000001100--012
    Spirobranchus_lima          11120-101101000-150000000-1100100-01030-001010000000000001001111000002100-1301011011110-0100001-010011100-0?000100000000-000001100--012
    Protolaeospira_tricostalis  11120-000?0?000-0-?000000-1100?00-01030-001010000000000001001111000002100-13?10110?1110-0100001-310011100-0?0001000000010??0101100--012
    Protula_paliata             11120-101101000-100000000-0100000-01030-001010000000000001001111000002100-1301011010110-0100001-010011100-0?000100000000-000101100--012
    Gunnarea_capensis           1?0-0-0---00000-0--000000-0000000-010010000-0-0000000000?000?011010000110-1100-000--0-0-0100001-40-00-0-0-01001100000000-?0000010100110
    Idanthyrsus_australiensis   1?0-0-0---00000-0--000000-0000000-010010000-0-0000000000?000?011010000110-1100-000--0-0-0100001-40-00-0-0-01001100000000-00000010100110
    Idanthyrsus_pennatus        1?0-0-0---00000-0--000000-0000000-010010000-0-0000000000?000?011000000110-1100-000--0-0-0100001-40-00-0-0-01001100000000-00000010100110
    Sabellaria_alveolata        1?0-0-1---00000-0--000000-0000000-010010000-0-0000000000?000?011010000100-1100-000--0-0-0100001-40-00-0-0-01001100000000-00000010100110
    Myriochele_sp_              020-0-0---00000-0--000000-0000000-01020-010-0-000000000000000011000022100-14012010000-100103001-5120100-1202000?0100???????1000110--010
    Owenia_sp_                  0???0-0???0????????????????????????1020-01?????00000000000000011000022100-14012010000-100103001-5120100-1202000201000010-?01000110--010
    Owenia_fusiformis           0???0-0???0????????????????????????1020-01?????00000000000000011000022100-14012010000-100103001-5120100-1202000201000010-?01000110--010
    Lamellibrachia_columna      210-0-0---00000-0--000000-0000000-00-?12100-0-00112100001000000-0000--000-0-013010100-100103001-41011?0-1200000100100020-?10100110--011
    Osedax_frankpressi          ?10-0-0---00000-0--000000-0000000-00-212100-0-0000100000?000000-0000--000-0-013010000-100?03001-4110100-1200000100100020-?1010??10--00-
    Ridgeia_pisceae             110-0-0---00000-0--000000-0000000-00-?12100-0-00112100001000000-0000--000-0-013010100-100110001-4101110-1200000100100020-?10100110--011
    Riftia_pachyptila           110-0-0---00000-0--000000-0000000-00-?12100-0-00112100001000000-0000--000-0-013010100-100113001-4111110-1200000100100020-?10100110--011
    Sclerolinum_brattstromi     000-0-0---00000-0--000000-0000000-00-210000-0-00001100001000000-0000--000-0-013010100-100113001-41001?0-1200000100100020-?10100010--011
    Siboglinum_fiordicum        000-0-0---00000-0--000000-0000000-00-211100-0-00001100001010000-000003000-15011010110-100110001-4110110-1200000100100020-?10100010--011
  ;
end;
  
BEGIN TREES;
	TRANSLATE
		1	Lepidonotus_squamatus,
		2	Scoloplos_armiger,
		3	Phylo_norvegica,
		4	Flabelligera_affinis,
		5	Diplocirrus_glaucus,
		6	Dodecaceria_concharum,
		7	Dodecaceria_sp_,
		8	Thelepus_cincinnatus,
		9	Amphitritides_harpa,
		10	Marenzelleria_viridis,
		11	Polydora_giardi,
		12	Augeneriella_alata,
		13	Fabricinuda_sp_,
		14	Manayunkia_athallasia,
		15	Novofrabricia_labrus,
		16	Amphicorina_mobilis,
		17	Amphiglena_terebro,
		18	Bispira_crassicornis,
		19	Bispira_guinensis,
		20	Bispira_porifera,
		21	Bispira_serrata,
		22	Branchiomma_bairdi,
		23	Branchiomma_nigromaculatum,
		24	Branchiomma_sp__A,
		25	Branchiomma_sp__B,
		26	Calcisabella_piloseta,
		27	Chone_sp_,
		28	Dialychone_perkinsi,
		29	Euchone_variabilis,
		30	Euchone_sp_,
		31	Eudistylia_vancouveri,
		32	Fabrisabella_vasculosa,
		33	Megalomma_sp__A,
		34	Myxicola_sp_,
		35	Notaulax_sp__A,
		36	Notaulax_sp__B,
		37	Pseudopotamilla_reniformis,
		38	Pseudopotamilla_sp__A,
		39	Pseudopotamilla_sp__B,
		40	Pseudopotamilla_sp_BC,
		41	Sabella_spallanzanii,
		42	Sabella_pavonina,
		43	Sabellastarte_australiensis,
		44	Sabellastate_sp_,
		45	Sabellastarte_spectabilis,
		46	Schizobranchia_insignis,
		47	Stylomma_palmatum,
		48	Crucigera_zygophora,
		49	Ditrupa_arietina,
		50	Hydroides_sp_,
		51	Pomatoceros_triqueter,
		52	Spirobranchus_lima,
		53	Protolaeospira_tricostalis,
		54	Protula_paliata,
		55	Gunnarea_capensis,
		56	Idanthyrsus_australiensis,
		57	Idanthyrsus_pennatus,
		58	Sabellaria_alveolata,
		59	Myriochele_sp_,
		60	Owenia_sp_,
		61	Owenia_fusiformis,
		62	Lamellibrachia_columna,
		63	Osedax_frankpressi,
		64	Ridgeia_pisceae,
		65	Riftia_pachyptila,
		66	Sclerolinum_brattstromi,
		67	Siboglinum_fiordicum
	;
	TREE * ambiguous = [&R] (1,((((2,3),((4,5),((6,7),(((8,9),(((17,((15,(13,(12,14))),(53,(50,(48,(51,(49,(52,54)))))))),(26,(((47,(((18,19),(21,((22,23),(24,25)))),(20,((41,42),(43,(44,45)))))),((31,46),(33,(39,(40,(37,38)))))),(35,36)))),(32,(34,(16,((27,28),(29,30))))))),((59,(60,61)),(63,((62,(64,65)),(66,67)))))))),(10,11)),(58,(57,(55,56)))));
	TREE * ambiguous = [&R] (1,((((2,3),((4,5),((6,7),(((8,9),(((17,((15,(14,(12,13))),(53,(48,(50,(49,(51,(52,54)))))))),(26,(((47,((18,19),((20,((41,42),(44,(43,45)))),(21,(25,(24,(22,23))))))),((31,46),(33,(39,(38,(37,40)))))),(35,36)))),(32,(34,((16,(27,28)),(29,30)))))),((61,(59,60)),(63,((62,(64,65)),(66,67)))))))),(10,11)),(58,(57,(55,56)))));
	TREE * ambiguous = [&R] (1,((((2,3),((4,5),(6,(7,(((8,9),(((17,((15,(14,(12,13))),(53,(50,(48,(51,(49,(52,54)))))))),(26,(((47,((18,(19,(21,(24,(23,(22,25)))))),(20,((41,42),(45,(43,44)))))),((31,46),(33,(40,(38,(37,39)))))),(35,36)))),(32,(34,(16,((27,28),(29,30))))))),((59,(60,61)),(63,((65,(62,64)),(66,67))))))))),(10,11)),(58,(57,(55,56)))));
	TREE * ambiguous = [&R] (1,((((2,3),((4,5),(6,(7,(((8,9),(((17,((15,(14,(12,13))),(53,((48,50),(49,(51,(52,54))))))),(26,(((47,((18,(19,(21,(24,(25,(22,23)))))),(20,((41,42),(45,(43,44)))))),((31,46),(33,((37,39),(38,40))))),(35,36)))),(32,(34,((16,(29,30)),(27,28)))))),((60,(59,61)),(63,((65,(62,64)),(66,67))))))))),(10,11)),(58,(57,(55,56)))));
	TREE * ambiguous = [&R] (1,((((2,3),((4,5),(7,(6,(((8,9),(((17,((15,(13,(12,14))),(53,(48,(50,(51,(49,(52,54)))))))),(26,(((47,(((18,19),(21,(22,(25,(23,24))))),(20,((41,42),(44,(43,45)))))),((31,46),(33,(37,(39,(38,40)))))),(35,36)))),(32,(34,((16,(29,30)),(27,28)))))),((60,(59,61)),(63,((65,(62,64)),(66,67))))))))),(10,11)),(58,(56,(55,57)))));
	TREE * ambiguous = [&R] (1,((((2,3),((4,5),((6,7),(((8,9),(((17,((15,(13,(12,14))),(53,(48,(50,(51,(49,(52,54)))))))),(26,(((47,((18,19),((20,((41,42),(44,(43,45)))),(21,(25,(24,(22,23))))))),((31,46),(33,(38,(40,(37,39)))))),(35,36)))),(32,(34,(16,((27,28),(29,30))))))),((61,(59,60)),(63,((64,(62,65)),(66,67)))))))),(10,11)),(58,(55,(56,57)))));
	TREE * ambiguous = [&R] (1,((((2,3),((4,5),((6,7),(((8,9),(((17,((15,(13,(12,14))),(53,(48,(50,(51,(49,(52,54)))))))),(26,(((47,(((18,19),(20,((41,42),(43,(44,45))))),(21,(22,(23,(24,25)))))),((31,46),(33,(39,(38,(37,40)))))),(35,36)))),(32,(34,((16,(29,30)),(27,28)))))),((61,(59,60)),(63,((62,(64,65)),(66,67)))))))),(10,11)),(58,(57,(55,56)))));
	TREE * ambiguous = [&R] (1,((((2,3),((4,5),((6,7),(((8,9),(((17,((15,(14,(12,13))),(53,(50,(48,(51,(49,(52,54)))))))),(26,(((47,(((18,19),(21,((22,25),(23,24)))),(20,((41,42),(43,(44,45)))))),((31,46),(33,(39,(40,(37,38)))))),(35,36)))),(32,(34,((16,(27,28)),(29,30)))))),((59,(60,61)),(63,((62,(64,65)),(66,67)))))))),(10,11)),(58,(56,(55,57)))));
	TREE * ambiguous = [&R] (1,((((2,3),((4,5),(6,(7,(((8,9),(((17,((15,(12,(13,14))),(53,(48,(51,(49,(50,(52,54)))))))),(26,(((47,(((18,19),(20,((41,42),(43,(44,45))))),(21,(22,(25,(23,24)))))),((31,46),(33,((37,39),(38,40))))),(35,36)))),(32,(34,((16,(27,28)),(29,30)))))),((60,(59,61)),(63,((62,(64,65)),(66,67))))))))),(10,11)),(58,(55,(56,57)))));
	TREE * ambiguous = [&R] (1,((((2,3),((4,5),((6,7),(((8,9),(((17,((15,(13,(12,14))),(53,(48,(51,(49,(50,(52,54)))))))),(26,(((47,(((18,19),(20,((41,42),(44,(43,45))))),(21,(23,(22,(24,25)))))),((31,46),(33,((37,38),(39,40))))),(35,36)))),(32,(34,(16,((27,28),(29,30))))))),((61,(59,60)),(63,((62,(64,65)),(66,67)))))))),(10,11)),(58,(56,(55,57)))));
	TREE * ambiguous = [&R] (1,((((2,3),((4,5),((6,7),(((8,9),(((17,((15,(14,(12,13))),(53,((48,50),(49,(51,(52,54))))))),(26,(((47,((18,(19,(21,(22,(25,(23,24)))))),(20,((41,42),(45,(43,44)))))),((31,46),(33,((37,38),(39,40))))),(35,36)))),(32,(34,((16,(27,28)),(29,30)))))),((60,(59,61)),(63,((65,(62,64)),(66,67)))))))),(10,11)),(58,(55,(56,57)))));
	TREE * ambiguous = [&R] (1,((((2,3),((4,5),(6,(7,(((8,9),(((17,((15,(12,(13,14))),(53,(48,(51,(49,(50,(52,54)))))))),(26,(((47,(((18,19),(21,(23,(22,(24,25))))),(20,((41,42),(44,(43,45)))))),((31,46),(33,(40,(37,(38,39)))))),(35,36)))),(32,(34,(16,((27,28),(29,30))))))),((61,(59,60)),(63,((62,(64,65)),(66,67))))))))),(10,11)),(58,(55,(56,57)))));
	TREE * ambiguous = [&R] (1,((((2,3),((4,5),(7,(6,(((8,9),(((17,((15,(13,(12,14))),(53,(48,(51,(49,(50,(52,54)))))))),(26,(((47,(((18,19),(21,(24,(23,(22,25))))),(20,((41,42),(45,(43,44)))))),((31,46),(33,(37,(38,(39,40)))))),(35,36)))),(32,(34,((16,(27,28)),(29,30)))))),((59,(60,61)),(63,((62,(64,65)),(66,67))))))))),(10,11)),(58,(57,(55,56)))));
	TREE * ambiguous = [&R] (1,((((2,3),((4,5),((6,7),(((8,9),(((17,((15,(14,(12,13))),(53,(48,(51,(49,(50,(52,54)))))))),(26,(((47,((19,(18,(21,(25,(22,(23,24)))))),(20,((41,42),(45,(43,44)))))),((31,46),(33,(39,(40,(37,38)))))),(35,36)))),(32,(34,((16,(29,30)),(27,28)))))),((59,(60,61)),(63,((64,(62,65)),(66,67)))))))),(10,11)),(58,(56,(55,57)))));
	TREE * ambiguous = [&R] (1,((((2,3),((4,5),(6,(7,(((8,9),(((17,((15,(14,(12,13))),(53,(48,(51,(49,(50,(52,54)))))))),(26,(((47,((18,(19,(21,(22,(23,(24,25)))))),(20,((41,42),(45,(43,44)))))),((31,46),(33,(40,(38,(37,39)))))),(35,36)))),(32,(34,((16,(27,28)),(29,30)))))),((59,(60,61)),(63,((62,(64,65)),(66,67))))))))),(10,11)),(58,(55,(56,57)))));
	TREE * ambiguous = [&R] (1,((((2,3),((4,5),(7,(6,(((8,9),(((17,((15,(14,(12,13))),(53,(48,(51,(49,(50,(52,54)))))))),(26,(((47,(((18,19),(21,(25,(22,(23,24))))),(20,((41,42),(45,(43,44)))))),((31,46),(33,(39,(40,(37,38)))))),(35,36)))),(32,(34,((16,(29,30)),(27,28)))))),((59,(60,61)),(63,((64,(62,65)),(66,67))))))))),(10,11)),(58,(56,(55,57)))));
	TREE * ambiguous = [&R] (1,((((2,3),((4,5),((6,7),(((8,9),(((17,((15,(14,(12,13))),(53,(48,(51,(49,(50,(52,54)))))))),(26,(((47,(((18,19),(20,((41,42),(45,(43,44))))),(21,(22,(25,(23,24)))))),((31,46),(33,(37,(39,(38,40)))))),(35,36)))),(32,(34,((16,(29,30)),(27,28)))))),((60,(59,61)),(63,((64,(62,65)),(66,67)))))))),(10,11)),(58,(56,(55,57)))));
	TREE * ambiguous = [&R] (1,((((2,3),((4,5),(7,(6,(((8,9),(((17,((15,(12,(13,14))),(53,(48,(51,(49,(50,(52,54)))))))),(26,(((47,((19,(18,(21,(22,(24,(23,25)))))),(20,((41,42),(44,(43,45)))))),((31,46),(33,(37,(38,(39,40)))))),(35,36)))),(32,(34,(16,((27,28),(29,30))))))),((59,(60,61)),(63,((64,(62,65)),(66,67))))))))),(10,11)),(58,(56,(55,57)))));
	TREE * extraState = [&R] (1,((((2,3),(4,5)),((6,7),(((((8,9),(((15,(13,(12,14))),(17,((32,(26,(34,(16,((27,28),(29,30)))))),(((((47,(18,19)),(21,(22,(24,(23,25))))),(20,((41,42),(44,(43,45))))),(35,36)),(33,((31,46),(38,(40,(37,39))))))))),(53,((48,50),((49,51),(52,54)))))),(59,(60,61))),(67,(66,(63,(65,(62,64)))))),(10,11)))),(58,(57,(55,56)))));
	TREE * extraState = [&R] (1,((((2,3),(4,5)),((6,7),(((((8,9),(((15,(14,(12,13))),(17,((32,(26,(34,(16,((27,28),(29,30)))))),(((47,(((18,19),(20,((41,42),(45,(43,44))))),(21,(22,(25,(23,24)))))),((33,(31,46)),(37,(40,(38,39))))),(35,36))))),(53,(48,(51,(49,(50,(52,54)))))))),(61,(59,60))),(67,(66,(63,(65,(62,64)))))),(10,11)))),(58,(57,(55,56)))));
	TREE * extraState = [&R] (1,((((2,3),(4,5)),((6,7),(((((8,9),(((15,(14,(12,13))),(17,((32,(26,(34,(16,((27,28),(29,30)))))),(33,(((47,((18,(19,(21,(25,(22,(23,24)))))),(20,((41,42),(44,(43,45)))))),(35,36)),((31,46),(40,(37,(38,39))))))))),(53,(48,(51,(49,(50,(52,54)))))))),(60,(59,61))),(67,(66,(63,(64,(62,65)))))),(10,11)))),(58,(56,(55,57)))));
	TREE * extraState = [&R] (1,((((2,3),(4,5)),((6,7),(((((8,9),(((15,(14,(12,13))),(17,((32,(26,(34,(16,((27,28),(29,30)))))),(33,(((47,(((18,19),(21,(22,(24,(23,25))))),(20,((41,42),(45,(43,44)))))),(35,36)),((31,46),(39,(40,(37,38))))))))),(53,(48,(50,((49,51),(52,54))))))),(59,(60,61))),(67,(66,(63,(64,(62,65)))))),(10,11)))),(58,(56,(55,57)))));
	TREE * extraState = [&R] (1,((((2,3),(4,5)),((6,7),(((((8,9),(((15,(12,(13,14))),(17,((32,(26,(34,(16,((27,28),(29,30)))))),((((47,(18,(19,(21,(24,(25,(22,23))))))),(20,((41,42),(43,(44,45))))),(35,36)),((33,(31,46)),(40,(39,(37,38)))))))),(53,(48,(51,(49,(50,(52,54)))))))),(60,(59,61))),(67,(66,(63,(65,(62,64)))))),(10,11)))),(58,(56,(55,57)))));
	TREE * extraState = [&R] (1,(((2,3),((4,5),((6,7),(((((8,9),(((15,(13,(12,14))),(17,((32,(26,(34,(16,((27,28),(29,30)))))),(((47,((18,19),((20,((41,42),(45,(43,44)))),(21,(24,(22,(23,25))))))),(35,36)),(33,((31,46),(40,(39,(37,38))))))))),(53,((48,50),(51,(49,(52,54))))))),(60,(59,61))),(67,(66,(63,(62,(64,65)))))),(10,11))))),(58,(57,(55,56)))));
	TREE * extraState = [&R] (1,(((2,3),((4,5),((6,7),(((((8,9),(((15,(14,(12,13))),(17,((32,(26,(34,((16,(29,30)),(27,28))))),(((47,((18,(19,(21,(23,(24,(22,25)))))),(20,((41,42),(44,(43,45)))))),(33,((31,46),(39,(38,(37,40)))))),(35,36))))),(53,(48,(50,((49,51),(52,54))))))),(59,(60,61))),(67,(66,(63,(64,(62,65)))))),(10,11))))),(58,(57,(55,56)))));
	TREE * extraState = [&R] (1,(((2,3),((4,5),((6,7),(((((8,9),(((15,(14,(12,13))),(17,((32,(26,(34,((16,(29,30)),(27,28))))),(((47,((18,19),((20,((41,42),(45,(43,44)))),(21,(24,(25,(22,23))))))),((33,(31,46)),(38,(37,(39,40))))),(35,36))))),(53,(48,(51,(49,(50,(52,54)))))))),(59,(60,61))),(67,(66,(63,(62,(64,65)))))),(10,11))))),(58,(57,(55,56)))));
	TREE * extraState = [&R] (1,(((2,3),((4,5),((6,7),(((((8,9),(((15,(14,(12,13))),(17,((32,(26,(34,(27,(28,(16,(29,30))))))),(((47,(((18,19),(21,(24,(25,(22,23))))),(20,((41,42),(44,(43,45)))))),(33,((31,46),(40,(38,(37,39)))))),(35,36))))),(53,(48,(51,(49,(50,(52,54)))))))),(61,(59,60))),(67,(66,(63,(65,(62,64)))))),(10,11))))),(58,(57,(55,56)))));
	TREE * extraState = [&R] (1,((((2,3),((6,7),(((((8,9),(((15,(14,(12,13))),(17,((32,(26,(34,(28,(27,(16,(29,30))))))),(((47,(((18,19),(21,(23,(25,(22,24))))),(20,((41,42),(43,(44,45)))))),((33,(31,46)),(37,(39,(38,40))))),(35,36))))),(53,((48,50),(49,(51,(52,54))))))),(59,(60,61))),(67,(66,(63,(64,(62,65)))))),(10,11)))),(4,5)),(58,(55,(56,57)))));
	TREE * extraState = [&R] (1,(((2,3),((4,5),((6,7),(((((8,9),(((15,(14,(12,13))),(17,((32,(26,(34,(28,(27,(16,(29,30))))))),((33,(((47,((18,(19,(21,(25,(23,(22,24)))))),(20,((41,42),(43,(44,45)))))),(35,36)),(31,46))),(38,(39,(37,40))))))),(53,(48,(51,(49,(50,(52,54)))))))),(61,(59,60))),(67,(66,(63,(62,(64,65)))))),(10,11))))),(58,(55,(56,57)))));
	TREE * extraState = [&R] (1,(((2,3),((4,5),((6,7),(((((8,9),(((15,(12,(13,14))),(17,((32,(26,(34,(16,((27,28),(29,30)))))),(((((18,19),(21,(25,(23,(22,24))))),(47,(20,((41,42),(43,(44,45)))))),(35,36)),(33,((31,46),(40,(39,(37,38))))))))),(53,(48,(50,((49,51),(52,54))))))),(59,(60,61))),(67,(66,(63,(62,(64,65)))))),(10,11))))),(58,(56,(55,57)))));
	TREE * extraState = [&R] (1,(((2,3),((4,5),((6,7),(((((8,9),(((15,(14,(12,13))),(17,((32,(26,(34,(16,((27,28),(29,30)))))),(((47,((19,(18,(21,(22,(25,(23,24)))))),(20,((41,42),(45,(43,44)))))),(35,36)),(33,((31,46),(37,(40,(38,39))))))))),(53,(48,(51,(49,(50,(52,54)))))))),(61,(59,60))),(67,(66,(63,(65,(62,64)))))),(10,11))))),(58,(57,(55,56)))));
	TREE * extraState = [&R] (1,((((2,3),((6,7),(((((8,9),(((15,(14,(12,13))),(17,((32,(26,(34,(28,(27,(16,(29,30))))))),(((47,(((18,19),(21,(23,(24,(22,25))))),(20,((41,42),(45,(43,44)))))),(35,36)),(33,((31,46),((37,38),(39,40)))))))),(53,(48,(51,(49,(50,(52,54)))))))),(61,(59,60))),(67,(66,(63,(62,(64,65)))))),(10,11)))),(4,5)),(58,(56,(55,57)))));
	TREE * extraState = [&R] (1,(((2,3),((4,5),((6,7),(((((8,9),(((15,(14,(12,13))),(17,((32,(26,(34,(16,((27,28),(29,30)))))),(33,(((47,(((18,19),(21,(25,(22,(23,24))))),(20,((41,42),(44,(43,45)))))),(35,36)),((31,46),(40,(37,(38,39))))))))),(53,(48,(51,(49,(50,(52,54)))))))),(60,(59,61))),(67,(66,(63,(64,(62,65)))))),(10,11))))),(58,(56,(55,57)))));
	TREE * extraState = [&R] (1,((((2,3),(4,5)),((6,7),(((((8,9),(((15,(12,(13,14))),(17,((32,(26,(34,(27,(28,(16,(29,30))))))),(33,(((47,((19,(18,(21,(22,(24,(23,25)))))),(20,((41,42),(44,(43,45)))))),(35,36)),((31,46),(40,(39,(37,38))))))))),(53,((48,50),(49,(51,(52,54))))))),(60,(59,61))),(67,(66,(63,(64,(62,65)))))),(10,11)))),(58,(55,(56,57)))));
	TREE * extraState = [&R] (1,((((2,3),(4,5)),((6,7),(((((8,9),(((15,(13,(12,14))),(17,((32,(26,(34,(28,(27,(16,(29,30))))))),((33,(((47,(((18,19),(21,(25,(24,(22,23))))),(20,((41,42),(45,(43,44)))))),(35,36)),(31,46))),(38,(40,(37,39))))))),(53,(50,(48,(49,(51,(52,54)))))))),(61,(59,60))),(67,(66,(63,(65,(62,64)))))),(10,11)))),(58,(56,(55,57)))));
	TREE * extraState = [&R] (1,((((2,3),((6,7),(((((8,9),(((15,(12,(13,14))),(17,((32,(26,(34,(16,((27,28),(29,30)))))),(33,(((47,((18,(19,(21,(22,(24,(23,25)))))),(20,((41,42),(44,(43,45)))))),(35,36)),((31,46),(40,(37,(38,39))))))))),(53,(50,(48,(51,(49,(52,54)))))))),(60,(59,61))),(67,(66,(63,(62,(64,65)))))),(10,11)))),(4,5)),(58,(57,(55,56)))));
	TREE * extraState = [&R] (1,((((2,3),(4,5)),((6,7),(((((8,9),(((15,(14,(12,13))),(17,((32,(26,(34,(16,((27,28),(29,30)))))),(((47,(((18,19),(21,(22,(25,(23,24))))),(20,((41,42),(44,(43,45)))))),((33,(31,46)),(38,(37,(39,40))))),(35,36))))),(53,((48,50),((49,51),(52,54)))))),(61,(59,60))),(67,(66,(63,(64,(62,65)))))),(10,11)))),(58,(57,(55,56)))));
	TREE * extraState = [&R] (1,(((2,3),((4,5),((6,7),(((((8,9),(((15,(13,(12,14))),(17,((32,(26,(34,(16,((27,28),(29,30)))))),(33,(((47,(((18,19),(21,(24,(25,(22,23))))),(20,((41,42),(45,(43,44)))))),(35,36)),((31,46),(39,(38,(37,40))))))))),(53,(50,(48,((49,51),(52,54))))))),(59,(60,61))),(67,(66,(63,(62,(64,65)))))),(10,11))))),(58,(55,(56,57)))));
	TREE * extraState = [&R] (1,(((2,3),((4,5),((6,7),(((((8,9),(((15,(13,(12,14))),(17,((32,(26,(34,(16,((27,28),(29,30)))))),(33,(((47,(((18,19),(20,((41,42),(45,(43,44))))),(21,(25,(23,(22,24)))))),(35,36)),((31,46),((37,40),(38,39)))))))),(53,(48,(50,(51,(49,(52,54)))))))),(60,(59,61))),(67,(66,(63,(62,(64,65)))))),(10,11))))),(58,(57,(55,56)))));
	TREE * extraState = [&R] (1,(((2,3),((4,5),((6,7),(((((8,9),(((15,(12,(13,14))),(17,((32,(26,(34,(16,((27,28),(29,30)))))),(((47,(((18,19),(20,((41,42),(45,(43,44))))),(21,(23,(22,(24,25)))))),((31,46),(33,(38,(40,(37,39)))))),(35,36))))),(53,(48,(50,(51,(49,(52,54)))))))),(60,(59,61))),(67,(66,(63,(62,(64,65)))))),(10,11))))),(58,(56,(55,57)))));
	TREE * extraState = [&R] (1,((((2,3),(4,5)),((6,7),(((((8,9),(((15,(14,(12,13))),(17,((32,(26,(34,(16,((27,28),(29,30)))))),(((47,((18,19),((20,((41,42),(44,(43,45)))),(21,(23,(25,(22,24))))))),(35,36)),((33,(31,46)),(40,(39,(37,38)))))))),(53,(48,(50,(51,(49,(52,54)))))))),(61,(59,60))),(67,(66,(63,(62,(64,65)))))),(10,11)))),(58,(55,(56,57)))));
	TREE * extraState = [&R] (1,((((2,3),((6,7),(((((8,9),(((15,(13,(12,14))),(17,((32,(26,(34,(16,((27,28),(29,30)))))),((33,(((47,((18,(19,(21,(22,(25,(23,24)))))),(20,((41,42),(43,(44,45)))))),(35,36)),(31,46))),(38,(39,(37,40))))))),(53,(48,(51,(49,(50,(52,54)))))))),(60,(59,61))),(67,(66,(63,(62,(64,65)))))),(10,11)))),(4,5)),(58,(55,(56,57)))));
	TREE * extraState = [&R] (1,((((2,3),(4,5)),((6,7),(((((8,9),(((15,(12,(13,14))),(17,((32,(26,(34,(28,(27,(16,(29,30))))))),(((((18,19),(47,(21,(23,(25,(22,24)))))),(20,((41,42),(43,(44,45))))),(35,36)),((33,(31,46)),(39,(38,(37,40)))))))),(53,(48,(50,((49,51),(52,54))))))),(61,(59,60))),(67,(66,(63,(64,(62,65)))))),(10,11)))),(58,(56,(55,57)))));
	TREE * extraState = [&R] (1,(((2,3),((4,5),((6,7),(((((8,9),(((15,(14,(12,13))),(17,((32,(26,(34,(27,(28,(16,(29,30))))))),(((47,(((18,19),(21,(23,(25,(22,24))))),(20,((41,42),(44,(43,45)))))),(35,36)),((33,(31,46)),(38,(39,(37,40)))))))),(53,(48,(50,((49,51),(52,54))))))),(61,(59,60))),(67,(66,(63,(65,(62,64)))))),(10,11))))),(58,(57,(55,56)))));
	TREE * extraState = [&R] (1,((((2,3),((6,7),(((((8,9),(((15,(12,(13,14))),(17,((32,(26,(34,(16,((27,28),(29,30)))))),(33,(((47,(((18,19),(21,(22,(24,(23,25))))),(20,((41,42),(44,(43,45)))))),(35,36)),((31,46),(40,(37,(38,39))))))))),(53,(50,(48,(51,(49,(52,54)))))))),(60,(59,61))),(67,(66,(63,(62,(64,65)))))),(10,11)))),(4,5)),(58,(57,(55,56)))));
	TREE * extraState = [&R] (1,(((2,3),((4,5),((6,7),(((((8,9),(((15,(12,(13,14))),(17,((32,(26,(34,((16,(29,30)),(27,28))))),((((47,(((18,19),(21,(23,(22,(24,25))))),(20,((41,42),(45,(43,44)))))),(35,36)),(33,(31,46))),(39,(37,(38,40))))))),(53,(50,(48,(49,(51,(52,54)))))))),(60,(59,61))),(67,(66,(63,(65,(62,64)))))),(10,11))))),(58,(55,(56,57)))));
	TREE * extraState = [&R] (1,((((2,3),(4,5)),((6,7),(((((8,9),(((15,(13,(12,14))),(17,((32,(26,(34,(16,((27,28),(29,30)))))),(((47,((18,19),((20,((41,42),(44,(43,45)))),(21,(22,(24,(23,25))))))),(35,36)),((33,(31,46)),(40,(38,(37,39)))))))),(53,(48,(51,(49,(50,(52,54)))))))),(59,(60,61))),(67,(66,(63,(64,(62,65)))))),(10,11)))),(58,(55,(56,57)))));
	TREE * extraState = [&R] (1,((((2,3),(4,5)),((6,7),(((((8,9),(((15,(14,(12,13))),(17,((32,(26,(34,(28,(27,(16,(29,30))))))),(33,(((47,(((18,19),(20,((41,42),(43,(44,45))))),(21,((22,24),(23,25))))),(35,36)),((31,46),((37,40),(38,39)))))))),(53,(48,(51,(49,(50,(52,54)))))))),(61,(59,60))),(67,(66,(63,(64,(62,65)))))),(10,11)))),(58,(55,(56,57)))));
	TREE * extraState = [&R] (1,((((2,3),((6,7),(((((8,9),(((15,(12,(13,14))),(17,((32,(26,(34,(16,((27,28),(29,30)))))),(((47,(((18,19),(20,((41,42),(44,(43,45))))),(21,(22,(23,(24,25)))))),((33,(31,46)),(40,(38,(37,39))))),(35,36))))),(53,(48,(51,(49,(50,(52,54)))))))),(59,(60,61))),(67,(66,(63,(65,(62,64)))))),(10,11)))),(4,5)),(58,(57,(55,56)))));
	TREE * extraState = [&R] (1,((((2,3),(4,5)),((6,7),(((((8,9),(((15,(12,(13,14))),(17,((32,(26,(34,(16,((27,28),(29,30)))))),(((33,((47,(((18,19),(21,(25,(23,(22,24))))),(20,((41,42),(45,(43,44)))))),(35,36))),(31,46)),(37,(38,(39,40))))))),(53,(48,(50,(49,(51,(52,54)))))))),(60,(59,61))),(67,(66,(63,(64,(62,65)))))),(10,11)))),(58,(57,(55,56)))));
	TREE * extraState = [&R] (1,((((2,3),((6,7),(((((8,9),(((15,(13,(12,14))),(17,((32,(26,(34,(16,((27,28),(29,30)))))),(((((18,19),(21,((22,25),(23,24)))),(47,(20,((41,42),(44,(43,45)))))),(35,36)),(33,((31,46),((37,38),(39,40)))))))),(53,(48,(51,(49,(50,(52,54)))))))),(59,(60,61))),(67,(66,(63,(65,(62,64)))))),(10,11)))),(4,5)),(58,(56,(55,57)))));
	TREE * extraState = [&R] (1,((((2,3),(4,5)),((6,7),(((((8,9),(((15,(12,(13,14))),(17,((32,(26,(34,(16,((27,28),(29,30)))))),(((47,((19,(18,(21,(22,(25,(23,24)))))),(20,((41,42),(45,(43,44)))))),((33,(31,46)),(39,(40,(37,38))))),(35,36))))),(53,(48,(50,(49,(51,(52,54)))))))),(60,(59,61))),(67,(66,(63,(65,(62,64)))))),(10,11)))),(58,(57,(55,56)))));
	TREE * extraState = [&R] (1,(((2,3),((4,5),((6,7),(((((8,9),(((15,(14,(12,13))),(17,((32,(26,(34,(16,((27,28),(29,30)))))),((((47,((18,19),(21,(24,(22,(23,25)))))),(20,((41,42),(45,(43,44))))),(35,36)),(33,((31,46),(40,(38,(37,39))))))))),(53,(48,(50,((49,51),(52,54))))))),(61,(59,60))),(67,(66,(63,(64,(62,65)))))),(10,11))))),(58,(57,(55,56)))));
	TREE * extraState = [&R] (1,(((2,3),((4,5),((6,7),(((((8,9),(((15,(12,(13,14))),(17,((32,(26,(34,((16,(29,30)),(27,28))))),(((47,((18,(19,(21,(24,(25,(22,23)))))),(20,((41,42),(44,(43,45)))))),((33,(31,46)),(39,(38,(37,40))))),(35,36))))),(53,(48,(51,(49,(50,(52,54)))))))),(59,(60,61))),(67,(66,(63,(65,(62,64)))))),(10,11))))),(58,(57,(55,56)))));
	TREE * extraState = [&R] (1,(((2,3),((4,5),((6,7),(((((8,9),(((15,(13,(12,14))),(17,((32,(26,(34,(16,((27,28),(29,30)))))),(((33,((47,(((18,19),(20,((41,42),(44,(43,45))))),(21,(23,(25,(22,24)))))),(35,36))),(31,46)),(39,(40,(37,38))))))),(53,(48,(50,(51,(49,(52,54)))))))),(61,(59,60))),(67,(66,(63,(62,(64,65)))))),(10,11))))),(58,(56,(55,57)))));
	TREE * extraState = [&R] (1,((((2,3),((6,7),(((((8,9),(((15,(12,(13,14))),(17,((32,(26,(34,((16,(29,30)),(27,28))))),(((47,((18,19),((20,((41,42),(45,(43,44)))),(21,(24,(25,(22,23))))))),(35,36)),((31,46),(33,(40,(38,(37,39))))))))),(53,(48,(50,((49,51),(52,54))))))),(60,(59,61))),(67,(66,(63,(65,(62,64)))))),(10,11)))),(4,5)),(58,(56,(55,57)))));
	TREE * extraState = [&R] (1,(((2,3),((4,5),((6,7),(((((8,9),(((15,(12,(13,14))),(17,((32,(26,(34,(16,((27,28),(29,30)))))),(((33,((47,((18,(19,(21,(22,(24,(23,25)))))),(20,((41,42),(43,(44,45)))))),(35,36))),(31,46)),(40,(39,(37,38))))))),(53,(48,(50,((49,51),(52,54))))))),(61,(59,60))),(67,(66,(63,(62,(64,65)))))),(10,11))))),(58,(56,(55,57)))));
	TREE * extraState = [&R] (1,(((2,3),((4,5),((6,7),(((((8,9),(((15,(14,(12,13))),(17,((32,(26,(34,(16,((27,28),(29,30)))))),(((33,((47,(((18,19),(20,((41,42),(44,(43,45))))),(21,(23,(22,(24,25)))))),(35,36))),(31,46)),(38,(40,(37,39))))))),(53,(48,(51,(49,(50,(52,54)))))))),(59,(60,61))),(67,(66,(63,(62,(64,65)))))),(10,11))))),(58,(57,(55,56)))));
	TREE * extraState = [&R] (1,((((2,3),((6,7),(((((8,9),(((15,(14,(12,13))),(17,((32,(26,(34,(16,((27,28),(29,30)))))),((((47,(((18,19),(21,(23,(25,(22,24))))),(20,((41,42),(44,(43,45)))))),(35,36)),(33,(31,46))),(40,(39,(37,38))))))),(53,(50,(48,((49,51),(52,54))))))),(59,(60,61))),(67,(66,(63,(65,(62,64)))))),(10,11)))),(4,5)),(58,(55,(56,57)))));
	TREE * extraState = [&R] (1,(((2,3),((4,5),((6,7),(((((8,9),(((15,(12,(13,14))),(17,((32,(26,(34,((16,(29,30)),(27,28))))),(((47,(((18,19),(21,(23,(24,(22,25))))),(20,((41,42),(43,(44,45)))))),((33,(31,46)),(39,(40,(37,38))))),(35,36))))),(53,(48,(50,(51,(49,(52,54)))))))),(59,(60,61))),(67,(66,(63,(62,(64,65)))))),(10,11))))),(58,(57,(55,56)))));
	TREE * extraState = [&R] (1,(((2,3),((4,5),((6,7),(((((8,9),(((15,(14,(12,13))),(17,((32,(26,(34,(28,(27,(16,(29,30))))))),(33,(((47,((18,(19,(21,(24,(25,(22,23)))))),(20,((41,42),(45,(43,44)))))),(35,36)),((31,46),(38,(37,(39,40))))))))),(53,(48,(50,(51,(49,(52,54)))))))),(59,(60,61))),(67,(66,(63,(65,(62,64)))))),(10,11))))),(58,(56,(55,57)))));
	TREE * extraState = [&R] (1,(((2,3),((4,5),((6,7),(((((8,9),(((15,(12,(13,14))),(17,((32,(26,(34,(16,((27,28),(29,30)))))),((33,(((47,(((18,19),(21,((22,25),(23,24)))),(20,((41,42),(43,(44,45)))))),(35,36)),(31,46))),(37,(39,(38,40))))))),(53,(48,(50,(49,(51,(52,54)))))))),(60,(59,61))),(67,(66,(63,(62,(64,65)))))),(10,11))))),(58,(55,(56,57)))));
	TREE * extraState = [&R] (1,((((2,3),((6,7),(((((8,9),(((15,(14,(12,13))),(17,((32,(26,(34,(16,((27,28),(29,30)))))),(((((18,19),(47,(21,(23,(25,(22,24)))))),(20,((41,42),(45,(43,44))))),(35,36)),((31,46),(33,(40,(37,(38,39))))))))),(53,(48,(51,(49,(50,(52,54)))))))),(59,(60,61))),(67,(66,(63,(64,(62,65)))))),(10,11)))),(4,5)),(58,(55,(56,57)))));
	TREE * extraState = [&R] (1,((((2,3),((6,7),(((((8,9),(((15,(14,(12,13))),(17,((32,(26,(34,(28,(27,(16,(29,30))))))),((((47,((18,(19,(21,(25,(23,(22,24)))))),(20,((41,42),(45,(43,44)))))),(35,36)),(33,(31,46))),(37,(40,(38,39))))))),(53,(48,(50,(51,(49,(52,54)))))))),(59,(60,61))),(67,(66,(63,(64,(62,65)))))),(10,11)))),(4,5)),(58,(56,(55,57)))));
	TREE * extraState = [&R] (1,((((2,3),((6,7),(((((8,9),(((15,(14,(12,13))),(17,((32,(26,(34,(16,((27,28),(29,30)))))),(33,(((47,(((18,19),(21,(22,(25,(23,24))))),(20,((41,42),(45,(43,44)))))),(35,36)),((31,46),(37,(40,(38,39))))))))),(53,(48,(51,(49,(50,(52,54)))))))),(61,(59,60))),(67,(66,(63,(65,(62,64)))))),(10,11)))),(4,5)),(58,(57,(55,56)))));
	TREE * extraState = [&R] (1,((((2,3),(4,5)),((6,7),(((((8,9),(((15,(14,(12,13))),(17,((32,(26,(34,(16,((27,28),(29,30)))))),(((47,(((18,19),(20,((41,42),(43,(44,45))))),(21,(23,(25,(22,24)))))),((33,(31,46)),(38,(37,(39,40))))),(35,36))))),(53,((48,50),(49,(51,(52,54))))))),(61,(59,60))),(67,(66,(63,(65,(62,64)))))),(10,11)))),(58,(55,(56,57)))));
	TREE * extraState = [&R] (1,(((2,3),((4,5),((6,7),(((((8,9),(((15,(14,(12,13))),(17,((32,(26,(34,(16,((27,28),(29,30)))))),(((47,(((18,19),(21,(22,(23,(24,25))))),(20,((41,42),(45,(43,44)))))),((31,46),(33,(38,(40,(37,39)))))),(35,36))))),(53,(48,(51,(49,(50,(52,54)))))))),(59,(60,61))),(67,(66,(63,(65,(62,64)))))),(10,11))))),(58,(55,(56,57)))));
	TREE * extraState = [&R] (1,(((2,3),((4,5),((6,7),(((((8,9),(((15,(13,(12,14))),(17,((32,(26,(34,((16,(29,30)),(27,28))))),(33,(((47,((18,19),((20,((41,42),(44,(43,45)))),(21,(24,(23,(22,25))))))),(35,36)),((31,46),(39,(37,(38,40))))))))),(53,(50,(48,(49,(51,(52,54)))))))),(61,(59,60))),(67,(66,(63,(62,(64,65)))))),(10,11))))),(58,(56,(55,57)))));
	TREE * inapplicable = [&R] (1,((((2,3),(5,4)),((6,7),(((60,(61,59)),((63,(62,(64,65))),(67,66))),(((((53,(50,(48,(51,(49,(54,52)))))),(17,((32,(26,(34,(27,(28,(16,(29,30))))))),(((37,(38,(39,40))),(33,(46,31))),((35,36),(47,((20,((41,42),(45,(43,44)))),(18,(19,(21,(23,(25,(22,24))))))))))))),(15,(12,(14,13)))),(11,10)),(8,9))))),(58,(55,(56,57)))));
	TREE * inapplicable = [&R] (1,((((3,2),(5,4)),((7,6),(((61,(59,60)),(66,(67,(63,(65,(62,64)))))),(((((15,(13,(12,14))),(17,((32,(26,(34,((16,(30,29)),(27,28))))),(((33,(46,31)),((38,40),(37,39))),((47,((20,((42,41),(43,(45,44)))),(18,(19,(21,(24,(25,(23,22)))))))),(36,35)))))),(53,((48,50),(51,(49,(54,52)))))),(9,8)),(10,11))))),(58,(55,(56,57)))));
	TREE * inapplicable = [&R] (1,((((3,2),(4,5)),(((((67,66),(63,(62,(64,65)))),(60,(61,59))),(((((15,(13,(12,14))),(17,((32,(26,(34,(27,(28,(16,(29,30))))))),(((47,(((18,19),(21,((24,23),(25,22)))),(20,((41,42),(45,(43,44)))))),(35,36)),((33,(31,46)),(40,(39,(37,38)))))))),(53,(48,(50,((49,51),(54,52)))))),(11,10)),(8,9))),(6,7))),(58,(56,(55,57)))));
	TREE * inapplicable = [&R] (1,((((3,2),(4,5)),((7,6),(((63,((66,67),(65,(64,62)))),(59,(61,60))),(((((15,(14,(12,13))),(17,((32,(26,(34,(28,(27,(16,(29,30))))))),(((47,(((20,((43,(45,44)),(41,42))),(19,18)),(21,(24,(23,(22,25)))))),(36,35)),((33,(31,46)),(37,(38,(39,40)))))))),(53,(48,(50,(51,(49,(54,52))))))),(9,8)),(11,10))))),(58,(55,(57,56)))));
	TREE * inapplicable = [&R] (1,((((3,2),(((((11,10),(((53,((50,48),(49,(51,(54,52))))),(17,((32,(26,(34,(27,(28,(16,(29,30))))))),(((47,((18,(19,(21,(22,(25,(24,23)))))),(20,((41,42),(43,(45,44)))))),(35,36)),((33,(46,31)),((40,39),(37,38))))))),(15,(12,(14,13))))),(8,9)),((61,(59,60)),((66,67),(63,(62,(65,64)))))),(6,7))),(5,4)),(58,(57,(55,56)))));
	TREE * inapplicable = [&R] (1,((((3,2),((7,6),(((59,(61,60)),(66,(67,(63,(65,(64,62)))))),(((((17,((32,(26,(34,(27,(28,(16,(29,30))))))),(((47,((19,(18,(21,(22,(25,(23,24)))))),(20,((41,42),(45,(43,44)))))),(35,36)),((33,(31,46)),(40,(37,(39,38))))))),(15,(12,(14,13)))),(53,(50,(48,(51,(49,(54,52))))))),(8,9)),(11,10))))),(4,5)),(58,(57,(56,55)))));
	TREE * inapplicable = [&R] (1,((((2,3),(5,4)),((7,6),((((((15,(12,(14,13))),(17,((32,(26,(34,(27,(28,(16,(30,29))))))),(((33,(46,31)),(39,(38,(40,37)))),((47,(((20,((42,41),(43,(45,44)))),(18,19)),(21,(22,(23,(25,24)))))),(36,35)))))),(53,(50,(48,(51,(49,(52,54))))))),(9,8)),(10,11)),((60,(61,59)),(63,(67,(66,(62,(64,65))))))))),(58,(57,(56,55)))));
	TREE * inapplicable = [&R] (1,((((3,2),(5,4)),((((66,(67,(63,(65,(64,62))))),(61,(60,59))),(((((17,((32,(26,(34,(28,(27,(16,(29,30))))))),(((33,(31,46)),(37,(39,(40,38)))),((35,36),(47,((19,(18,(21,(22,(23,(24,25)))))),(20,((45,(43,44)),(41,42))))))))),(15,(12,(14,13)))),(53,(48,(50,((51,49),(54,52)))))),(8,9)),(11,10))),(6,7))),(58,(57,(55,56)))));
	TREE * inapplicable = [&R] (1,((((3,2),(((((((15,(14,(13,12))),(17,((32,(26,(34,((27,28),(16,(30,29)))))),(((33,(31,46)),(40,(38,(39,37)))),((47,(((21,(23,(22,(24,25)))),(19,18)),(20,((42,41),(44,(45,43)))))),(36,35)))))),(53,(48,(51,(49,(50,(54,52))))))),(10,11)),(9,8)),((59,(60,61)),((63,(62,(65,64))),(67,66)))),(7,6))),(4,5)),(58,(57,(56,55)))));
	TREE * inapplicable = [&R] (1,((((3,2),((6,7),(((59,(61,60)),((63,(62,(64,65))),(67,66))),(((((17,((((33,(31,46)),(39,(37,(38,40)))),((47,(((21,(23,(22,(25,24)))),(18,19)),(20,((41,42),(43,(44,45)))))),(36,35))),(32,(26,(34,((28,27),(16,(29,30)))))))),(53,(50,(48,(49,(51,(54,52))))))),(15,(12,(14,13)))),(10,11)),(9,8))))),(4,5)),(58,(56,(57,55)))));
	TREE * inapplicable = [&R] (1,((((3,2),(4,5)),((7,6),((((63,(62,(65,64))),(67,66)),(59,(61,60))),(((((15,(12,(13,14))),(17,((((33,(31,46)),(37,(39,(40,38)))),((47,((19,18),((21,(23,(24,(25,22)))),(20,((43,(44,45)),(41,42)))))),(35,36))),(32,(26,(34,(27,(28,(16,(29,30)))))))))),(53,((48,50),(51,(49,(54,52)))))),(11,10)),(8,9))))),(58,(55,(57,56)))));
	TREE * inapplicable = [&R] (1,(((((7,6),((((((17,((32,(26,(34,(28,(27,(16,(29,30))))))),(((47,((19,(18,(21,(24,(25,(23,22)))))),(20,((41,42),(43,(45,44)))))),(35,36)),((33,(31,46)),((40,39),(38,37)))))),(15,(14,(12,13)))),(53,(50,(48,(49,(51,(54,52))))))),(11,10)),(8,9)),((59,(61,60)),(66,(67,(63,(65,(64,62)))))))),(3,2)),(4,5)),(58,(56,(57,55)))));
	TREE * inapplicable = [&R] (1,((((2,3),((6,7),(((63,(67,(66,(64,(65,62))))),(60,(59,61))),(((((17,((32,(26,(34,((27,28),(16,(29,30)))))),(((33,(31,46)),(39,(38,(37,40)))),((47,(((21,(22,(25,(23,24)))),(20,((41,42),(43,(44,45))))),(18,19))),(35,36))))),(15,(12,(14,13)))),(53,((48,50),((51,49),(52,54))))),(8,9)),(11,10))))),(4,5)),(58,(57,(56,55)))));
	TREE * inapplicable = [&R] (1,((((3,2),((7,6),(((61,(59,60)),((67,66),(63,(62,(64,65))))),(((((53,(48,(50,(51,(49,(52,54)))))),(15,(13,(12,14)))),(17,((32,(26,(34,((16,(30,29)),(28,27))))),(((33,(31,46)),(39,(37,(38,40)))),((47,(((19,18),(20,((42,41),(44,(43,45))))),(21,(23,(25,(22,24)))))),(36,35)))))),(10,11)),(9,8))))),(4,5)),(58,(55,(56,57)))));
	TREE * inapplicable = [&R] (1,((((2,3),((6,7),((((((53,(48,(50,(49,(51,(52,54)))))),(17,((32,(26,(34,(28,(27,(16,(30,29))))))),(((36,35),(47,(((20,((42,41),(44,(45,43)))),(21,(23,(25,(24,22))))),(18,19)))),((33,(31,46)),(40,(37,(39,38)))))))),(15,(12,(14,13)))),(10,11)),(9,8)),((59,(61,60)),((63,(62,(65,64))),(66,67)))))),(4,5)),(58,(55,(57,56)))));
	TREE * inapplicable = [&R] (1,((((3,2),(4,5)),((7,6),(((60,(59,61)),(66,(67,(63,(65,(62,64)))))),(((((15,(12,(14,13))),(53,(50,(48,((49,51),(54,52)))))),(17,((32,(26,(34,(16,((27,28),(30,29)))))),(((33,(31,46)),(37,(40,(38,39)))),((47,(((20,((43,(44,45)),(41,42))),(21,(23,(24,(25,22))))),(18,19))),(36,35)))))),(11,10)),(9,8))))),(58,(57,(56,55)))));
	TREE * inapplicable = [&R] (1,((((3,2),(4,5)),((7,6),((((((17,((32,(26,(34,(28,(27,(16,(29,30))))))),(((47,((18,(19,(21,(24,(23,(25,22)))))),(20,((41,42),(45,(43,44)))))),(35,36)),((33,(31,46)),(39,(38,(40,37))))))),(15,(12,(13,14)))),(53,((48,50),(51,(49,(54,52)))))),(8,9)),(11,10)),((60,(59,61)),(66,(67,(63,(65,(64,62))))))))),(58,(56,(55,57)))));
	TREE * inapplicable = [&R] (1,((((3,2),((6,7),((((((15,(13,(12,14))),(17,((32,(26,(34,(16,((28,27),(29,30)))))),(((36,35),(47,((20,((41,42),(44,(45,43)))),((19,18),(21,(24,(25,(22,23)))))))),((33,(31,46)),(39,(38,(37,40)))))))),(53,(50,(48,(49,(51,(54,52))))))),(9,8)),(11,10)),((61,(59,60)),(66,(67,(63,(65,(64,62))))))))),(4,5)),(58,(57,(56,55)))));
	TREE * inapplicable = [&R] (1,((((3,2),(4,5)),((((((53,(50,(48,(51,(49,(54,52)))))),((17,((32,(26,(34,((27,28),(16,(29,30)))))),(((47,((19,(18,(21,(25,(24,(22,23)))))),(20,((41,42),(43,(45,44)))))),(35,36)),((33,(31,46)),(38,(40,(39,37))))))),(15,(13,(14,12))))),(8,9)),(11,10)),((61,(59,60)),(63,(67,(66,(65,(64,62))))))),(6,7))),(58,(55,(56,57)))));
	TREE * inapplicable = [&R] (1,((((3,2),((7,6),(((59,(61,60)),(63,(67,(66,(65,(62,64)))))),(((((17,((((33,(46,31)),(40,(39,(38,37)))),((47,(((21,(22,(24,(23,25)))),(20,((42,41),(45,(43,44))))),(18,19))),(36,35))),(32,(26,(34,(27,(28,(16,(30,29))))))))),(15,(12,(13,14)))),(53,((48,50),((49,51),(52,54))))),(9,8)),(10,11))))),(5,4)),(58,(56,(57,55)))));
	TREE * inapplicable = [&R] (1,((((3,2),((7,6),(((60,(61,59)),(63,((66,67),(65,(64,62))))),(((((15,(13,(12,14))),(17,((32,(26,(34,(27,(28,(16,(29,30))))))),(((33,(46,31)),(39,(37,(40,38)))),((47,(((18,19),(20,((44,(45,43)),(41,42)))),(21,(25,(22,(24,23)))))),(35,36)))))),(53,((50,48),(49,(51,(54,52)))))),(8,9)),(11,10))))),(5,4)),(58,(55,(57,56)))));
	TREE * inapplicable = [&R] (1,((((2,3),((6,7),((((9,8),(((17,((((33,(46,31)),(38,(40,(37,39)))),((47,(((21,(24,(23,(25,22)))),(20,((41,42),(44,(43,45))))),(19,18))),(36,35))),(32,(26,(34,(27,(28,(16,(30,29))))))))),(15,(14,(13,12)))),(53,(48,(50,(49,(51,(52,54)))))))),(10,11)),((59,(60,61)),(63,(67,(66,(62,(64,65))))))))),(5,4)),(58,(56,(55,57)))));
	TREE * inapplicable = [&R] (1,((((3,2),((6,7),((((((15,(14,(13,12))),(17,((32,(26,(34,(28,(27,(16,(29,30))))))),(((33,(31,46)),(39,(37,(40,38)))),((47,((20,((41,42),(44,(43,45)))),(19,(18,(21,(22,(25,(24,23)))))))),(35,36)))))),(53,(50,(48,(51,(49,(54,52))))))),(8,9)),(11,10)),((61,(60,59)),((63,(62,(64,65))),(66,67)))))),(4,5)),(58,(55,(57,56)))));
	TREE * inapplicable = [&R] (1,((((3,2),(((((((17,((((33,(31,46)),(37,(39,(38,40)))),((47,(((21,((24,25),(23,22))),(19,18)),(20,((42,41),(44,(43,45)))))),(35,36))),(32,(26,(34,(28,(27,(16,(29,30))))))))),(15,(14,(13,12)))),(53,(50,(48,(49,(51,(54,52))))))),(8,9)),(11,10)),((61,(60,59)),(63,((67,66),(62,(64,65)))))),(7,6))),(4,5)),(58,(57,(56,55)))));
	TREE * inapplicable = [&R] (1,((((2,3),(5,4)),((6,7),((((((15,(13,(14,12))),(53,((50,48),(49,(51,(52,54)))))),(17,((((33,(46,31)),((40,38),(37,39))),((47,((19,(18,(21,(25,(23,(24,22)))))),(20,((42,41),(44,(43,45)))))),(36,35))),(32,(26,(34,(28,(27,(16,(30,29)))))))))),(10,11)),(9,8)),((61,(60,59)),(66,(67,(63,(65,(62,64))))))))),(58,(55,(56,57)))));
	TREE * inapplicable = [&R] (1,((((3,2),(4,5)),((7,6),((((8,9),(((17,((((33,(31,46)),(40,(37,(39,38)))),((47,((20,((42,41),(43,(44,45)))),(18,(19,(21,(22,(25,(23,24)))))))),(35,36))),(32,(26,(34,(16,((29,30),(27,28)))))))),(15,(14,(13,12)))),(53,(50,(48,(49,(51,(52,54)))))))),(11,10)),((60,(59,61)),(63,(67,(66,(65,(64,62))))))))),(58,(57,(55,56)))));
	TREE * inapplicable = [&R] (1,((((3,2),(4,5)),(((((67,66),(63,(62,(64,65)))),(60,(61,59))),(((((15,(13,(12,14))),(17,((32,(26,(34,((28,27),(16,(29,30)))))),(((47,((18,(19,(21,(25,(23,(24,22)))))),(20,((41,42),(45,(43,44)))))),(35,36)),((33,(31,46)),(40,(38,(37,39)))))))),(53,(48,(50,(49,(51,(54,52))))))),(8,9)),(11,10))),(6,7))),(58,(56,(55,57)))));
	TREE * inapplicable = [&R] (1,((((3,2),(5,4)),((7,6),((((((53,(48,(50,(51,(49,(52,54)))))),(15,(12,(14,13)))),(17,((32,(26,(34,(27,(28,(16,(30,29))))))),(((47,((18,(19,(21,(24,(23,(25,22)))))),(20,((42,41),(45,(44,43)))))),(35,36)),((33,(46,31)),(37,(39,(38,40)))))))),(11,10)),(8,9)),((59,(60,61)),((63,(62,(64,65))),(67,66)))))),(58,(57,(56,55)))));
	TREE * inapplicable = [&R] (1,((((3,2),(4,5)),((7,6),((((((53,(48,(51,(49,(50,(54,52)))))),(17,((32,(26,(34,((27,28),(16,(29,30)))))),(((33,(46,31)),(38,(40,(39,37)))),((47,((18,(19,(21,(22,(23,(24,25)))))),(20,((41,42),(44,(43,45)))))),(35,36)))))),(15,(13,(14,12)))),(11,10)),(8,9)),(((67,66),(63,(62,(65,64)))),(61,(59,60)))))),(58,(56,(57,55)))));
	TREE * inapplicable = [&R] (1,((((3,2),((7,6),((((((15,(13,(12,14))),(17,((((33,(31,46)),(40,(37,(38,39)))),((47,(((20,((41,42),(44,(43,45)))),(21,(22,(25,(23,24))))),(19,18))),(35,36))),(32,(26,(34,((27,28),(16,(29,30))))))))),(53,(48,(50,((49,51),(54,52)))))),(11,10)),(8,9)),((59,(61,60)),(66,(67,(63,(65,(64,62))))))))),(4,5)),(58,(56,(55,57)))));
	TREE * inapplicable = [&R] (1,((((3,2),(4,5)),((7,6),((((((53,(50,(48,((51,49),(54,52))))),(15,(12,(13,14)))),(17,((((33,(31,46)),(38,(40,(37,39)))),((47,((19,(18,(21,(23,(24,(25,22)))))),(20,((43,(45,44)),(41,42))))),(35,36))),(32,(26,(34,((16,(29,30)),(28,27)))))))),(11,10)),(8,9)),((60,(59,61)),((63,(62,(65,64))),(67,66)))))),(58,(55,(56,57)))));
	TREE * inapplicable = [&R] (1,((((2,3),(((((((17,((((33,(46,31)),(38,(39,(37,40)))),((47,((20,((41,42),(45,(44,43)))),(19,(18,(21,(24,(25,(23,22)))))))),(36,35))),(32,(26,(34,(28,(27,(16,(30,29))))))))),(15,(14,(12,13)))),(53,(48,(51,(49,(50,(52,54))))))),(9,8)),(10,11)),((59,(60,61)),(63,((67,66),(62,(64,65)))))),(6,7))),(5,4)),(58,(55,(57,56)))));
	TREE * inapplicable = [&R] (1,((((2,3),((6,7),(((61,(60,59)),((63,(62,(64,65))),(67,66))),(((((17,((((33,(46,31)),(37,(38,(39,40)))),((47,(((19,18),(20,((42,41),(43,(44,45))))),(21,(22,(23,(24,25)))))),(35,36))),(32,(26,(34,(28,(27,(16,(29,30))))))))),(15,(13,(14,12)))),(53,((48,50),(51,(49,(54,52)))))),(8,9)),(10,11))))),(5,4)),(58,(57,(56,55)))));
	TREE * inapplicable = [&R] (1,(((((7,6),((((((15,(12,(13,14))),(17,((((33,(46,31)),(37,(40,(38,39)))),((47,(((20,((42,41),(44,(45,43)))),(21,(24,(22,(25,23))))),(19,18))),(35,36))),(32,(26,(34,(28,(27,(16,(30,29)))))))))),(53,(50,(48,(51,(49,(52,54))))))),(11,10)),(8,9)),((60,(59,61)),((63,(62,(65,64))),(67,66))))),(3,2)),(5,4)),(58,(55,(57,56)))));
	TREE * inapplicable = [&R] (1,((((2,3),(5,4)),((6,7),((((((53,(48,(50,((51,49),(52,54))))),(15,(13,(12,14)))),(17,((((33,(46,31)),((38,39),(40,37))),((47,((19,(18,(21,(23,(22,(24,25)))))),(20,((42,41),(43,(44,45)))))),(36,35))),(32,(26,(34,((27,28),(16,(30,29))))))))),(10,11)),(9,8)),((60,(61,59)),(66,(67,(63,(65,(64,62))))))))),(58,(55,(56,57)))));
	TREE * inapplicable = [&R] (1,((((3,2),(4,5)),((7,6),((((((15,(14,(12,13))),(53,(50,(48,(51,(49,(54,52))))))),(17,((((33,(31,46)),(40,(39,(37,38)))),((47,(((20,((44,(45,43)),(41,42))),(21,(24,(23,(25,22))))),(18,19))),(35,36))),(32,(26,(34,(28,(27,(16,(29,30)))))))))),(11,10)),(8,9)),((59,(61,60)),((63,(62,(65,64))),(67,66)))))),(58,(55,(56,57)))));
	TREE * inapplicable = [&R] (1,((((2,3),((6,7),(((61,(60,59)),(66,(67,(63,(65,(62,64)))))),(((((17,((((33,(46,31)),(40,(37,(39,38)))),((47,(((20,((41,42),(45,(43,44)))),(18,19)),(21,(25,(23,(22,24)))))),(36,35))),(32,(26,(34,(28,(27,(16,(30,29))))))))),(53,((50,48),(49,(51,(54,52)))))),(15,(12,(14,13)))),(10,11)),(9,8))))),(5,4)),(58,(55,(56,57)))));
	TREE * inapplicable = [&R] (1,((((7,6),((((((17,((32,(26,(34,((28,27),(16,(29,30)))))),(((47,(((18,19),(21,(22,(23,(24,25))))),(20,((41,42),(44,(45,43)))))),(35,36)),((33,(31,46)),(40,(37,(38,39))))))),(15,(13,(12,14)))),(53,(48,(50,(51,(49,(54,52))))))),(11,10)),(8,9)),((60,(59,61)),(66,(67,(63,(65,(64,62)))))))),((3,2),(4,5))),(58,(57,(55,56)))));
	TREE * inapplicable = [&R] (1,((((2,3),((6,7),(((61,(60,59)),((63,(62,(64,65))),(66,67))),(((((53,((48,50),((51,49),(54,52)))),(17,((((47,((19,(18,(21,((24,23),(25,22))))),(20,((44,(45,43)),(42,41))))),(36,35)),((33,(31,46)),(37,(40,(38,39))))),(32,(26,(34,(28,(27,(16,(30,29)))))))))),(15,(13,(14,12)))),(10,11)),(9,8))))),(4,5)),(58,(56,(55,57)))));
	TREE * inapplicable = [&R] (1,((((2,3),(4,5)),((((63,(67,(66,(62,(65,64))))),(60,(59,61))),(((((17,((32,(26,(34,((16,(30,29)),(28,27))))),(((33,(31,46)),(39,(37,(40,38)))),((47,(((19,18),(21,(22,(24,(23,25))))),(20,((45,(43,44)),(42,41))))),(36,35))))),(15,(14,(12,13)))),(53,((48,50),(51,(49,(54,52)))))),(9,8)),(10,11))),(7,6))),(58,(55,(56,57)))));
	TREE * inapplicable = [&R] (1,((((3,2),((7,6),(((59,(60,61)),((63,(62,(65,64))),(66,67))),(((((15,(13,(14,12))),(17,((((47,(((21,(23,(24,(22,25)))),(19,18)),(20,((41,42),(43,(45,44)))))),(36,35)),((33,(31,46)),(39,(37,(40,38))))),(32,(26,(34,((27,28),(16,(30,29))))))))),(53,(48,(50,(49,(51,(52,54))))))),(11,10)),(9,8))))),(4,5)),(58,(55,(56,57)))));
	TREE * inapplicable = [&R] (1,((((3,2),((6,7),(((61,(59,60)),(63,((67,66),(64,(65,62))))),(((((15,(13,(14,12))),(17,((((33,(31,46)),(38,(39,(37,40)))),((47,(((20,((41,42),(44,(45,43)))),(18,19)),(21,((22,24),(23,25))))),(36,35))),(32,(26,(34,(16,((28,27),(29,30))))))))),(53,(48,(50,((49,51),(54,52)))))),(9,8)),(10,11))))),(4,5)),(58,(56,(57,55)))));
	TREE * inapplicable = [&R] (1,((((2,3),(5,4)),((6,7),(((59,(61,60)),(66,(67,(63,(65,(64,62)))))),(((((15,(12,(14,13))),(17,((32,(26,(34,(28,(27,(16,(29,30))))))),(((33,(46,31)),(39,(40,(38,37)))),((47,((19,(18,(21,(23,(22,(24,25)))))),(20,((41,42),(44,(45,43)))))),(35,36)))))),(53,((48,50),((49,51),(54,52))))),(11,10)),(8,9))))),(58,(57,(55,56)))));
	TREE * inapplicable = [&R] (1,((((3,2),(((((((17,((((33,(31,46)),(39,(40,(38,37)))),((47,((20,((41,42),(44,(45,43)))),(19,(18,(21,(25,(24,(23,22)))))))),(35,36))),(32,(26,(34,(28,(27,(16,(29,30))))))))),(15,(14,(12,13)))),(53,(48,(50,((51,49),(54,52)))))),(8,9)),(11,10)),((60,(61,59)),((66,67),(63,(62,(64,65)))))),(7,6))),(4,5)),(58,(56,(55,57)))));
	TREE * inapplicable = [&R] (1,((((2,3),(5,4)),((6,7),((((((17,((((33,(46,31)),(37,(39,(40,38)))),((47,(((20,((43,(45,44)),(42,41))),(18,19)),(21,(24,(23,(25,22)))))),(36,35))),(32,(26,(34,(27,(28,(16,(30,29))))))))),(15,(12,(13,14)))),(53,((50,48),(51,(49,(52,54)))))),(9,8)),(10,11)),((59,(60,61)),(63,((67,66),(65,(62,64)))))))),(58,(56,(55,57)))));
	TREE * inapplicable = [&R] (1,((((2,3),(((((((15,(14,(12,13))),(17,((32,(26,(34,(28,(27,(16,(30,29))))))),(((47,((19,(18,(21,((25,23),(22,24))))),(20,((42,41),(43,(45,44)))))),(35,36)),((33,(46,31)),(37,(38,(39,40)))))))),(53,(50,(48,(51,(49,(52,54))))))),(10,11)),(8,9)),((66,(67,(63,(65,(64,62))))),(61,(60,59)))),(7,6))),(5,4)),(58,(55,(57,56)))));
	TREE * inapplicable = [&R] (1,((((3,2),((7,6),((((((17,((((33,(31,46)),(37,(39,(38,40)))),((47,(((18,19),(21,(25,(22,(23,24))))),(20,((43,(44,45)),(41,42))))),(35,36))),(32,(26,(34,((27,28),(16,(29,30)))))))),(15,(14,(13,12)))),(53,((48,50),((51,49),(54,52))))),(8,9)),(11,10)),((61,(60,59)),(63,(67,(66,(64,(65,62))))))))),(4,5)),(58,(55,(56,57)))));
	TREE * inapplicable = [&R] (1,(((((7,6),((((((17,((((33,(46,31)),((37,38),(40,39))),((47,(((21,(23,(24,(25,22)))),(19,18)),(20,((42,41),(44,(45,43)))))),(35,36))),(32,(26,(34,(27,(28,(16,(30,29))))))))),(53,(50,(48,(49,(51,(52,54))))))),(15,(12,(13,14)))),(11,10)),(8,9)),((60,(59,61)),((63,(62,(65,64))),(67,66))))),(3,2)),(5,4)),(58,(57,(55,56)))));
	TREE * inapplicable = [&R] (1,((((2,3),((6,7),(((59,(60,61)),((67,66),(63,(62,(65,64))))),(((((15,(14,(12,13))),(17,((((33,(31,46)),(39,(37,(38,40)))),((47,(((18,19),(20,((41,42),(44,(43,45))))),(21,((23,22),(25,24))))),(35,36))),(32,(26,(34,(28,(27,(16,(29,30)))))))))),(53,(48,(50,((49,51),(52,54)))))),(8,9)),(11,10))))),(4,5)),(58,(56,(55,57)))));
	TREE * inapplicable = [&R] (1,((((2,3),(4,5)),((((63,(67,(66,(64,(62,65))))),(61,(59,60))),(((((17,((32,(26,(34,(28,(27,(16,(30,29))))))),(((33,(31,46)),(38,(37,(39,40)))),((47,(((21,((24,23),(22,25))),(20,((45,(43,44)),(42,41)))),(18,19))),(36,35))))),(15,(14,(12,13)))),(53,(50,(48,(51,(49,(54,52))))))),(9,8)),(10,11))),(7,6))),(58,(56,(57,55)))));
END;
