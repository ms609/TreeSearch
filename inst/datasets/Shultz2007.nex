#NEXUS
begin data;
  dimensions ntax=59 nchar=202;
  format datatype=standard gap=- missing=? Interleave=no;
  matrix
    Weinbergina         0001000?110?????0???????-??????????-?????????0?00????????????????????????????????1?00?00010???3000000?????0?????-?121000?????0????????????????????????????????????????????????????????????????????????????
    Limuloides          0001000?110?????1???????-??????????-??????????????????????????????????????????????????????????3000000?????0?????-?121000?????0????????????????????????????????????????????????????????????????????????????
    Euproops            0001000?110?????1???????-??????????-??????????????????????????????????????????????????????????2000100?????0?????-?101000?????0?????????1??????????????????????????????????????????????????????????????????
    Limulus             10010000110000-010000000-0000000010-00000010000000011?11000101000100210001011011000-0011011000200010000110000000-?00100001110001100106112110100-0000000000000000001020000000010000001000010000000000011101
    Tachypleus          10010000110000-010000000-0000000010-00000010000000011?11000101000100210001011011000-0011011000200010000110000000-?00100001110001100106112110100-0000000000000000001000000000010000001000010000000000011101
    Baltoeurypterus     0000000?11000??000000???-????000000-???00010000010011?000?0?0?0110002000000??????10000000100??5000000????000?0?0-?031000???010?????????1?010?????00000????0?????1???????????????????1???0??0??00??????????
    Stylonurus          0000000?11000??00000????-?????00?00-???0001000000?01??000?0?0?011000?00???0??????1?00?000100??5000000????000???0-?031000???010?????????1?010?????000??????0?????1?????????????????????????????????????????
    Chasmataspis        0000000?110?????1???????-??????????-???????????????1????????????????????????????????????0?1???6?01000?????0?????-?141000??00?0?????????1??1??????0????????0???????????????????????????????????????????????
    Diploaspis          000?000?1?0?????1???????-??????????-????????????1?????????????????????????????????????00010???6?01000?????0?????-?041000??00?0?????????1??1???????????????0???????????????????????????????????????????????
    Octoberaspis        00?1000?1?0?????1???????-??????????-????????????1?????????????????????????????????????0?0?????6?01000?????0?????-?041000??00?0?????????1??1???????????????0?????1?????????????????????????????????????????
    Prokoenenia         00001100000010-000000000?0000000000-??0000100?00000000000?01100000002000000110??0101000001001?400000000001001010-?0212010000001?0??10310-00-0010000100100100???00000-000?????????0010001100000101100011100
    Eukoenenia          00001100000010-00000000000000000000-000000100?00000000000001100000002000000?101101010000010010400000000001001000-00212010000001?00110310-00-0010000100100100???00000-000?????????0010001100000101100010--0
    Plesiosiro          0011000?0000????????????-????00???0-????0??????000000??0??????000??0??0??????????1?10?00??0?????00000???01?0?0?0-000?-01???????????????1?????????00???????0?????0?????????????????????????????????????????
    Palaeocharinus      0000000000001??001100??????00000?00-??00001?00?000000?000?0?0?000?002?02000??????1000?00010???4100010???0100?010-0110-01110000?????????1?01??1???000??????0?????0???????????????????????1?0???11??????????
    Gilboarachne        000000000000???00110???????00000?00-??0000???0?000000?000?0?0?????002?02000??????1000?00010???4100010???0100?0?0-0110-01110000?????????1?01??1???00???????0?????0?????????????????????????????????????????
    Liphistius          00000000000011000110000000100000000-000001100000000000000110000001002200100110110100000001001150100000000100101101000-011100001000000301101201100000111001000000011131000010000001011001101000111010011110
    Aphonopelma         00000000000011000110000000100000000-000001100000000000000110000001002200100110110100000001001150100000000110101110000-011100001000000311101201100000111001000000011131000010000001011001101000101110011110
    Hypochilus          00000000000011000110000000100000000-000001100000000000000110000001002200100110110100000001001150100000000110101110000-01110000100000030110120110000011100100000001113100001000000101?001101000111010011110
    Charinus            0010000000001100011000001000000000100?010010010000000?0010110000010023100010101101011000000110500000000001000010-0020-011100001000101501001201100000??1011001100011131000011100001011001100000111000101110
    Phrynus             0010000000001100011000001000000000100101000-01000000010010110000010023100010101101011000000010500000000001000000-0020-011100001000101501001201100000??1011001100011131000011100001010001100000111000101110
    Stenochrus          001011000002110001100000?00001000011010000100100000000001?110000010123000000101101011000000011500000010001000000-00212111000001001?01410-014?1110000001111001110011131000011?0000101000110000011100010?000
    Protoschizomus      001011000002110001100000?00001000011??000010010000000?00??1100000?012300000?????0101100000001?500000010001000000-0021211100000100??0?5?0-00-011100000011?1001110011131000011?000010100011000001??00010?000
    Mastigoproctus      0011000000021100011000001000010000100100000-01000000010011110000010123000000101101011000000011500000010001000000-00212011100001001101511001?01110000001111001110011131000011100001010001100000111000101000
    Proschizomus        0010000?0002???001???????????100??1????000???10000000??0???????????????????????????1??00??0???5000000???0100?0?0-00212?1??0??????????????????????00???????0?????0?????????????????????????????????????????
    Terpsicroton        0000000?001?????0???????-?????????0-????0????0?000000??0??????011??0???????????????????0??0???51?0001???000?????-0120-01??0??????????5?0-?13?????00?????????????0?????????????????????????????????????????
    Poliochera          0000000?001?????0???????-????1????0-????0????0?000000??0??????011??0???????????????????0??0???51?0001???000?????-0120-01??0??????????5?0-?13?????00?????????????0?????????????????????????????????????????
    Cryptocellus        000000000012110001000??0-00001?0000-0?000010001000000?00000100011000200200000-1101010000010010512000100000000000-0120-01000003?????1?500-014?10-0000111001000??001112000?0?0??0101010001100000000000000--0
    Ricinoides          000000000012110001000??0-00001?0000-0?000010001000000?00000100011000200200000-1101010000010010512000100000000000-0120-01000003?????1?500-014?10-0000111001000??001112000?0?0??0101010001100000000000000--0
    Neocarus            000010000000110000200000-0000110100-0?000010010000000?000?0100011?112002000??0??0101000011011?400000000000000000-0000-01000005????????00-013010-000010100111???00000-01000????0111010000100000000000000--0
    Siamacarus          000010000000110000200000-000011?100-0?000010010000000?000?0?0?011?112?02000??0???1010?001101??400000000000000000-0000-01000005????????00-012?1100000101?0111???00?00-?1?0?????01?101??00100000000?????????
    Australothyrus      010000010000010000200000-0000110100-0?000011000000000?000?0?0?000?102002000??0??0?1000001101???00000000000010000-0000-01000003????????00-014?10-000010100110???00000-01000????0??101000110000000000???????
    Allothyrus          010000010000110000200000-0000110100-0?000011000000000?000?0?0?000?102002000??0??0?1000001101???00000000000010000-0000-01000003????????00-00-010-0000101?0110???00?00-?1?0?????0??1010001100000000?????????
    Glyptholaspis       0100000000001100002000?0-0000110100-0?000011000000000?000001000000102002000110110?100000110110?00000000000000000-0000-01000003??00????00-00-010-00000010011000000000-01000?0000101010001100000000000000--0
    Amblyomma           00000000000000-000200000-0000110000-0?00000-000000000?000001000000102002000110110?100000110110000000000000000000-0000-01000003??00?1??00-014010-00001010011000000000-0100000000101010001100000000000000--0
    Argas               00000000000000-000200000-0000110000-0?00000-000000000?000001000000102002000110110?100000110010000000000000000000-0000-01000003??00?1??00-014010-0000101?011000000?00-?1?0?00000101010001100000000??0000--0
    Alycus              00000?10000001100?200?00-0000110100-0?00000-000000000?00000100001?002002000???11000-0000110010100000000000000110-0000-01000000????????00-013?1101000001?0100????0???????0?????011??10010100000000????00--0
    Allothrombium       0000???0000001100?200?0?-0000110000-0?00000-000000000?00000100111000200200011011000-0000110010?00000000000000110-0000-01000004????????00-013011010000010010010000000-00000?0100110110011100000000000000--0
    Microcaeculus       0000??00000001100?200?0?-0000110000-0?00000-000000000?00000100111000200200011011000-0000110010?00000000000000110-0000-01000004????????01201301101000001001001??00?00-00?00?01001?011001?100000000000000--0
    Palaeacarus         00001?10000401100?200?00-0000110100-0?00000-000000000?00000100111000200200011011000-0000110010?00000000000000110-0000-01000000????????01?0???1101000001?010110000?00-?0?0??0100110010010100000000??0000--0
    Archegozetes        00001?10000401100?200?00-0000110100-0?00000-000000000?00000100000000200200011011000-0000110010?00000000000000110-0000-01000000????????00-00-011010000010010110000000-0000000100110010010100000000000000--0
    Cyphophthalmus      00001001000100-0000010?0-0000000000-10000010000001100000000100000000200100010-1101000000010011200000000000000000-0001301000001?00001010??0???10-0000001001110001001100010??0??000000100?100110000001000--0
    Chileogovea         00001001000100-000001010-0000000000-10000010000001100000000100000000200100010-1101000000010011200000000000000000-0001301000001?00001010??0???10-00000010011100010????00?0??0??000000100?100110000001000--0
    Caddo               00001001000000-0000010?0-0000000000-?000001000000110000000010000000010010001201101010100010011200000000000000000-0001301000001?000010101?00-010-00000010011100010????00000?0??000000100010011010?001000--0
    Leiobunum           00001001000000-000001010-0000000000-0000001000000110000000010000000010010001201101010100010011200000000000000000-0001301000001?000010?01?00-010-00000010011100010000-0000010000000001000100110101001000--0
    Sclerobunus         00000001000000-0000010?0-0000000001-?000001000000110000000010000000010010001201101010100010011200000000000000000-0001301000001?000010001?00-010-00000010011100010?00-000001000000000100010011010?001000--0
    Gonyleptes          00000001000000-000001010-0000000001-?000001000000110000000010000000010010001201101010100010011200000000000000000-0001301000001?000010001?00-010-00000010011100010100-00000100000000?100010011010?001000--0
    Centruroides        00001000000100-100000111-0000000000-1000100-00000110000000010000010010010001211001000100010011600000001000000000-00311010011001000000511001111100010111101101000001011010000001001001001100111001001001100
    Hadrurus            00001000000100-100000111-0000000000-1000100-00000110000000010000010010010001211001000100010011600000001000000000-00311010011001000000511001111100010111101101000001011011100001001001001100111001001001100
    Heterometrus        00001000000100-100000111-0000000000-1000100-00000110000000010000010010010001211001000100010011600000001000000000-0031101001100100000051100111110001011110110100000102?011100001001001001100111001001001100
    Prearcturus         0000100?0001????0???????-????000?00-????100-000??1000??????????????????????????????????????????000000????00?????-003110??????????????????????????0??????????????0?????????????????????????????????????????
    Palaeoscorpius      0000?00?000?????0???????-????000?00-????100-00000?0????0??????000?00??0??????????1?00?00010???6000000???0000?0??-003110????????????????1?????????01???????0?????0?????????????????????????????????????????
    Stoermeroscorpio    0000?00?0000????000?????-????000?00-????100-00000?00???0??????000?00??0??????????1?00?00010???6000000???0000?0??-003110????????????????1??10?????01???????1?????0?????????????????????????????????????????
    Proscorpius         0000?00?0000????000?????-????000?00-????100-00000?01???0??????000?00??0??????????1?00?00010???6000000???0000?0??-003110????????????????1??10?????01???????1?????0?????????????????????????????????????????
    Chthonius           00001000000310-001200000-1010001000-0000100-0001000000000001000001001001000121000?000000010111500000000000000000-0000-01000002100001?700-01301100000001001001000001120001111000000001001100000000000000--0
    Neobisium           00001000000310-001210000-1010001000-0010100-00010000000000010000010010010001210001000000010111500000000000000000-0000-01000002100001?700-01301100000001001001000001120001111000000001001100000000000000--0
    Feaella             00001000000310-001200000-1010001000-0000100-000100000000000100000100100100012100000-0000010111500000000000000000-0000-01000002100001?700-01301100000001001001000001120001111000000001001100000000000000--0
    Chelifer            00001000000310-001210000-1010001000-0010100-000100000000000100000100100100012100000-0000010111500000000000000000-0000-01000002100001?700-01401100000001001001000001120001111000000001001100000000000000--0
    Eremocosta          00001100000310-001210000-0001001000-000000101?0100000000000100011000000200010-1011010100010111400000000000000000-0000-01000002?00??1?3111013010-01000010010000000000-0010010100001000101100001000000011000
    Galeodes            00001100000310-001210000-0001001000-000000101?0100000000000100011000000200010-1011010100010111400000000000000000-0000-01000002?00??1?3111013010-01000010010000000000-0010010100001000101100001000000011000
;                                                                     
end;

BEGIN TAXA;
	DIMENSIONS NTAX = 59;
	TAXLABELS
		Weinbergina
		Limuloides
		Euproops
		Limulus
		Tachypleus
		Baltoeurypterus
		Stylonurus
		Chasmataspis
		Diploaspis
		Octoberaspis
		Prokoenenia
		Eukoenenia
		Plesiosiro
		Palaeocharinus
		Gilboarachne
		Liphistius
		Aphonopelma
		Hypochilus
		Charinus
		Phrynus
		Stenochrus
		Protoschizomus
		Mastigoproctus
		Proschizomus
		Terpsicroton
		Poliochera
		Cryptocellus
		Ricinoides
		Neocarus
		Siamacarus
		Australothyrus
		Allothyrus
		Glyptholaspis
		Amblyomma
		Argas
		Alycus
		Allothrombium
		Microcaeculus
		Palaeacarus
		Archegozetes
		Cyphophthalmus
		Chileogovea
		Caddo
		Leiobunum
		Sclerobunus
		Gonyleptes
		Centruroides
		Hadrurus
		Heterometrus
		Prearcturus
		Palaeoscorpius
		Stoermeroscorpio
		Proscorpius
		Chthonius
		Neobisium
		Feaella
		Chelifer
		Eremocosta
		Galeodes
	;
END;
BEGIN TREES;
	TRANSLATE
		1	Weinbergina,
		2	Limuloides,
		3	Euproops,
		4	Limulus,
		5	Tachypleus,
		6	Baltoeurypterus,
		7	Stylonurus,
		8	Chasmataspis,
		9	Diploaspis,
		10	Octoberaspis,
		11	Prokoenenia,
		12	Eukoenenia,
		13	Plesiosiro,
		14	Palaeocharinus,
		15	Gilboarachne,
		16	Liphistius,
		17	Aphonopelma,
		18	Hypochilus,
		19	Charinus,
		20	Phrynus,
		21	Stenochrus,
		22	Protoschizomus,
		23	Mastigoproctus,
		24	Proschizomus,
		25	Terpsicroton,
		26	Poliochera,
		27	Cryptocellus,
		28	Ricinoides,
		29	Neocarus,
		30	Siamacarus,
		31	Australothyrus,
		32	Allothyrus,
		33	Glyptholaspis,
		34	Amblyomma,
		35	Argas,
		36	Alycus,
		37	Allothrombium,
		38	Microcaeculus,
		39	Palaeacarus,
		40	Archegozetes,
		41	Cyphophthalmus,
		42	Chileogovea,
		43	Caddo,
		44	Leiobunum,
		45	Sclerobunus,
		46	Gonyleptes,
		47	Centruroides,
		48	Hadrurus,
		49	Heterometrus,
		50	Prearcturus,
		51	Palaeoscorpius,
		52	Stoermeroscorpio,
		53	Proscorpius,
		54	Chthonius,
		55	Neobisium,
		56	Feaella,
		57	Chelifer,
		58	Eremocosta,
		59	Galeodes
	;
  TREE * ambiguous = [&R] (1,(2,(3,((4,5),((7,(6,(8,(9,10)))),((((11,12),((((25,26),(27,28)),((29,30),((33,(31,32)),(34,35)))),((36,(39,40)),(37,38)))),((((13,((19,20),(23,(24,(21,22))))),(16,(17,18))),(14,15)),((55,(57,(54,56))),(58,59)))),(((41,42),(43,(44,(45,46)))),(51,(53,(52,(50,(47,(48,49)))))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,((4,5),((7,(6,(9,(8,10)))),((((11,12),(((25,(26,(27,28))),((29,30),((33,(31,32)),(34,35)))),((36,(39,40)),(37,38)))),((((13,((19,20),((21,22),(23,24)))),(17,(16,18))),(14,15)),(((54,56),(55,57)),(58,59)))),(((41,42),(43,(44,(45,46)))),((50,(51,(47,(48,49)))),(52,53)))))))));
	TREE * ambiguous = [&R] (1,(2,(3,((4,5),((7,(6,(10,(8,9)))),((((11,12),(((26,(25,(27,28))),((29,30),((33,(31,32)),(34,35)))),((36,(39,40)),(37,38)))),((((13,((19,20),(23,(24,(21,22))))),(17,(16,18))),(14,15)),((55,(57,(54,56))),(58,59)))),(((41,42),(43,(44,(45,46)))),((53,(50,(47,(48,49)))),(51,52)))))))));
	TREE * ambiguous = [&R] (1,(2,(3,((4,5),((7,(6,(8,(9,10)))),(((11,12),(((((13,((19,20),(24,(23,(21,22))))),(16,(17,18))),(14,15)),(((54,56),(55,57)),(58,59))),((((25,26),(27,28)),((29,30),((33,(31,32)),(34,35)))),((36,(39,40)),(37,38))))),(((41,42),((43,44),(45,46))),((53,(50,(47,(48,49)))),(51,52)))))))));
	TREE * ambiguous = [&R] (1,(2,(3,((4,5),((7,(6,(9,(8,10)))),((((11,12),(((26,(25,(27,28))),((29,30),((33,(31,32)),(34,35)))),((36,(39,40)),(37,38)))),((((13,((19,20),(23,(24,(21,22))))),(17,(16,18))),(14,15)),((56,(54,(55,57))),(58,59)))),(((41,42),(43,(44,(45,46)))),(52,(53,(51,(50,(47,(48,49)))))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,((4,5),((7,(6,(8,(9,10)))),((((11,12),((((25,26),(27,28)),((29,30),((33,(31,32)),(34,35)))),((36,(39,40)),(37,38)))),((((13,((19,20),(23,(24,(21,22))))),(16,(17,18))),(14,15)),((54,(56,(55,57))),(58,59)))),(((41,42),((43,44),(45,46))),(51,(52,(53,(50,(47,(48,49)))))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,((4,5),((7,(6,(10,(8,9)))),((((11,12),((((25,26),(27,28)),((29,30),((33,(31,32)),(34,35)))),((36,(39,40)),(37,38)))),((((13,((19,20),((21,22),(23,24)))),(16,(17,18))),(14,15)),((55,(57,(54,56))),(58,59)))),(((41,42),((43,44),(45,46))),(52,(53,(50,(51,(47,(48,49)))))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,((4,5),((7,(6,(10,(8,9)))),((((11,12),((((25,26),(27,28)),((29,30),((33,(31,32)),(34,35)))),((36,(39,40)),(37,38)))),((((13,((19,20),((21,22),(23,24)))),(16,(17,18))),(14,15)),((54,(56,(55,57))),(58,59)))),(((41,42),((43,44),(45,46))),(52,(53,(50,(51,(47,(48,49)))))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,((4,5),((7,(6,(8,(9,10)))),(((11,12),(((((13,((19,20),(24,(23,(21,22))))),(16,(17,18))),(14,15)),((55,(57,(54,56))),(58,59))),((((25,26),(27,28)),((29,30),((33,(31,32)),(34,35)))),((36,(39,40)),(37,38))))),(((41,42),(44,(43,(45,46)))),(52,(53,(51,(50,(47,(48,49)))))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,((4,5),((7,(6,(9,(8,10)))),((((11,12),(((26,(25,(27,28))),((29,30),((33,(31,32)),(34,35)))),((36,(39,40)),(37,38)))),((((13,((19,20),(24,(23,(21,22))))),(17,(16,18))),(14,15)),((56,(54,(55,57))),(58,59)))),(((41,42),(44,(43,(45,46)))),(52,(51,(53,(50,(47,(48,49)))))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,((4,5),((7,(6,(8,(9,10)))),((((11,12),((((25,26),(27,28)),((29,30),((33,(31,32)),(34,35)))),((36,(39,40)),(37,38)))),((((13,((19,20),(24,(23,(21,22))))),(16,(17,18))),(14,15)),((55,(57,(54,56))),(58,59)))),(((41,42),(44,(43,(45,46)))),(53,(52,(51,(50,(47,(48,49)))))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,((4,5),((7,(6,(8,(9,10)))),((((11,12),(((25,(26,(27,28))),((29,30),((33,(31,32)),(34,35)))),((36,(39,40)),(37,38)))),((((13,((19,20),((21,22),(23,24)))),(17,(16,18))),(14,15)),((55,(57,(54,56))),(58,59)))),(((41,42),(43,(44,(45,46)))),((50,(51,(47,(48,49)))),(52,53)))))))));
	TREE * ambiguous = [&R] (1,(2,(3,((4,5),((7,(6,(10,(8,9)))),(((11,12),(((((13,((19,20),((21,22),(23,24)))),(16,(17,18))),(14,15)),(((54,56),(55,57)),(58,59))),((((25,26),(27,28)),((29,30),((33,(31,32)),(34,35)))),((36,(39,40)),(37,38))))),(((41,42),(43,(44,(45,46)))),(((47,(48,49)),(50,51)),(52,53)))))))));
	TREE * ambiguous = [&R] (1,(2,(3,((4,5),((7,(6,(9,(8,10)))),(((11,12),(((((13,((19,20),(23,(24,(21,22))))),(16,(17,18))),(14,15)),((55,(57,(54,56))),(58,59))),(((26,(25,(27,28))),((29,30),((33,(31,32)),(34,35)))),((36,(39,40)),(37,38))))),(((41,42),((43,44),(45,46))),((50,(47,(48,49))),(52,(51,53))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,((4,5),((7,(6,(9,(8,10)))),((((11,12),(((26,(25,(27,28))),((29,30),((33,(31,32)),(34,35)))),((36,(39,40)),(37,38)))),((((13,((19,20),(23,(24,(21,22))))),(16,(17,18))),(14,15)),((56,(54,(55,57))),(58,59)))),(((41,42),(43,(44,(45,46)))),(52,(53,(51,(50,(47,(48,49)))))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,((4,5),((7,(6,(9,(8,10)))),(((11,12),(((((13,((19,20),(23,(24,(21,22))))),(16,(17,18))),(14,15)),((56,(54,(55,57))),(58,59))),((((25,26),(27,28)),((29,30),((33,(31,32)),(34,35)))),((36,(39,40)),(37,38))))),(((41,42),(43,(44,(45,46)))),(53,(52,(51,(50,(47,(48,49)))))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,((4,5),((7,(6,(9,(8,10)))),(((11,12),(((((13,((19,20),((21,22),(23,24)))),(16,(17,18))),(14,15)),((55,(57,(54,56))),(58,59))),(((25,(26,(27,28))),((29,30),((33,(31,32)),(34,35)))),((36,(39,40)),(37,38))))),(((41,42),(43,(44,(45,46)))),((50,(51,(47,(48,49)))),(52,53)))))))));
	TREE * ambiguous = [&R] (1,(2,(3,((4,5),((7,(6,(8,(9,10)))),((((11,12),((((25,26),(27,28)),((29,30),((33,(31,32)),(34,35)))),((36,(39,40)),(37,38)))),((((13,((19,20),((21,22),(23,24)))),(17,(16,18))),(14,15)),((55,(57,(54,56))),(58,59)))),(((41,42),(44,(43,(45,46)))),(52,(53,(51,(50,(47,(48,49)))))))))))));
	TREE * extraState = [&R] (1,((2,(3,(4,5))),((7,(6,(9,(8,10)))),((11,12),((((((13,((19,20),(23,(24,(21,22))))),(16,(17,18))),(14,15)),(((26,(25,(27,28))),((29,30),((33,(31,32)),(34,35)))),((36,(39,40)),(37,38)))),((54,(56,(55,57))),(58,59))),(((41,42),((43,44),(45,46))),(53,(52,(50,(51,(47,(48,49))))))))))));
	TREE * extraState = [&R] (1,((2,(3,(4,5))),((7,(6,(8,(9,10)))),((11,12),((((((13,((19,20),((21,22),(23,24)))),(16,(17,18))),(14,15)),(((25,(26,(27,28))),((29,30),((31,(32,33)),(34,35)))),((36,(39,40)),(37,38)))),(((54,55),(56,57)),(58,59))),(((41,42),(43,(44,(45,46)))),(51,(52,(53,(50,(47,(48,49))))))))))));
	TREE * extraState = [&R] (1,((2,(3,(4,5))),((7,(6,(8,(9,10)))),((11,12),((((((13,((19,20),((21,22),(23,24)))),(16,(17,18))),(14,15)),(((26,(25,(27,28))),((29,30),((31,(34,35)),(32,33)))),((36,(39,40)),(37,38)))),(((54,55),(56,57)),(58,59))),(((41,42),(44,(43,(45,46)))),((50,(47,(48,49))),(51,(52,53)))))))));
	TREE * extraState = [&R] (1,((2,(3,(4,5))),((7,(6,(8,(9,10)))),((11,12),((((((13,((19,20),(23,(24,(21,22))))),(16,(17,18))),(14,15)),((((25,26),(27,28)),((29,30),((33,(31,32)),(34,35)))),((36,(39,40)),(37,38)))),((56,(54,(55,57))),(58,59))),(((41,42),((43,44),(45,46))),((52,(50,(47,(48,49)))),(51,53))))))));
	TREE * extraState = [&R] (1,((2,(3,(4,5))),((7,(6,(10,(8,9)))),((11,12),((((((13,((19,20),(24,(23,(21,22))))),(16,(17,18))),(14,15)),((((25,26),(27,28)),((29,30),((31,(32,33)),(34,35)))),((36,(39,40)),(37,38)))),((54,(56,(55,57))),(58,59))),(((41,42),(44,(43,(45,46)))),(51,(53,(52,(50,(47,(48,49))))))))))));
	TREE * extraState = [&R] (1,((2,(3,(4,5))),((7,(6,(9,(8,10)))),((11,12),((((((13,((19,20),(24,(23,(21,22))))),(16,(17,18))),(14,15)),(((25,(26,(27,28))),((29,30),((33,(31,32)),(34,35)))),((36,(39,40)),(37,38)))),(((54,55),(56,57)),(58,59))),(((41,42),(43,(44,(45,46)))),(52,(51,(53,(50,(47,(48,49))))))))))));
	TREE * extraState = [&R] (1,((2,(3,(4,5))),((7,(6,(10,(8,9)))),((11,12),((((((13,((19,20),(23,(24,(21,22))))),(16,(17,18))),(14,15)),((((25,26),(27,28)),((29,30),((31,(32,33)),(34,35)))),((36,(39,40)),(37,38)))),(((54,56),(55,57)),(58,59))),(((41,42),((43,44),(45,46))),(52,(53,(50,(51,(47,(48,49))))))))))));
	TREE * extraState = [&R] (1,((2,(3,(4,5))),((7,(6,(9,(8,10)))),((11,12),((((((13,((19,20),(24,(23,(21,22))))),(16,(17,18))),(14,15)),(((25,(26,(27,28))),((29,30),((31,(32,33)),(34,35)))),((36,(39,40)),(37,38)))),((55,(57,(54,56))),(58,59))),(((41,42),((43,44),(45,46))),(51,(53,(52,(50,(47,(48,49))))))))))));
	TREE * extraState = [&R] (1,((2,(3,(4,5))),((7,(6,(8,(9,10)))),((11,12),((((((13,((19,20),(24,(23,(21,22))))),(16,(17,18))),(14,15)),(((25,(26,(27,28))),((29,30),((31,(34,35)),(32,33)))),((36,(39,40)),(37,38)))),(((54,56),(55,57)),(58,59))),(((41,42),(44,(43,(45,46)))),(51,(53,(52,(50,(47,(48,49))))))))))));
	TREE * extraState = [&R] (1,((2,(3,(4,5))),((7,(6,(8,(9,10)))),((11,12),((((((13,((19,20),(24,(23,(21,22))))),(16,(17,18))),(14,15)),(((26,(25,(27,28))),((29,30),((31,(34,35)),(32,33)))),((36,(39,40)),(37,38)))),((56,(54,(55,57))),(58,59))),(((41,42),(44,(43,(45,46)))),(52,(53,(51,(50,(47,(48,49))))))))))));
	TREE * extraState = [&R] (1,((2,(3,(4,5))),((7,(6,(8,(9,10)))),((11,12),((((((13,((19,20),(24,(23,(21,22))))),(16,(17,18))),(14,15)),(((25,(26,(27,28))),((29,30),((31,(34,35)),(32,33)))),((36,(39,40)),(37,38)))),((55,(57,(54,56))),(58,59))),(((41,42),(44,(43,(45,46)))),((50,(51,(47,(48,49)))),(52,53))))))));
	TREE * extraState = [&R] (1,((2,(3,(4,5))),((7,(6,(9,(8,10)))),((11,12),((((((13,((19,20),(24,(23,(21,22))))),(16,(17,18))),(14,15)),(((25,(26,(27,28))),((29,30),((33,(31,32)),(34,35)))),((36,(39,40)),(37,38)))),(((54,55),(56,57)),(58,59))),(((41,42),((43,44),(45,46))),((50,(51,(47,(48,49)))),(52,53))))))));
	TREE * extraState = [&R] (1,((2,(3,(4,5))),((7,(6,(10,(8,9)))),((11,12),((((((13,((19,20),((21,22),(23,24)))),(16,(17,18))),(14,15)),((((25,26),(27,28)),((29,30),((33,(31,32)),(34,35)))),((36,(39,40)),(37,38)))),(((54,56),(55,57)),(58,59))),(((41,42),(43,(44,(45,46)))),((51,(50,(47,(48,49)))),(52,53))))))));
	TREE * extraState = [&R] (1,((2,(3,(4,5))),((7,(6,(10,(8,9)))),((11,12),((((((13,((19,20),((21,22),(23,24)))),(16,(17,18))),(14,15)),((((25,26),(27,28)),((29,30),((31,(32,33)),(34,35)))),((36,(39,40)),(37,38)))),(((54,55),(56,57)),(58,59))),(((41,42),(43,(44,(45,46)))),(((47,(48,49)),(50,51)),(52,53))))))));
	TREE * extraState = [&R] (1,((2,(3,(4,5))),((7,(6,(8,(9,10)))),((11,12),((((((13,((19,20),((21,22),(23,24)))),(16,(17,18))),(14,15)),((((25,26),(27,28)),((29,30),((31,(32,33)),(34,35)))),((36,(39,40)),(37,38)))),((55,(57,(54,56))),(58,59))),(((41,42),((43,44),(45,46))),(53,(52,(50,(51,(47,(48,49))))))))))));
	TREE * extraState = [&R] (1,((2,(3,(4,5))),((7,(6,(10,(8,9)))),((11,12),((((((13,((19,20),(24,(23,(21,22))))),(16,(17,18))),(14,15)),((((25,26),(27,28)),((29,30),((33,(31,32)),(34,35)))),((36,(39,40)),(37,38)))),((55,(57,(54,56))),(58,59))),(((41,42),(44,(43,(45,46)))),(52,(53,(51,(50,(47,(48,49))))))))))));
	TREE * extraState = [&R] (1,((2,(3,(4,5))),((7,(6,(9,(8,10)))),((11,12),((((((13,((19,20),(24,(23,(21,22))))),(16,(17,18))),(14,15)),(((25,(26,(27,28))),((29,30),((33,(31,32)),(34,35)))),((36,(39,40)),(37,38)))),((55,(54,(56,57))),(58,59))),(((41,42),(43,(44,(45,46)))),(52,(53,(51,(50,(47,(48,49))))))))))));
	TREE * extraState = [&R] (1,((2,(3,(4,5))),((7,(6,(8,(9,10)))),((11,12),((((((13,((19,20),(23,(24,(21,22))))),(16,(17,18))),(14,15)),(((26,(25,(27,28))),((29,30),((31,(34,35)),(32,33)))),((36,(39,40)),(37,38)))),((54,(55,(56,57))),(58,59))),(((41,42),(43,(44,(45,46)))),(52,(53,(50,(51,(47,(48,49))))))))))));
	TREE * extraState = [&R] (1,((2,(3,(4,5))),((7,(6,(8,(9,10)))),((11,12),((((((13,((19,20),((21,22),(23,24)))),(16,(17,18))),(14,15)),(((25,(26,(27,28))),((29,30),((33,(31,32)),(34,35)))),((36,(39,40)),(37,38)))),((55,(57,(54,56))),(58,59))),(((41,42),(43,(44,(45,46)))),(51,(53,(52,(50,(47,(48,49))))))))))));
	TREE * extraState = [&R] (1,((2,(3,(4,5))),((7,(6,(8,(9,10)))),((11,12),((((((13,((19,20),(23,(24,(21,22))))),(16,(17,18))),(14,15)),(((26,(25,(27,28))),((29,30),((33,(31,32)),(34,35)))),((36,(39,40)),(37,38)))),((55,(57,(54,56))),(58,59))),(((41,42),(43,(44,(45,46)))),(52,(53,((47,(48,49)),(50,51))))))))));
	TREE * extraState = [&R] (1,((2,(3,(4,5))),((7,(6,(9,(8,10)))),((11,12),((((((13,((19,20),(24,(23,(21,22))))),(16,(17,18))),(14,15)),(((25,(26,(27,28))),((29,30),((31,(32,33)),(34,35)))),((36,(39,40)),(37,38)))),((54,(55,(56,57))),(58,59))),(((41,42),(44,(43,(45,46)))),(52,(53,(51,(50,(47,(48,49))))))))))));
	TREE * extraState = [&R] (1,((2,(3,(4,5))),((7,(6,(10,(8,9)))),((11,12),((((((13,((19,20),(24,(23,(21,22))))),(16,(17,18))),(14,15)),((((25,26),(27,28)),((29,30),((31,(34,35)),(32,33)))),((36,(39,40)),(37,38)))),((55,(57,(54,56))),(58,59))),(((41,42),(44,(43,(45,46)))),(53,(51,(52,(50,(47,(48,49))))))))))));
	TREE * extraState = [&R] (1,((2,(3,(4,5))),((7,(6,(8,(9,10)))),((11,12),((((((13,((19,20),(24,(23,(21,22))))),(16,(17,18))),(14,15)),((((25,26),(27,28)),((29,30),((31,(34,35)),(32,33)))),((36,(39,40)),(37,38)))),(((54,56),(55,57)),(58,59))),(((41,42),(44,(43,(45,46)))),(53,(52,(50,(51,(47,(48,49))))))))))));
	TREE * extraState = [&R] (1,((2,(3,(4,5))),((7,(6,(10,(8,9)))),((11,12),((((((13,((19,20),((21,22),(23,24)))),(16,(17,18))),(14,15)),(((26,(25,(27,28))),((29,30),((31,(32,33)),(34,35)))),((36,(39,40)),(37,38)))),((54,(56,(55,57))),(58,59))),(((41,42),((43,44),(45,46))),(52,(53,(51,(50,(47,(48,49))))))))))));
	TREE * extraState = [&R] (1,((2,(3,(4,5))),((7,(6,(10,(8,9)))),((11,12),((((((13,((19,20),((21,22),(23,24)))),(16,(17,18))),(14,15)),((((25,26),(27,28)),((29,30),((31,(34,35)),(32,33)))),((36,(39,40)),(37,38)))),(((54,55),(56,57)),(58,59))),(((41,42),(43,(44,(45,46)))),((51,(50,(47,(48,49)))),(52,53))))))));
	TREE * extraState = [&R] (1,((2,(3,(4,5))),((7,(6,(10,(8,9)))),((11,12),((((((13,((19,20),(24,(23,(21,22))))),(16,(17,18))),(14,15)),(((26,(25,(27,28))),((29,30),((31,(34,35)),(32,33)))),((36,(39,40)),(37,38)))),((55,(57,(54,56))),(58,59))),(((41,42),(44,(43,(45,46)))),(52,(53,(51,(50,(47,(48,49))))))))))));
	TREE * inapplicable = [&R] (1,((2,(3,(5,4))),((7,(6,(10,(8,9)))),((((((((33,(31,32)),(35,34)),(30,29)),((36,(39,40)),(38,37))),(25,(26,(27,28)))),((13,((16,(18,17)),(14,15))),((20,19),((24,23),(22,21))))),(11,12)),((((42,41),((44,43),(46,45))),((53,(50,(47,(49,48)))),(52,51))),((58,59),(56,(54,(55,57)))))))));
	TREE * inapplicable = [&R] (1,((((((((30,29),((33,(32,31)),(34,35))),((37,38),(36,(39,40)))),(26,(25,(28,27)))),((((16,(18,17)),(13,((19,20),(24,(23,(22,21)))))),(15,14)),(((56,(54,(55,57))),(58,59)),((53,((51,52),(50,(47,(49,48))))),((43,(44,(46,45))),(42,41)))))),(11,12)),(7,(6,(10,(8,9))))),(2,(3,(5,4)))));
	TREE * inapplicable = [&R] (1,(((((((((52,(51,53)),(50,(47,(48,49)))),((42,41),(44,(43,(45,46))))),((59,58),(55,(57,(56,54))))),(((16,(17,18)),(13,((19,20),(24,(23,(22,21)))))),(15,14))),((((30,29),((34,35),(33,(32,31)))),((36,(39,40)),(38,37))),(25,(26,(27,28))))),(12,11)),(7,(6,(9,(8,10))))),(2,(3,(4,5)))));
	TREE * inapplicable = [&R] (1,((2,(3,(5,4))),((7,(6,(8,(9,10)))),((((((((26,25),(27,28)),((29,30),((33,(31,32)),(34,35)))),((37,38),(36,(39,40)))),((14,15),((13,(((24,23),(21,22)),(19,20))),(16,(18,17))))),(((54,56),(57,55)),(58,59))),(((44,(43,(45,46))),(41,42)),(53,(51,(52,(50,(47,(48,49)))))))),(11,12)))));
	TREE * inapplicable = [&R] (1,(2,(3,((5,4),(((((((16,(18,17)),(14,15)),(13,((20,19),(23,(24,(22,21)))))),((25,(26,(28,27))),(((38,37),(36,(40,39))),((29,30),((33,(32,31)),(35,34)))))),(11,12)),((((55,57),(56,54)),(58,59)),(((41,42),((44,43),(46,45))),((52,53),(50,(51,(47,(48,49)))))))),(7,(6,(10,(8,9)))))))));
	TREE * inapplicable = [&R] (1,((2,(3,(4,5))),((7,(6,(8,(9,10)))),((((((16,(18,17)),(13,((19,20),((23,24),(22,21))))),(15,14)),(((56,(54,(55,57))),(58,59)),((53,(51,(52,(50,(47,(49,48)))))),((44,(43,(46,45))),(42,41))))),(((((33,(32,31)),(34,35)),(29,30)),((36,(40,39)),(37,38))),(26,(25,(28,27))))),(11,12)))));
	TREE * inapplicable = [&R] (1,(2,(3,((4,5),((7,(6,(8,(9,10)))),((((((16,(17,18)),(14,15)),(13,((20,19),(24,(23,(22,21)))))),((((30,29),((34,35),(33,(31,32)))),((37,38),(36,(39,40)))),(25,(26,(27,28))))),(11,12)),(((55,(57,(56,54))),(58,59)),(((42,41),((43,44),(46,45))),(53,(52,(51,(50,(47,(48,49))))))))))))));
	TREE * inapplicable = [&R] (1,(2,((3,(4,5)),((7,(6,(8,(9,10)))),((((((16,(18,17)),(15,14)),(13,((19,20),(23,(24,(21,22)))))),((((29,30),((35,34),(33,(31,32)))),((38,37),(36,(40,39)))),(26,(25,(28,27))))),(12,11)),((((56,54),(55,57)),(59,58)),(((41,42),((43,44),(45,46))),(52,((51,53),(50,(47,(49,48))))))))))));
	TREE * inapplicable = [&R] (1,((2,(3,(4,5))),((7,(6,(9,(8,10)))),((12,11),(((((13,((24,(23,(22,21))),(20,19))),(16,(18,17))),(14,15)),(((59,58),(54,(56,(57,55)))),(((42,41),((43,44),(46,45))),(51,(52,(53,(50,(47,(49,48))))))))),((((30,29),((33,(32,31)),(35,34))),((36,(40,39)),(38,37))),((26,25),(27,28))))))));
	TREE * inapplicable = [&R] (1,(((7,(6,(8,(10,9)))),(((((((33,(32,31)),(35,34)),(29,30)),((38,37),(36,(40,39)))),((25,26),(28,27))),((((54,(56,(55,57))),(59,58)),(((42,41),(44,(43,(45,46)))),((53,52),(50,(51,(47,(49,48))))))),(((16,(18,17)),(15,14)),(13,((19,20),(24,(23,(21,22)))))))),(12,11))),(2,(3,(5,4)))));
	TREE * inapplicable = [&R] (1,((2,(3,(5,4))),((((((13,((23,(24,(21,22))),(20,19))),((16,(17,18)),(15,14))),((((29,30),((33,(31,32)),(34,35))),((38,37),(36,(40,39)))),((25,26),(27,28)))),(11,12)),(((56,(54,(57,55))),(58,59)),((51,(52,(53,(50,(47,(49,48)))))),((41,42),((44,43),(45,46)))))),(7,(6,(8,(10,9)))))));
	TREE * inapplicable = [&R] (1,((2,(3,(5,4))),((7,(6,(9,(8,10)))),((11,12),(((((16,(17,18)),(13,(((23,24),(21,22)),(19,20)))),(15,14)),(((58,59),((55,57),(54,56))),((51,(52,(53,(50,(47,(49,48)))))),((44,(43,(45,46))),(41,42))))),((((29,30),((33,(31,32)),(34,35))),((38,37),(36,(39,40)))),(25,(26,(28,27)))))))));
	TREE * inapplicable = [&R] (1,(2,(3,((4,5),((7,(6,(9,(8,10)))),(((11,12),((((16,(18,17)),(15,14)),(13,(((23,24),(21,22)),(19,20)))),((((29,30),((33,(31,32)),(34,35))),((37,38),(36,(39,40)))),(26,(25,(27,28)))))),(((58,59),((57,55),(54,56))),(((43,(44,(45,46))),(41,42)),(52,(53,(50,(51,(47,(48,49))))))))))))));
	TREE * inapplicable = [&R] (1,((2,(3,(4,5))),((7,(6,(8,(10,9)))),((11,12),(((((((29,30),((33,(32,31)),(34,35))),(26,(25,(28,27)))),((36,(39,40)),(37,38))),(((13,((23,(24,(21,22))),(19,20))),(16,(17,18))),(15,14))),((58,59),(56,(54,(55,57))))),(((41,42),(44,(43,(45,46)))),(53,(52,(51,(50,(47,(48,49))))))))))));
	TREE * inapplicable = [&R] (1,((2,(3,(5,4))),((7,(6,(9,(8,10)))),((((((((30,29),((35,34),(33,(31,32)))),((26,25),(27,28))),((36,(40,39)),(38,37))),(((13,((20,19),(24,(23,(21,22))))),(16,(17,18))),(14,15))),((58,59),(56,(54,(57,55))))),((((44,43),(45,46)),(42,41)),(53,(52,((51,50),(47,(48,49))))))),(11,12)))));
	TREE * inapplicable = [&R] (1,(2,((3,(4,5)),((7,(6,(9,(8,10)))),(((((13,((19,20),(23,(24,(22,21))))),((16,(17,18)),(15,14))),(((((33,(32,31)),(34,35)),(29,30)),((36,(40,39)),(37,38))),(26,(25,(27,28))))),(12,11)),(((59,58),(55,(57,(56,54)))),((((43,44),(45,46)),(42,41)),((52,53),(51,(50,(47,(48,49))))))))))));
	TREE * inapplicable = [&R] (1,(((7,(6,(9,(8,10)))),((((((((33,(32,31)),(35,34)),(29,30)),((38,37),(36,(40,39)))),(26,(25,(28,27)))),((13,((16,(17,18)),(15,14))),((19,20),((23,24),(21,22))))),(12,11)),(((55,(57,(54,56))),(59,58)),(((42,41),(44,(43,(45,46)))),((53,52),((50,51),(47,(49,48)))))))),(2,(3,(5,4)))));
	TREE * inapplicable = [&R] (1,((((((((16,(17,18)),(15,14)),(13,((19,20),(23,(24,(21,22)))))),((((53,(51,52)),(50,(47,(49,48)))),((41,42),(44,(43,(45,46))))),(((57,55),(56,54)),(59,58)))),((26,(25,(28,27))),(((29,30),((33,(31,32)),(35,34))),((36,(40,39)),(38,37))))),(12,11)),(7,(6,(10,(9,8))))),(2,(3,(5,4)))));
	TREE * inapplicable = [&R] (1,((2,(3,(4,5))),(((((((55,(57,(54,56))),(58,59)),(((52,(53,51)),(50,(47,(48,49)))),((42,41),((43,44),(46,45))))),(((16,(17,18)),(13,((19,20),(24,(23,(22,21)))))),(15,14))),(((((34,35),(33,(32,31))),(29,30)),((37,38),(36,(40,39)))),((28,27),(26,25)))),(11,12)),(7,(6,(10,(8,9)))))));
	TREE * inapplicable = [&R] (1,((2,(3,(5,4))),((7,(6,(10,(9,8)))),((11,12),(((((13,((23,(24,(21,22))),(19,20))),(16,(17,18))),(15,14)),(((58,59),(55,(57,(54,56)))),((53,(52,(51,(50,(47,(49,48)))))),((44,(43,(45,46))),(41,42))))),((((29,30),((34,35),(33,(31,32)))),((38,37),(36,(39,40)))),((26,25),(28,27))))))));
	TREE * inapplicable = [&R] (1,((2,(3,(5,4))),((7,(6,(9,(10,8)))),(((((((55,57),(54,56)),(58,59)),(((41,42),(44,(43,(45,46)))),((53,(52,51)),(50,(47,(49,48)))))),(((16,(17,18)),(14,15)),(13,((20,19),((23,24),(21,22)))))),((((29,30),((33,(31,32)),(34,35))),((38,37),(36,(40,39)))),(25,(26,(27,28))))),(11,12)))));
	TREE * inapplicable = [&R] (1,((2,(3,(5,4))),((7,(6,(8,(9,10)))),((11,12),(((((16,(17,18)),(15,14)),(13,((24,(23,(21,22))),(19,20)))),(((58,59),(54,(56,(55,57)))),((52,(53,((51,50),(47,(49,48))))),((43,(44,(45,46))),(41,42))))),((((29,30),((33,(31,32)),(34,35))),((38,37),(36,(39,40)))),((25,26),(28,27))))))));
	TREE * inapplicable = [&R] (1,((2,(3,(5,4))),((7,(6,(9,(8,10)))),((((((((30,29),((33,(31,32)),(35,34))),((36,(40,39)),(38,37))),(25,(26,(27,28)))),(((13,((20,19),((23,24),(21,22)))),(16,(17,18))),(14,15))),((58,59),((55,57),(56,54)))),((((43,44),(45,46)),(42,41)),((51,53),(52,(50,(47,(48,49))))))),(11,12)))));
	TREE * inapplicable = [&R] (1,((2,(3,(5,4))),(((12,11),((((((((33,(32,31)),(35,34)),(29,30)),((36,(40,39)),(38,37))),(25,(26,(27,28)))),(((13,((20,19),((23,24),(21,22)))),(16,(17,18))),(14,15))),((59,58),(56,(54,(55,57))))),((53,(52,(50,(51,(47,(49,48)))))),((42,41),(44,(43,(45,46))))))),(7,(6,(8,(9,10)))))));
	TREE * inapplicable = [&R] (1,((2,(3,(5,4))),((7,(6,(10,(8,9)))),(((((((30,29),((34,35),(33,(32,31)))),((37,38),(36,(39,40)))),(26,(25,(28,27)))),((13,((16,(18,17)),(15,14))),((19,20),((24,23),(22,21))))),(11,12)),(((56,(54,(57,55))),(58,59)),((53,((51,52),(50,(47,(49,48))))),((41,42),((43,44),(46,45)))))))));
	TREE * inapplicable = [&R] (1,((2,(3,(5,4))),(((((((16,(18,17)),(14,15)),(13,((20,19),(23,(24,(21,22)))))),(((((33,(32,31)),(34,35)),(29,30)),((38,37),(36,(39,40)))),(26,(25,(28,27))))),(12,11)),((((55,57),(54,56)),(59,58)),(((53,(50,(47,(48,49)))),(51,52)),((44,(43,(46,45))),(42,41))))),(7,(6,(9,(8,10)))))));
	TREE * inapplicable = [&R] (1,(2,(3,((5,4),((7,(6,(8,(9,10)))),(((((13,((20,19),((24,23),(21,22)))),((14,15),(16,(18,17)))),(((((35,34),(33,(31,32))),(30,29)),((36,(39,40)),(38,37))),(25,(26,(27,28))))),(12,11)),(((56,(54,(55,57))),(59,58)),((52,(53,((51,50),(47,(48,49))))),((43,(44,(45,46))),(41,42))))))))));
	TREE * inapplicable = [&R] (1,((2,(3,(5,4))),((7,(6,(10,(8,9)))),(((((44,(43,(46,45))),(42,41)),(51,((52,53),(50,(47,(48,49)))))),(((56,(54,(55,57))),(59,58)),((((13,(((24,23),(22,21)),(20,19))),(16,(17,18))),(14,15)),((((30,29),((33,(32,31)),(35,34))),(25,(26,(28,27)))),((38,37),(36,(40,39))))))),(12,11)))));
	TREE * inapplicable = [&R] (1,((2,(3,(5,4))),((7,(6,(9,(10,8)))),(((12,11),(((13,((16,(18,17)),(14,15))),(((24,23),(22,21)),(20,19))),((((30,29),((33,(32,31)),(35,34))),((36,(40,39)),(38,37))),(25,(26,(27,28)))))),(((59,58),(55,(57,(54,56)))),(((42,41),(44,(43,(46,45)))),(53,((51,52),(50,(47,(48,49)))))))))));
	TREE * inapplicable = [&R] (1,((2,(3,(5,4))),(((((((((29,30),((33,(32,31)),(35,34))),((36,(40,39)),(38,37))),(26,(25,(27,28)))),(((13,((20,19),((23,24),(21,22)))),(16,(17,18))),(14,15))),((59,58),((56,54),(57,55)))),(((52,(50,(47,(49,48)))),(51,53)),((42,41),(44,(43,(45,46)))))),(12,11)),(7,(6,(8,(10,9)))))));
	TREE * inapplicable = [&R] (1,(2,((3,(4,5)),((7,(6,(8,(9,10)))),((((((16,(18,17)),(15,14)),(13,((19,20),((24,23),(22,21))))),((26,(25,(28,27))),(((29,30),((33,(32,31)),(34,35))),((37,38),(36,(40,39)))))),(12,11)),(((59,58),(56,(54,(55,57)))),(((42,41),(43,(44,(45,46)))),((52,53),(50,(51,(47,(49,48))))))))))));
	TREE * inapplicable = [&R] (1,(2,((3,(5,4)),((7,(6,(8,(10,9)))),(((((((29,30),((33,(31,32)),(35,34))),((38,37),(36,(40,39)))),(26,(25,(28,27)))),(((16,(17,18)),(15,14)),(13,((19,20),((24,23),(21,22)))))),(12,11)),((((55,57),(56,54)),(59,58)),(((42,41),((43,44),(45,46))),((52,53),((51,50),(47,(49,48)))))))))));
	TREE * inapplicable = [&R] (1,((2,(3,(4,5))),((7,(6,(8,(9,10)))),((((((16,(18,17)),(15,14)),(13,((19,20),(23,(24,(22,21)))))),(((54,(56,(55,57))),(58,59)),((52,(53,(50,(51,(47,(49,48)))))),((43,(44,(46,45))),(42,41))))),(((((33,(32,31)),(34,35)),(29,30)),((36,(40,39)),(37,38))),(26,(25,(28,27))))),(11,12)))));
	TREE * inapplicable = [&R] (1,(2,((3,(5,4)),(((((((16,(18,17)),(14,15)),(13,((20,19),((23,24),(22,21))))),(((25,26),(28,27)),(((37,38),(36,(40,39))),((29,30),((33,(32,31)),(35,34)))))),(11,12)),((((55,57),(54,56)),(58,59)),(((41,42),((43,44),(46,45))),(53,(51,(52,(50,(47,(48,49))))))))),(7,(6,(9,(10,8))))))));
	TREE * inapplicable = [&R] (1,((2,(3,(4,5))),((7,(6,(9,(10,8)))),(((((((16,(18,17)),(13,((20,19),(23,(24,(21,22)))))),(14,15)),(((((33,(32,31)),(35,34)),(29,30)),(26,(25,(28,27)))),((36,(40,39)),(38,37)))),((59,58),((55,57),(56,54)))),((53,(52,(51,(50,(47,(49,48)))))),((44,(43,(45,46))),(42,41)))),(12,11)))));
	TREE * inapplicable = [&R] (1,((2,(3,(4,5))),(((11,12),((((((((33,(31,32)),(34,35)),(30,29)),((25,26),(27,28))),((36,(39,40)),(37,38))),(((13,((19,20),(24,(23,(22,21))))),(16,(17,18))),(15,14))),((58,59),((56,54),(57,55)))),(((51,53),(52,(50,(47,(49,48))))),((41,42),(44,(43,(46,45))))))),(7,(6,(9,(8,10)))))));
	TREE * inapplicable = [&R] (1,((2,(3,(5,4))),((7,(6,(10,(9,8)))),(((((((30,29),((33,(31,32)),(34,35))),((37,38),(36,(39,40)))),(25,(26,(28,27)))),((13,((19,20),(23,(24,(22,21))))),((16,(18,17)),(15,14)))),(11,12)),(((56,(54,(57,55))),(58,59)),(((50,(51,(47,(49,48)))),(52,53)),((41,42),((43,44),(46,45)))))))));
	TREE * inapplicable = [&R] (1,((2,(3,(4,5))),(((((((16,(17,18)),(13,((19,20),(23,(24,(22,21)))))),(15,14)),(((53,(52,(51,(50,(47,(49,48)))))),((44,(43,(45,46))),(41,42))),((54,(56,(57,55))),(59,58)))),((((30,29),((33,(31,32)),(34,35))),((38,37),(36,(39,40)))),((25,26),(28,27)))),(12,11)),(7,(6,(9,(10,8)))))));
	TREE * inapplicable = [&R] (1,((2,(3,(5,4))),((((((25,(26,(27,28))),(((38,37),(36,(40,39))),((29,30),((33,(32,31)),(35,34))))),((13,((19,20),((24,23),(22,21)))),((16,(18,17)),(14,15)))),(11,12)),(((51,(53,(52,(50,(47,(48,49)))))),((41,42),(43,(44,(46,45))))),(((56,54),(57,55)),(58,59)))),(7,(6,(9,(8,10)))))));
	TREE * inapplicable = [&R] (1,((2,(3,(4,5))),((7,(6,(10,(9,8)))),((((((16,(17,18)),(14,15)),(13,((20,19),((24,23),(22,21))))),((((30,29),((33,(32,31)),(34,35))),((36,(39,40)),(37,38))),(25,(26,(27,28))))),(11,12)),((((51,(53,52)),(50,(47,(48,49)))),((41,42),(44,(43,(46,45))))),((54,(56,(57,55))),(58,59)))))));
	TREE * inapplicable = [&R] (1,((2,(3,(4,5))),((7,(6,(9,(10,8)))),(((((((13,((20,19),(24,(23,(22,21))))),(16,(17,18))),(14,15)),((((30,29),((33,(32,31)),(34,35))),((36,(39,40)),(37,38))),((26,25),(28,27)))),((54,(56,(55,57))),(58,59))),((52,(53,(51,(50,(47,(49,48)))))),((41,42),((44,43),(46,45))))),(11,12)))));
	TREE * inapplicable = [&R] (1,(2,((3,(5,4)),((7,(6,(10,(9,8)))),((((((16,(17,18)),(14,15)),(13,((20,19),(24,(23,(21,22)))))),((((29,30),((33,(31,32)),(34,35))),((38,37),(36,(40,39)))),(25,(26,(27,28))))),(11,12)),((((56,54),(55,57)),(58,59)),((((44,43),(45,46)),(41,42)),((51,(52,53)),(50,(47,(49,48)))))))))));
	TREE * inapplicable = [&R] (1,((2,(3,(4,5))),(((((((((30,29),((35,34),(33,(32,31)))),(26,(25,(28,27)))),((37,38),(36,(39,40)))),(((16,(18,17)),(13,(((23,24),(22,21)),(19,20)))),(14,15))),((56,(54,(57,55))),(59,58))),((52,(53,(50,(51,(47,(49,48)))))),((42,41),(44,(43,(46,45)))))),(12,11)),(7,(6,(10,(8,9)))))));
	TREE * inapplicable = [&R] (1,((2,(3,(4,5))),(((((((56,(54,(55,57))),(59,58)),(((53,(52,51)),(50,(47,(48,49)))),((41,42),((44,43),(46,45))))),(((16,(18,17)),(14,15)),(13,((20,19),(23,(24,(21,22))))))),(((((35,34),(33,(31,32))),(30,29)),((36,(39,40)),(38,37))),(25,(26,(27,28))))),(12,11)),(7,(6,(10,(9,8)))))));
	TREE * inapplicable = [&R] (1,((2,(3,(4,5))),(((((((16,(18,17)),(15,14)),(13,((19,20),(24,(23,(22,21)))))),((((53,52),(51,(50,(47,(49,48))))),((41,42),((44,43),(45,46)))),(((54,56),(57,55)),(59,58)))),((((30,29),((33,(31,32)),(34,35))),((38,37),(36,(39,40)))),(25,(26,(28,27))))),(12,11)),(7,(6,(8,(9,10)))))));
	TREE * inapplicable = [&R] (1,((2,(3,(5,4))),((7,(6,(9,(10,8)))),((11,12),((((((((33,(32,31)),(34,35)),(29,30)),((36,(40,39)),(37,38))),(25,(26,(27,28)))),(((16,(18,17)),(13,((19,20),(24,(23,(22,21)))))),(15,14))),((56,(54,(55,57))),(58,59))),(((50,(51,(47,(48,49)))),(52,53)),((43,(44,(46,45))),(42,41))))))));
	TREE * inapplicable = [&R] (1,((2,(3,(4,5))),((((((13,((16,(17,18)),(15,14))),((19,20),(23,(24,(22,21))))),(((((33,(31,32)),(35,34)),(30,29)),((37,38),(36,(40,39)))),(25,(26,(27,28))))),(11,12)),(((55,(57,(54,56))),(58,59)),(((53,52),((50,51),(47,(49,48)))),(((43,44),(45,46)),(41,42))))),(7,(6,(8,(9,10)))))));
	TREE * inapplicable = [&R] (1,((((((((30,29),((33,(32,31)),(34,35))),((37,38),(36,(39,40)))),(25,(26,(27,28)))),((((16,(18,17)),(15,14)),(13,((19,20),((23,24),(22,21))))),(((54,(56,(55,57))),(58,59)),((51,(52,(53,(50,(47,(48,49)))))),(((43,44),(46,45)),(42,41)))))),(11,12)),(7,(6,(10,(8,9))))),(2,(3,(5,4)))));
	TREE * inapplicable = [&R] (1,((2,(3,(4,5))),(((((((((30,29),((33,(31,32)),(34,35))),((37,38),(36,(39,40)))),((26,25),(28,27))),(((13,((19,20),(24,(23,(22,21))))),(16,(18,17))),(15,14))),((58,59),(56,(54,(55,57))))),((53,(52,((50,51),(47,(48,49))))),((41,42),(43,(44,(46,45)))))),(11,12)),(7,(6,(8,(9,10)))))));
	TREE * inapplicable = [&R] (1,((2,(3,(4,5))),((7,(6,(8,(9,10)))),(((12,11),(((((30,29),((33,(31,32)),(35,34))),((37,38),(36,(40,39)))),((26,25),(27,28))),((13,((16,(18,17)),(14,15))),((24,(23,(22,21))),(20,19))))),(((59,58),(54,(56,(57,55)))),((52,(53,(51,(50,(47,(48,49)))))),((44,(43,(46,45))),(42,41))))))));
END;
