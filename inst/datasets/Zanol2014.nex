#NEXUS
BEGIN data;
  DIMENSIONS NTAX=74 NCHAR=213;
	FORMAT DATATYPE=Standard SYMBOLS= "0 1 2 3 4 5 6 7 8 9" MISSING=? GAP= -;
	MATRIX
    Aciculomarphysa_comes         0011001?????????111101??10101???10210-110112?10????1???010???0-----?1010??01-4000000?????????????????????????11?????????????????????11?????000?--------------------------000????????-???011111???????????????????????
    Arabella_semimaculata         00010000-0---00---00-0--0-0-0---0-010-1100-1-0-210404-00101120-----00-0---01------0000--------22221111000110?11-???00--1000-02222111011?1110000--------------------------0000-----------0000---0----------00----????0
    Diopatra_dentata              20??001100---00-031100--11100---11101-110112210210111-101011012-010210100001-10?0?????-0-?450?000?111?322?01011--2?00--000?00?22?010111111?011?00?-00?-22?0-00-22?-00?--?100?10----?00--011?1?1?11?1???--?1011-???2?1
    Diopatra_ornata               2000001100---00-0211010-111010--11101-110112210210111-101011012-010110100001-100010111-1--450000001110322-01011-02200--000000222200011100010111000-111-1120-00-222-000---100010-----00--01111111?111??1---1061--????1
    Dorvillea_erucaeformis        0???0000-0---1?---0120--0-110---0-?10-1110-0??-?????????1010-0-----2100---01------????---?56??11??11??43??10011--??00--11??--?0??00?00?--??00??-??--??--??---?--??--?????11??11100??-11?00??????-??--?????1?02??????1
    Dorvillea_sociabilis          33310000-0---1?---0111100-10110-0-010-1110-0??-?????????1010-0-----1100---01------0101----100122202220----10011----00--??????0???00011?22??0000--------------------------11111110000-1100000---0----------112223????1
    Eunice_aphroditois            0331?011112200111311010-101010--102111110112110110010111101101110110101000000?13?00001-001456000002000----00011111211011111000000000111111111110001111211100001?210000---11111110000-0000001-1-?--?1--0--1110465????1
    Eunice_cf_violacemaculata     00310011112200111211010-101010--102111110112110110010111101101110110101000003?11020001-1114001000?2200---?00011102211011111-?0?020001110011111000-000-111-0000111-111----11111110000-00000111111-001-0?11-11063220221
    Eunice_filamentosa            10310011110210101211010-101010--102111110112110110010011101101112210101000004010020111-110445000022200-?--00011102210011100-??1120001111111111000-000-221-0000111-111----11111113300-00001111111?00101?10-11368211101
    Eunice_fucata                 03310011111210110211010-101010--102110110112110010010211101101110100101001006011020011-1--106020022222--?-00011111100--11110000000001111111111100011112212000011111111---111111111?0-00000111?01--01-0022-11050222221
    Eunice_impexa                 33???011110010101211010-1?1010--1?2111110112110110010011101101?0-2?010100000??1?0?????-10?450?000?000?---?00011001?1101111?11000?000111111?111?00??00?221?0000111?110?--?111?111330?-000001?1???-??1-0??0?11063?22??1
    Eunice_norvegica              03?10011112210110211010-101010--10211111011211011001011110110111111010100000?01?0?????-11?045?000?000?---?00011111?00--111?00000?000111111?111?00??00?222?0?00?11??11?--?111?111000?-000001?1?1?-0?1-0?11?11038?211?1
    Eunice_roussaei               00010011112200111211010-101010--102111110112110110010111101101110?101010000041110?0011-11-0000000212221---00011121?1101111100?00?00011110111111000000021110?0011110000---11111110000-000001111??-??1-01111116684????1
    Eunice_sp                     30010011110110101111010-101010--102111110112110110010011101101112210101000006010020111--10405400002000----00011102211011100--111200011111101111000?011?1110?00?111?111---11111113300-000011111110001000111116634?2??1
    Euniphysa_aculeata            1001101111331011021100--10100---102110110112110110515-0110110110-2101010000043100?0111-111450000000000----000110022101100000-00?200011110110010-0---0---1-0--0--1---1----11110-1-222-30001111111?01100011?11164011121
    Euniphysa_tridontesa          10?1101111331011121100--10100---10211111011210-010515-0110110110-1?010100000?21?0?????-11?445?200?100?1--?00011022?1011100?0-010?100111100?001?00?-00?-11?0-00-?1?-10?--?011?--1-2??--00011?1?1?11?100??0?11764?211?1
    Fauchaldius_cyrtauloni        0000001110-0001?1211110-101010--102110110112110010??????101??0-----0100---01-204000001----3343222?222?-----0000--2?00----?-----0-000000----0000--------------------------0000-----------111111110000???---1107430????
    Glycera_dibranchiata          000100???0??-???--00-0--0-1?10--0--20-00-0----------0---0----10--012110---01------0011-111----11110110000-???11????00--000?-?000?000000---?0000--------------------------111?1???????2210000---0----------115051-???6
    Hyalinoecia_sp                0???001100---00-1311010-111010--11100-11011221021011031010110????2?210????01?20???????-0??40??00??11??32??01011-2??00--01??0022??11?11?11??01??0??-1??-2??0-0?-1??-1?????00??-----??---?01??????1??10?????1?11??????0
    Leodice_americana             00010011111000110211010-10101110102111110112110110111-1110110111000010101-01-301001111-0--405000002200----00011001211001111000?020001111101111000-000-?22-0?00111-?01----111111100??-00000112211-111-00---116314221?1
    Leodice_antarctica            33310011111010110211010-1010111010211111011211011011021?10110111?00010100001-?0100?111-00-100000020202----00011111?00--111100-?0000011111111111000?11022220?0011111011---11111111100-0000011111?-1?1-10---11234221?21
    Leodice_antennata             3331001111121011021101111010111110211111011211011011021010110111111010100001-001001111-101100100022202----00011111100--11110000??0001111111111100000112222000011111000---1111111000?-000001122?1-?01-11---11032000001
    Leodice_antillensis           0031001111120011021101101010111010211111011211011011021110110111210010100001-101001011-1--045000000000----00011111100--11110000000001111111111100000112211000011111111---11111111100-0000011111?-0?1-11---113384?1??1
    Leodice_harassii              30010011111210110211010-101010--10211111011211011011021110110111001010100001-?010010??-00-000000002200----00011111111001111000?0?00011111111111000000022220?0011111110---11111110000-00000111111-111-00---116382222?1
    Leodice_limosa                11??0011111110110211011010101110102111110112110110111-1010110111200010100001-00?0?1???-00?045?000?220?---?00011001?1100111?00?20?0001?11?1???1??0?????????0???????????--?111???1?00?-?00001?2???-??1-0?--?11438?1?2?1
    Leodice_lucei                 3001001111121011121101111010111110211111011211011011021010110111011010100001-?01001111-11-100000002000----0001110?200--111100001100011111111111000001122210000?111?1?0---11111111100-00000112211-111-11---11038222221
    Leodice_marcusi               00310011111010110211011110101111102111110112110110010211101101?0-110101000001011021011-11-100100022222----00011111100--111100?00200011111111111000?001?2220?00?111??11---11111111100-00000111111-001-00??211038222??1
    Leodice_miurai                03310011111200110211011110101111102111110112110110111-1010110111?10010100001-?01001011-0--101000002000----0001101?100--111100?10?0001111111111000-0??-2?2-0???1?1-??1----111111100?1-000001122??-??1-1?---11232222221
    Leodice_rubra                 3001001111101011121101111010111110211111011211011011021010110111011010100001-?01001111-011400002222122?1--00011001100--1111002?1?00011111111111000?01022220?0011111111---11111111001-00000112211-111-00--?1163840???1
    Leodice_thomasiana            00010011111010100211011010101111102111110112110110010211101101112010101000001011010011-11-000100000200--?-00011111200--11110000000001111111111000-000-211-0000111-0??----11111111100-00000111111-001-00?22110332212?1
    Leodice_torquata              003100111112101102110110101011101021111101121101100102111011011120101010000010110??1?1-11-000120022002?---00011111200--111100?0000001110111111100000001222000011110110---11111111100-00000111111-001-00110113300?2221
    Leodice_valens                00?1001111111011021101101010111010211111011211011011021110110111?00010100001-10100?1?1-1--000100002000-?--00011111100--1111000?000001111111111100011112222000011110000---11111111100-00000111111-001-00---11033000001
    Lumbrineris_inflata           00010000-0---00---00-0--0-0-0---0-210-110102011110303-10100100-----10-0---01------0100--------10111111000010011----00--00000022??11011011--0000--------------------------1100100----211-0000---0----------00----????0
    Lumbrineris_latreille         00010000-0---00---00-0--0-0-0---0-210-110102011110303-10100100-----20-0---01------?100--------11101111102210011----00--1000?0000010011001--0000--------------------------100010-----21--0000---0----------00----00000
    Lysidice_collaris             00??001111001010--11110-100-0---0-210-110112010100010110121120-----010100000?00???????---?004?000?220?---?00011002?00--000?-?000?000111110?011?00?-11?-11?0-0?-?1?-?1?--?111?111000?-000011?1?1??1?100?--?11033??11?0
    Lysidice_ninetta              03??001110-00010--11110-100-0---0-210-110112010100010110121120-----110100000?0000?????---?004?000?120?1--?00011222?00--100?--000?000111111?111?00?111?221?0?00112?00??---111?111000?-000011?1?1??1?101?-1?11034?220?0
    Lysidice_sp1                  1????01111002010--11010-100-0---0-210-11011201010001021012112??--??010100000??0???????--??11??00??10??1-??00011?2??00--10??--?0??00?11?11??01??0??-1??-1??0-0?-1??-1?????11??11100??-00?01??????1??10?????1?03???0??0
    Lysidice_sp2                  3?31001111001010--11110-100-0---0-210-110112010100010110121120-----0101000004010020111----00002000110011--00011002200--1100--0000000111101?111?00?111?211?0000111?111?--?11111110000-00001111111111110011-110333??2?0
    Lysidice_unicornis            000100?0-0--0010--10110-1?0-0---0-210-110112010000010110121120-----1101000007000000101----0043000012021---00011102200--1000--000000011110010010-00--11--1?0--0--00--00---11111110000-00001111111?111111---11431322020
    Marphysa_bellii               20??001110-310101211010-1?1010--1?210-11011201011011031010110111120010101-01-?110?????-0-?405?000?110?00-?00011122?00--100?01000?000111000?111?00?000?101?1---000?000?--?111?111??0?-000001?1?1?-0?1-0?11?11344??01?1
    Marphysa_brevitentaculata     22201011110310111211010-101010--10210-110112110010010310101101112210101100000012?00111-10-4010000010001---00011102200--1000100000000111001111110?1?11?110?0??0?00??11-0101111111222?-00000110000-----0111-110373?21?1
    Marphysa_californica          02200011110310101211010-101010--10210-110112110010010310101101?12210101000005011000111--0-40000000110001--00011002200--1100000000000111001111110?1011-110-0000000-?11-00111111112222-0000011111?-0?1-0011-110330??2?1
    Marphysa_disjuncta            00?0001110-310101211010-101010--10210-11011211001001021010110111120010100000?01?0?????-0-?405?000?110?00-?00011002?00--001?11000?000111000?011?00?-00?-11?1---000?-00?--?111?11122??-000001???1?-1?1-0?11?11161?111?1
    Marphysa_fallax               0001001110-000100211010-101010--10210-11011211011001??101011010--?0010100001-0010101??-11?000?000?112?00-?00011??2?00--110??-?00?000111001?111?00?111?111?0000000?001?--?111?111??0?-000001?1???-??1-1?--?1?03??22??0
    Marphysa_mossambica           12201011110310111211010-101010--10210-110112110010010210101101112210101000004001100101-1114503000010021---00011033000--00001100001111110000011011---------------------?0-0000-----------0011111?-0?--0?---11044000??1
    Marphysa_novahollandiae       02??00111103101?1211010-101010--10210-110112110010?1??10101??11122?01010??00?00???????-?0?456?00??2???2????0011000?00--000?1?000?11?111??????1??1?--------------------10?000?-----------001?1?1?-0?--0?---11????????1
    Marphysa_regalis              020?0011110010110211010?101010-?10210-1101121100100103101011011122?010110001-001010?11--1-00110000110001--00011002200--110000?0000001111111111100001011200000000000001---11111110000-00000110000-----00---1103752???1
    Marphysa_sanguinea            0220?011113300111211010-101010--10210-11011211001001021010110111221010101-003011000101-00-4000000012020---00011002000--000011?000000111000101110?0-111-1020-00-000-11001-11111112222-0000011111?-0?1-0?11111033500021
    Marphysa_viridis              02?00011113320101211010?101010-?1?210-110112110010010210101101112210101100004001000101-00-0003000012000---00011021200--0000000000000111000101100?--11--10-0-00-00--01-01-1111111222?-00000101-?0-?---0----11037321221
    Mooreonuphis_pallidula        2001001100---00-1311010-111010--11101-110112210210111-?01011010--11210100001-1000001?1-00-40000000110032--01011-?2200--000000222200011111110010-0---1---?-0--1--1---1----100110----010--0111111??0?1??0---1061--????1
    Nicidion_amoureuxi            13300011110010111211110-101010--1021101101121100100102101011010--100101000002111020111-01-10000000110011--00011?02200--?100?0?00?000111101?111?00?1?1?211?00?0111?110?--?11111110000-0000011111?-0?1-002?-1133432?0?1
    Nicidion_angeli               00?10011110210111211010-1?1010--12210-1101121100100102101011010--21010100000401?0201??-00?101?000?110?01-?00011102?00--100?000-0?000111101?111?00?001?211?0000111?111?--?111?111000?-000001?1?1?-1?1-0?00?11034?212?1
    Nicidion_cariboea             000?0011110200111211010-101010--102110110112?10110010210101100-----0101000006011020001----003300002200----00011222200--0000--0?000001110011111100001110011000011111110---11111110000-00000111111-001-1122-1104432?0?1
    Nicidion_cincta               ?0??00111102????1211010-101010--102111110112?????????????????0-----010100000?01???????????00??00??10??--??0001102??00--00??--00??00?11?????11??0??00??????000?11??????---11??11100??-00?0?1?1?1??1?1???2??1104???????
    Nicidion_hentscheli           00010011110010111211010-1?1010--1?210-110112110010010110101101?0-210101000006011020101-001000120002200--?-00011222200--10000-00000001110011111000-011-101-0000011-111----11111110000-00000101-10-0-1-1-00-11030311101
    Nicidion_insularis            000?0011110000101211010-101010--1021111101122100100?0210101100-----010101-00?0110?0011----004000002200----00011002200--1000--?00000011110111?11?00??012?110??0??11??11---11111110000-0000011111?-1?1-002?0110343????1
    Nicidion_mikeli               00010011110210111211010-121010--1221101101121100100101101011010--21010100000?0110?0101--0-000000002200--?-00011112200--1100000012000111101111110001111211?000000111110---11111110000-000001111??-??1-0011?11333111001
    Nicidion_mutilata             00010011110200101211010-101010--102110110112110010010110101101112110101000002110020001-11-1004200212022---00011002200--11000-000000011110111111000?111?1110?00?111??01---11111110000-000001111??-??1-000?011034311101
    Nidicion_notata               01110011110210101211010-121010--1221111101121100100101101011010--210101000006011020011--1-101100000000----00011212200--1100-0???0000111111111110000?11111100?011111111---11111110000-0000011111?-1?1-0000-110432222?1
    Oenone_fulgida                00010000-0---00---1120--0-0-0---0-000-1100-1-0-210404-00101120-----1100---01-101000100----222211111111110010011----00--0000??000011111122220000--------------------------0000-----------0011??11-111-00---00----00001
    Onuphis_elegans               20??001100---00-131100--11100---11101-110112210110111-101011010--3?11010??01-100??????023?455?012?111?322?01?11-???00--100?00?22?000111000?111?00?001?222?0000222?001?--?100?10----?10--011?1?1?11?1???--?1061-???1?1
    Onuphis_eremita               2???001100---00-131100--1110111-11100-110112010210111-101011010--1?11010--01??00??????-11?450?000?111?322?01111--2?00--101?00222?000111111?011?00?-01?-22?0-11-?2?-01?---100?10----??0--011?1?1?11?111?---1061-?220??
    Onuphis_iridescens            2???001100---00-031100--11100---11101-110112210210111-101011010--3?110????01-?0???????10??40??00??11??32??01011-1??00--00??0022??00?11?10??01??0??-???-1??0-1?-2??-1?????10??10---??10-?01??????1??1??????1?61??????1
    Palola_siciliensis            33??10111130?0102011010-1?1010--1?2111110112010101212-111111110--2?010100000?-----????--1?000?000?000?--??00011122?1001100?-0000?000111110?000?--?---?---?-------?---?--?111?111000?-000000?-?-?--?---?--?11067??22?0
    Palola_sp_A1                  30?10011110220102211010-101010--102111110112010101212-111111110--220101000004-----0111--1-004000002000---?00011122200--1100--0000000111100?0000--------------------------11111110000-0000000---0----------110611?2??0
    Palola_sp_A3                  30??00111102201?2111010?101010--102111110112010101212-111111110--2?010100000?-----????--1?014?000?200?---?00011112?00--110?-?000?000111100?000?--?---?---?-------?---?--?111?111000?-000000?-?-?--?---?--?11634?0???0
    Palola_sp_A7Pohnpei142        33311011110200102111010-101010--102111110112010101212-111111110--220101000004-----0???--0-000300002200----00011012200--1100--?000000111111?0000--------------------------111?111000?-0000000---0----------112622211?0
    Palola_sp_A9Kosrae161         3????011110220102211010-101010--102111110112010101212-1111111??????0101?0000?-----????--??00??00??20??--??0001111??00--11??--00??00?11?10??00??-??--??--??---?--??--?????11??111?0??-00?00??????-??--?????1?03??2???0
    Palola_sp_B1                  30011011110220102211010?101010--102111110112010101212-111111110--220101000000-----0101--1-011120002000?-?-00011112200--11100-000000011110000000--------------------------11111110000-0000000---0----------110622222?0
    Palola_sp_B5                  3?011011110??0102211010-101010--10?111110112010101212-111111110--220101000004-----0111--1-104000002000----00011122200--1000--000000011110000000--------------------------11111110000-0000000---0----------1106122?2?0
    Palola_sp_B7                  30310011110220102211010-101010--102111110112010101212-111111110--220101000004-----01?1--1-0143200012001---00011?22200-11100--200000011110000000--------------------------11111110000-0000000---0----------110622?2??0
    Palola_viridis                30???011110200102211010-101010--102111110112010101212-111111110--22010100000?-----0???--1?100?000?220?---?00011201?00--011?--000?000111111?000?--?---?---?-------?---?---111?111000?-000000?-?-?--?---?--?11264?111?0
    Paradiopatra_quadricuspis     0???001100---00-2311010-111010--11101-110112210210111-1010110110-1?010????01-1000?????-2??44??00??11??32??01011-1??00--01??0122??00?11?11??01??0??-1??-2??0-??-0??-??????10??10---???0-?01??????1??1??????1?61???2??1
    Paramphinome_jeffreysii       0001010??0??-???3411010-0-1010--0--20-00-0----------0---0----13-2101110---11------0???-1------00001111222200011?02?00--000????33011111100000000--------------------------0000-----------0000---0----------00----????7
  ;
END;

BEGIN TAXA;
	DIMENSIONS NTAX = 74;
	TAXLABELS
		Aciculomarphysa_comes
		Arabella_semimaculata
		Diopatra_dentata
		Diopatra_ornata
		Dorvillea_erucaeformis
		Dorvillea_sociabilis
		Eunice_aphroditois
		Eunice_cf_violacemaculata
		Eunice_filamentosa
		Eunice_fucata
		Eunice_impexa
		Eunice_norvegica
		Eunice_roussaei
		Eunice_sp
		Euniphysa_aculeata
		Euniphysa_tridontesa
		Fauchaldius_cyrtauloni
		Glycera_dibranchiata
		Hyalinoecia_sp
		Leodice_americana
		Leodice_antarctica
		Leodice_antennata
		Leodice_antillensis
		Leodice_harassii
		Leodice_limosa
		Leodice_lucei
		Leodice_marcusi
		Leodice_miurai
		Leodice_rubra
		Leodice_thomasiana
		Leodice_torquata
		Leodice_valens
		Lumbrineris_inflata
		Lumbrineris_latreille
		Lysidice_collaris
		Lysidice_ninetta
		Lysidice_sp1
		Lysidice_sp2
		Lysidice_unicornis
		Marphysa_bellii
		Marphysa_brevitentaculata
		Marphysa_californica
		Marphysa_disjuncta
		Marphysa_fallax
		Marphysa_mossambica
		Marphysa_novahollandiae
		Marphysa_regalis
		Marphysa_sanguinea
		Marphysa_viridis
		Mooreonuphis_pallidula
		Nicidion_amoureuxi
		Nicidion_angeli
		Nicidion_cariboea
		Nicidion_cincta
		Nicidion_hentscheli
		Nicidion_insularis
		Nicidion_mikeli
		Nicidion_mutilata
		Nidicion_notata
		Oenone_fulgida
		Onuphis_elegans
		Onuphis_eremita
		Onuphis_iridescens
		Palola_siciliensis
		Palola_sp_A1
		Palola_sp_A3
		Palola_sp_A7Pohnpei142
		Palola_sp_A9Kosrae161
		Palola_sp_B1
		Palola_sp_B5
		Palola_sp_B7
		Palola_viridis
		Paradiopatra_quadricuspis
		Paramphinome_jeffreysii
	;
END;
BEGIN TREES;
	TRANSLATE
		1	Aciculomarphysa_comes,
		2	Arabella_semimaculata,
		3	Diopatra_dentata,
		4	Diopatra_ornata,
		5	Dorvillea_erucaeformis,
		6	Dorvillea_sociabilis,
		7	Eunice_aphroditois,
		8	Eunice_cf_violacemaculata,
		9	Eunice_filamentosa,
		10	Eunice_fucata,
		11	Eunice_impexa,
		12	Eunice_norvegica,
		13	Eunice_roussaei,
		14	Eunice_sp,
		15	Euniphysa_aculeata,
		16	Euniphysa_tridontesa,
		17	Fauchaldius_cyrtauloni,
		18	Glycera_dibranchiata,
		19	Hyalinoecia_sp,
		20	Leodice_americana,
		21	Leodice_antarctica,
		22	Leodice_antennata,
		23	Leodice_antillensis,
		24	Leodice_harassii,
		25	Leodice_limosa,
		26	Leodice_lucei,
		27	Leodice_marcusi,
		28	Leodice_miurai,
		29	Leodice_rubra,
		30	Leodice_thomasiana,
		31	Leodice_torquata,
		32	Leodice_valens,
		33	Lumbrineris_inflata,
		34	Lumbrineris_latreille,
		35	Lysidice_collaris,
		36	Lysidice_ninetta,
		37	Lysidice_sp1,
		38	Lysidice_sp2,
		39	Lysidice_unicornis,
		40	Marphysa_bellii,
		41	Marphysa_brevitentaculata,
		42	Marphysa_californica,
		43	Marphysa_disjuncta,
		44	Marphysa_fallax,
		45	Marphysa_mossambica,
		46	Marphysa_novahollandiae,
		47	Marphysa_regalis,
		48	Marphysa_sanguinea,
		49	Marphysa_viridis,
		50	Mooreonuphis_pallidula,
		51	Nicidion_amoureuxi,
		52	Nicidion_angeli,
		53	Nicidion_cariboea,
		54	Nicidion_cincta,
		55	Nicidion_hentscheli,
		56	Nicidion_insularis,
		57	Nicidion_mikeli,
		58	Nicidion_mutilata,
		59	Nidicion_notata,
		60	Oenone_fulgida,
		61	Onuphis_elegans,
		62	Onuphis_eremita,
		63	Onuphis_iridescens,
		64	Palola_siciliensis,
		65	Palola_sp_A1,
		66	Palola_sp_A3,
		67	Palola_sp_A7Pohnpei142,
		68	Palola_sp_A9Kosrae161,
		69	Palola_sp_B1,
		70	Palola_sp_B5,
		71	Palola_sp_B7,
		72	Palola_viridis,
		73	Paradiopatra_quadricuspis,
		74	Paramphinome_jeffreysii
	;
	TREE * ambiguous = [&R] (1,(17,(53,(55,(57,(58,(51,(52,((59,(((((74,((34,(33,(2,60))),(6,(5,18)))),(19,(73,(50,((62,(3,4)),(61,63)))))),(44,(47,((49,((40,43),(48,(45,46)))),(41,42))))),(38,(35,(37,(36,39))))),(((8,((7,13),(12,((30,(10,27)),(31,(32,((21,(24,(20,25))),(23,((22,28),(26,29)))))))))),((9,14),(11,(15,16)))),((64,((70,(65,(66,68))),(69,71))),(67,72))))),(54,56))))))))));
	TREE * ambiguous = [&R] (1,(17,((48,(49,(((((74,((34,(33,(2,60))),(6,(5,18)))),(4,(63,(61,(3,(62,(50,(19,73)))))))),(44,(47,(((((8,((7,13),(12,((30,(10,27)),(31,(32,((21,(24,(20,25))),(23,((22,28),(26,29)))))))))),((9,14),(11,(15,16)))),((64,((70,(65,(66,68))),(69,71))),(67,72))),(59,((52,(51,(58,(57,(53,55))))),(54,56)))),(38,(35,(39,(36,37)))))))),(40,43)),(41,42)))),(45,46))));
	TREE * ambiguous = [&R] (1,(17,(((18,(34,(33,(2,(60,74))))),(5,6)),(44,(((19,(73,(50,((62,(3,4)),(61,63))))),(((((8,((7,13),(12,((10,27),(30,(31,(32,(23,((21,(24,(20,25))),((22,28),(26,29))))))))))),((9,14),(11,(15,16)))),((64,((70,(65,(66,68))),(69,71))),(67,72))),(((51,58),(59,(52,(54,56)))),(57,(53,55)))),(38,(35,(39,(36,37)))))),(47,((49,((48,(40,43)),(45,46))),(41,42))))))));
	TREE * ambiguous = [&R] (1,(17,((48,(49,((((((74,((34,(33,(2,60))),(6,(5,18)))),(4,((62,(3,(61,63))),(50,(19,73))))),(44,47)),((52,(((59,(((13,(7,8)),(12,(30,((31,(10,27)),(32,(23,((21,(24,(20,25))),((22,28),(26,29))))))))),(((9,14),(11,(15,16))),((64,((70,(65,(66,68))),(69,71))),(67,72))))),(54,56)),((57,(51,58)),(53,55)))),(38,((35,37),(36,39))))),(40,43)),(41,42)))),(45,46))));
	TREE * ambiguous = [&R] (1,(17,(((74,((34,(33,(2,60))),(6,(5,18)))),(4,((62,(3,(61,63))),(50,(19,73))))),(44,((((((8,((7,13),(12,((10,27),(30,(31,(32,(23,((21,(24,(20,25))),((22,28),(26,29))))))))))),((9,14),(11,(15,16)))),(72,(67,((68,(65,(64,70))),(66,(69,71)))))),(((51,58),(59,(52,(54,56)))),(57,(53,55)))),(38,(35,(39,(36,37))))),(47,((49,((40,43),(48,(45,46)))),(41,42))))))));
	TREE * ambiguous = [&R] (1,(17,(((18,(34,(33,(2,(60,74))))),(5,6)),(44,((((19,(73,(50,((62,(3,4)),(61,63))))),(38,(35,(39,(36,37))))),((((8,((7,13),(12,((10,27),(30,(31,(32,(23,((21,(24,(20,25))),((22,28),(26,29))))))))))),((9,14),(11,(15,16)))),((64,((70,(65,(66,68))),(69,71))),(67,72))),(((51,58),(59,(52,(54,56)))),(57,(53,55))))),(47,((49,((48,(40,43)),(45,46))),(41,42))))))));
	TREE * ambiguous = [&R] (1,(17,(((18,(34,(33,(2,(60,74))))),(5,6)),(44,(((19,(73,(50,(63,((3,4),(61,62)))))),(((((8,((7,13),(12,((30,(10,27)),(31,(32,(23,((21,(24,(20,25))),((22,28),(26,29)))))))))),((9,14),(11,(15,16)))),((64,((70,(65,(66,68))),(69,71))),(67,72))),(59,((52,(51,(58,(57,(53,55))))),(54,56)))),(38,(35,(39,(36,37)))))),(47,((49,(48,((40,43),(45,46)))),(41,42))))))));
	TREE * ambiguous = [&R] (1,(17,(((18,(34,(33,(2,(60,74))))),(5,6)),(44,(((19,(73,(50,(62,(61,(63,(3,4))))))),(((((8,((7,13),(12,(((10,27),((32,(21,(24,(20,25)))),(23,(28,(22,(26,29)))))),(30,31))))),((9,14),(11,(15,16)))),((64,((70,(65,(66,68))),(69,71))),(67,72))),(59,(((51,58),(57,(53,55))),(52,(54,56))))),(38,(35,(37,(36,39)))))),(47,((49,((48,(40,43)),(45,46))),(41,42))))))));
	TREE * ambiguous = [&R] (1,(17,((48,(49,(((((74,((34,(33,(2,60))),(6,(5,18)))),(4,(61,(63,(3,(62,(50,(19,73)))))))),(44,(47,(((((8,((7,13),(12,((30,(10,27)),(31,(32,(23,((21,(24,(20,25))),((22,28),(26,29)))))))))),((9,14),(11,(15,16)))),((64,((70,(65,(66,68))),(69,71))),(67,72))),(59,((52,(51,(58,(57,(53,55))))),(54,56)))),(38,(37,(35,(36,39)))))))),(40,43)),(41,42)))),(45,46))));
	TREE * ambiguous = [&R] (1,(17,(((18,(34,(33,(2,(60,74))))),(5,6)),(44,((((19,(73,(50,(4,(62,(3,(61,63))))))),(37,(38,(35,(36,39))))),((((8,((7,13),(12,((10,27),(30,(31,(32,(23,((21,(24,(20,25))),((22,28),(26,29))))))))))),((9,14),(11,(15,16)))),((64,((70,(65,(66,68))),(69,71))),(67,72))),(((51,58),(59,(52,(54,56)))),(57,(53,55))))),(47,((49,(48,((40,43),(45,46)))),(41,42))))))));
	TREE * ambiguous = [&R] (1,(17,(55,(53,((56,(54,(52,(59,(((((74,((34,(33,(2,60))),(6,(5,18)))),(19,(73,(50,(63,((3,4),(61,62))))))),(44,(47,((49,((40,43),(48,(45,46)))),(41,42))))),(38,(35,(39,(36,37))))),(((8,((7,13),(12,((10,27),(30,(31,(32,(23,((21,(24,(20,25))),((22,28),(26,29))))))))))),((9,14),(11,(15,16)))),((64,((70,(65,(66,68))),(69,71))),(67,72)))))))),(57,(51,58)))))));
	TREE * ambiguous = [&R] (1,(17,(((48,(49,((47,(44,(((74,((34,(33,(2,60))),(6,(5,18)))),(19,(73,(50,(63,((3,4),(61,62))))))),(((((8,((7,13),(12,(((10,27),(23,(32,((21,(24,(20,25))),((22,28),(26,29)))))),(30,31))))),((9,14),(11,(15,16)))),((64,((70,(65,(66,68))),(69,71))),(67,72))),(59,((52,(51,(58,(57,(53,55))))),(54,56)))),(38,(35,(39,(36,37)))))))),(41,42)))),(40,43)),(45,46))));
	TREE * ambiguous = [&R] (1,(17,(((74,((34,(33,(2,60))),(6,(5,18)))),(4,((62,(3,(61,63))),(50,(19,73))))),(44,((((((8,((7,13),(12,((10,27),(30,(31,(32,(23,((21,(24,(20,25))),((22,28),(26,29))))))))))),((9,14),(11,(15,16)))),((64,(70,(65,(68,(66,(69,71)))))),(67,72))),(((51,58),(59,(52,(54,56)))),(57,(53,55)))),(38,(37,(35,(36,39))))),(47,((49,((40,43),(48,(45,46)))),(41,42))))))));
	TREE * ambiguous = [&R] (1,(17,(((18,(34,(33,(2,(60,74))))),(5,6)),(44,((((19,(73,(50,(63,((3,4),(61,62)))))),(38,(37,(35,(36,39))))),((((8,((7,13),(12,((10,27),(30,(31,(32,(23,((21,(24,(20,25))),((22,28),(26,29))))))))))),((9,14),(11,(15,16)))),((64,((70,(65,(66,68))),(69,71))),(67,72))),(((51,58),(59,(52,(54,56)))),(57,(53,55))))),(47,((49,((40,43),(48,(45,46)))),(41,42))))))));
	TREE * ambiguous = [&R] (1,(17,(((74,((34,(33,(2,60))),(6,(5,18)))),(4,((62,(3,(61,63))),(50,(19,73))))),(44,((((((8,((7,13),(12,((10,27),(30,(31,(32,(23,((21,(24,(20,25))),((22,28),(26,29))))))))))),((9,14),(11,(15,16)))),((64,((70,(65,(66,68))),(69,71))),(67,72))),(((51,58),(59,(52,(54,56)))),(57,(53,55)))),(38,(37,(35,(36,39))))),(47,((49,(48,((40,43),(45,46)))),(41,42))))))));
	TREE * ambiguous = [&R] (1,(17,(((18,(34,(33,(2,(60,74))))),(5,6)),(44,(((19,(73,(50,(4,(62,(3,(61,63))))))),(((((8,((7,13),(12,((10,27),(30,(31,(32,(23,((21,(24,(20,25))),((22,28),(26,29))))))))))),((9,14),(11,(15,16)))),((64,((70,(65,(66,68))),(69,71))),(67,72))),(59,((52,(51,(58,(57,(53,55))))),(54,56)))),(38,((35,37),(36,39))))),(47,((49,(48,((40,43),(45,46)))),(41,42))))))));
	TREE * ambiguous = [&R] (1,(17,(((18,(34,(33,(2,(60,74))))),(5,6)),(44,((((19,(73,(50,(62,((3,4),(61,63)))))),(38,(35,(39,(36,37))))),((((8,((7,13),(12,((30,(10,27)),(31,(32,(23,((21,(24,(20,25))),((22,28),(26,29)))))))))),((9,14),(11,(15,16)))),((64,((70,(65,(66,68))),(69,71))),(67,72))),(59,(((51,58),(57,(53,55))),(52,(54,56)))))),(47,((49,((48,(40,43)),(45,46))),(41,42))))))));
	TREE * ambiguous = [&R] (1,(17,(((48,(49,((47,(44,(((74,((34,(33,(2,60))),(6,(5,18)))),(19,(73,(50,(62,((3,4),(61,63))))))),(((((8,((7,13),(12,((30,(10,27)),(31,(32,(23,((21,(24,(20,25))),((22,28),(26,29)))))))))),((9,14),(11,(15,16)))),((64,((70,(65,(66,68))),(69,71))),(67,72))),(59,(((51,58),(57,(53,55))),(52,(54,56))))),(38,(35,(39,(36,37)))))))),(41,42)))),(40,43)),(45,46))));
	TREE * ambiguous = [&R] (1,(17,(((74,((34,(33,(2,60))),(6,(5,18)))),(4,((62,(3,(61,63))),(50,(19,73))))),(44,((((((8,((7,13),(12,((10,27),(30,(31,(32,(23,((21,(24,(20,25))),((22,28),(26,29))))))))))),((9,14),(11,(15,16)))),((64,((65,70),((66,68),(69,71)))),(67,72))),(((51,58),(59,(52,(54,56)))),(57,(53,55)))),(38,(35,(39,(36,37))))),(47,((49,((40,43),(48,(45,46)))),(41,42))))))));
	TREE * ambiguous = [&R] (1,(17,(((49,((47,(44,(((74,((34,(33,(2,60))),(6,(5,18)))),(19,(73,(50,(62,(61,(63,(3,4)))))))),(((((8,((7,13),(12,((10,27),(30,(31,(32,(23,((21,(24,(20,25))),((22,28),(26,29))))))))))),((9,14),(11,(15,16)))),((64,((70,(65,(66,68))),(69,71))),(67,72))),(59,((52,(51,(58,(57,(53,55))))),(54,56)))),(38,(35,(39,(36,37)))))))),(41,42))),(48,(40,43))),(45,46))));
	TREE * ambiguous = [&R] (1,(17,(((18,(34,(33,(2,(60,74))))),(5,6)),(44,((((19,(73,(50,(62,((3,4),(61,63)))))),(37,(38,(35,(36,39))))),((((8,((7,13),(12,((10,27),(30,(31,(32,(23,((21,(24,(20,25))),((22,28),(26,29))))))))))),((9,14),(11,(15,16)))),(72,(67,((68,(65,(64,70))),(66,(69,71)))))),(((51,58),(59,(52,(54,56)))),(57,(53,55))))),(47,((49,((48,(40,43)),(45,46))),(41,42))))))));
	TREE * ambiguous = [&R] (1,(17,(53,(55,(57,(58,(51,(52,((59,(((((74,((34,(33,(2,60))),(6,(5,18)))),(19,(73,(50,((3,4),(62,(61,63))))))),(44,(47,((49,((48,(40,43)),(45,46))),(41,42))))),(38,(35,(39,(36,37))))),(((8,((7,13),(12,((30,(10,27)),(31,(32,(23,((21,(24,(20,25))),((22,28),(26,29)))))))))),((9,14),(11,(15,16)))),((64,((70,(65,(66,68))),(69,71))),(67,72))))),(54,56))))))))));
	TREE * ambiguous = [&R] (1,(17,(((49,((47,(44,(((74,((34,(33,(2,60))),(6,(5,18)))),(19,(73,(50,(62,((3,4),(61,63))))))),(((((8,((7,13),(12,(((10,27),((32,(21,(24,(20,25)))),(23,(28,(22,(26,29)))))),(30,31))))),((9,14),(11,(15,16)))),((64,((70,(65,(66,68))),(69,71))),(67,72))),(59,(((51,58),(57,(53,55))),(52,(54,56))))),(38,(37,(35,(36,39)))))))),(41,42))),(48,(40,43))),(45,46))));
	TREE * ambiguous = [&R] (1,(17,(((49,((47,(44,(((74,((34,(33,(2,60))),(6,(5,18)))),(19,(73,(50,(63,((3,4),(61,62))))))),(((((8,((7,13),(12,(((10,27),((32,(21,(24,(20,25)))),(23,(28,(22,(26,29)))))),(30,31))))),((9,14),(11,(15,16)))),((64,((70,(65,(66,68))),(69,71))),(67,72))),(59,((52,(51,(58,(57,(53,55))))),(54,56)))),(38,(37,(35,(36,39)))))))),(41,42))),(48,(40,43))),(45,46))));
	TREE * ambiguous = [&R] (1,((17,(74,((34,(33,(2,60))),(6,(5,18))))),((19,(73,(50,(62,(61,(63,(3,4))))))),((((((8,((7,13),(12,((10,27),(30,(31,(32,(23,((21,(24,(20,25))),((22,28),(26,29))))))))))),((9,14),(11,(15,16)))),(72,(67,(64,((70,(65,(66,68))),(69,71)))))),(58,((51,(52,(59,(54,56)))),(57,(53,55))))),(37,((35,38),(36,39)))),(44,(47,((49,((40,43),(48,(45,46)))),(41,42))))))));
	TREE * ambiguous = [&R] (1,(17,(((18,(34,(33,(2,(60,74))))),(5,6)),(44,(((19,(73,(50,(62,((3,4),(61,63)))))),(((((8,((7,13),(12,((10,27),(30,(31,(32,(23,((21,(24,(20,25))),((22,28),(26,29))))))))))),((9,14),(11,(15,16)))),((((64,70),(65,(69,71))),(66,68)),(67,72))),(((51,58),(59,(52,(54,56)))),(57,(53,55)))),(38,(35,(39,(36,37)))))),(47,((49,((48,(40,43)),(45,46))),(41,42))))))));
	TREE * ambiguous = [&R] (1,(17,(((18,(34,(33,(2,(60,74))))),(5,6)),(44,((((19,(73,(50,(63,((3,4),(61,62)))))),(38,((35,37),(36,39)))),((((8,((7,13),(12,(((10,27),((32,(21,(24,(20,25)))),(23,(28,(22,(26,29)))))),(30,31))))),((9,14),(11,(15,16)))),((64,((70,(65,(66,68))),(69,71))),(67,72))),(59,(((51,58),(57,(53,55))),(52,(54,56)))))),(47,((49,((40,43),(48,(45,46)))),(41,42))))))));
	TREE * ambiguous = [&R] (1,(17,(((74,((34,(33,(2,60))),(6,(5,18)))),(4,((62,(3,(61,63))),(50,(19,73))))),(44,((((((8,((7,13),(12,((10,27),(30,(31,(32,(23,((21,(24,(20,25))),((22,28),(26,29))))))))))),((9,14),(11,(15,16)))),((((65,(64,70)),(66,68)),(69,71)),(67,72))),(((51,58),(59,(52,(54,56)))),(57,(53,55)))),(38,((35,37),(36,39)))),(47,((49,((40,43),(48,(45,46)))),(41,42))))))));
	TREE * ambiguous = [&R] (1,(17,((6,(((2,(60,74)),(33,34)),(5,18))),(37,((35,(38,(((19,(73,(50,(4,(62,(3,(61,63))))))),(44,(47,((49,((40,43),(48,(45,46)))),(41,42))))),((((8,((7,13),(12,(((10,27),((23,(32,(21,(24,(20,25))))),((22,28),(26,29)))),(30,31))))),((9,14),(11,(15,16)))),((64,((70,(65,(66,68))),(69,71))),(67,72))),(59,(((51,58),(57,(53,55))),(52,(54,56)))))))),(36,39))))));
	TREE * ambiguous = [&R] (1,(17,(((49,((47,(44,(((74,((34,(33,(2,60))),(6,(5,18)))),(19,(73,(50,(62,(61,(63,(3,4)))))))),(((((8,((7,13),(12,(((10,27),((32,(21,(24,(20,25)))),(23,((22,28),(26,29))))),(30,31))))),((9,14),(11,(15,16)))),((64,((70,(65,(66,68))),(69,71))),(67,72))),(59,((52,(51,(58,(57,(53,55))))),(54,56)))),(38,(37,(35,(36,39)))))))),(41,42))),(48,(40,43))),(45,46))));
	TREE * ambiguous = [&R] (1,(17,((6,(((2,(60,74)),(33,34)),(5,18))),(37,((35,(38,(((19,(73,(50,((62,(3,4)),(61,63))))),(44,(47,((49,(48,((40,43),(45,46)))),(41,42))))),((((8,((7,13),(12,((10,27),(30,(31,(32,(23,((21,(24,(20,25))),((22,28),(26,29))))))))))),((9,14),(11,(15,16)))),((64,((70,(65,(66,68))),(69,71))),(67,72))),(59,(((51,58),(57,(53,55))),(52,(54,56)))))))),(36,39))))));
	TREE * ambiguous = [&R] (1,(17,(((18,(34,(33,(2,(60,74))))),(5,6)),(44,(((19,(73,(50,(63,((3,4),(61,62)))))),(((((8,((7,13),(12,((30,(10,27)),(31,(32,(23,((21,(24,(20,25))),((22,28),(26,29)))))))))),((9,14),(11,(15,16)))),((64,((70,(65,(66,68))),(69,71))),(67,72))),(59,(((51,58),(57,(53,55))),(52,(54,56))))),(38,(35,(39,(36,37)))))),(47,((49,((40,43),(48,(45,46)))),(41,42))))))));
	TREE * ambiguous = [&R] (1,((17,(74,((34,(33,(2,60))),(6,(5,18))))),((19,(73,(50,(62,(61,(63,(3,4))))))),((((((8,((7,13),(12,((10,27),(30,(31,(32,(23,((21,(24,(20,25))),((22,28),(26,29))))))))))),((9,14),(11,(15,16)))),(72,(67,(((65,(64,70)),(66,68)),(69,71))))),(58,((51,(52,(59,(54,56)))),(57,(53,55))))),(37,((35,38),(36,39)))),(44,(47,((49,((40,43),(48,(45,46)))),(41,42))))))));
	TREE * ambiguous = [&R] (1,(17,(((49,((47,(44,(((74,((34,(33,(2,60))),(6,(5,18)))),(19,(73,(50,(62,((3,4),(61,63))))))),(((((8,((7,13),(12,((30,(10,27)),(31,(32,((21,(24,(20,25))),(23,((22,28),(26,29)))))))))),((9,14),(11,(15,16)))),((64,((70,(65,(66,68))),(69,71))),(67,72))),(59,(((51,58),(57,(53,55))),(52,(54,56))))),(38,(37,(35,(36,39)))))))),(41,42))),(48,(40,43))),(45,46))));
	TREE * ambiguous = [&R] (1,(17,(53,(55,(57,(58,(51,(52,((59,(((((74,((34,(33,(2,60))),(6,(5,18)))),(19,(73,(50,(62,(61,(63,(3,4)))))))),(44,(47,((49,((48,(40,43)),(45,46))),(41,42))))),(38,(35,(37,(36,39))))),(((8,((7,13),(12,((30,(10,27)),(31,(32,(23,((21,(24,(20,25))),((22,28),(26,29)))))))))),((9,14),(11,(15,16)))),((64,((70,(65,(66,68))),(69,71))),(67,72))))),(54,56))))))))));
	TREE * ambiguous = [&R] (1,((17,(74,((34,(33,(2,60))),(6,(5,18))))),((19,(73,(50,((62,(3,4)),(61,63))))),((((((8,((7,13),(12,((10,27),(30,(31,(32,(23,((21,(24,(20,25))),((22,28),(26,29))))))))))),((9,14),(11,(15,16)))),(72,(67,(64,((70,(65,(66,68))),(69,71)))))),(58,((51,(52,(59,(54,56)))),(57,(53,55))))),(37,((35,38),(36,39)))),(44,(47,((49,(48,((40,43),(45,46)))),(41,42))))))));
	TREE * ambiguous = [&R] (1,(17,(((18,(34,(33,(2,(60,74))))),(5,6)),(44,((((19,(73,(50,((3,4),(62,(61,63)))))),(37,(38,(35,(36,39))))),((((8,((7,13),(12,((10,27),(30,(31,(32,(23,((21,(24,(20,25))),((22,28),(26,29))))))))))),((9,14),(11,(15,16)))),((((65,(64,70)),(69,71)),(66,68)),(67,72))),(((51,58),(59,(52,(54,56)))),(57,(53,55))))),(47,((49,((40,43),(48,(45,46)))),(41,42))))))));
	TREE * ambiguous = [&R] (1,(17,(((74,((34,(33,(2,60))),(6,(5,18)))),(4,((62,(3,(61,63))),(50,(19,73))))),(44,((((((8,((7,13),(12,((10,27),(30,(31,(32,(23,((21,(24,(20,25))),((22,28),(26,29))))))))))),((9,14),(11,(15,16)))),((64,((65,70),((66,68),(69,71)))),(67,72))),(((51,58),(59,(52,(54,56)))),(57,(53,55)))),(38,((35,37),(36,39)))),(47,((49,((40,43),(48,(45,46)))),(41,42))))))));
	TREE * ambiguous = [&R] (1,(17,(((49,((47,(44,(((74,((34,(33,(2,60))),(6,(5,18)))),(19,(73,(50,((62,(3,4)),(61,63)))))),(((((8,((7,13),(12,(((10,27),((32,(21,(24,(20,25)))),(23,((22,28),(26,29))))),(30,31))))),((9,14),(11,(15,16)))),((64,((70,(65,(66,68))),(69,71))),(67,72))),(59,((52,(51,(58,(57,(53,55))))),(54,56)))),(38,(35,(37,(36,39)))))))),(41,42))),(48,(40,43))),(45,46))));
	TREE * ambiguous = [&R] (1,(17,(((18,(34,(33,(2,(60,74))))),(5,6)),(44,((((19,(73,(50,(62,((3,4),(61,63)))))),(38,(35,(37,(36,39))))),((((8,((7,13),(12,((10,27),(30,(31,(32,(23,((21,(24,(20,25))),((22,28),(26,29))))))))))),((9,14),(11,(15,16)))),((64,(70,((65,(69,71)),(66,68)))),(67,72))),(((51,58),(59,(52,(54,56)))),(57,(53,55))))),(47,((49,(48,((40,43),(45,46)))),(41,42))))))));
	TREE * ambiguous = [&R] (1,(17,((48,(49,(((((74,((34,(33,(2,60))),(6,(5,18)))),(4,(61,(63,(3,(62,(50,(19,73)))))))),(44,(47,(((((8,((7,13),(12,(((10,27),((32,(21,(24,(20,25)))),(23,(28,(22,(26,29)))))),(30,31))))),((9,14),(11,(15,16)))),((64,((70,(65,(66,68))),(69,71))),(67,72))),(59,(((51,58),(57,(53,55))),(52,(54,56))))),(38,(35,(39,(36,37)))))))),(40,43)),(41,42)))),(45,46))));
	TREE * ambiguous = [&R] (1,((17,(74,((34,(33,(2,60))),(6,(5,18))))),((19,(73,(50,(63,((3,4),(61,62)))))),((((((8,((7,13),(12,((10,27),(30,(31,(32,(23,((21,(24,(20,25))),((22,28),(26,29))))))))))),((9,14),(11,(15,16)))),(72,(67,(64,((70,(65,(66,68))),(69,71)))))),(58,((51,(52,(59,(54,56)))),(57,(53,55))))),(37,((35,38),(36,39)))),(44,(47,((49,((40,43),(48,(45,46)))),(41,42))))))));
	TREE * ambiguous = [&R] (1,(17,((48,(49,(((((74,((34,(33,(2,60))),(6,(5,18)))),(4,((3,(62,(50,(19,73)))),(61,63)))),(44,(47,(((((8,((7,13),(12,(((10,27),((32,(21,(24,(20,25)))),(23,(28,(22,(26,29)))))),(30,31))))),((9,14),(11,(15,16)))),((64,((70,(65,(66,68))),(69,71))),(67,72))),(59,((52,(51,(58,(57,(53,55))))),(54,56)))),(38,(35,(39,(36,37)))))))),(40,43)),(41,42)))),(45,46))));
	TREE * ambiguous = [&R] (1,(17,((48,((49,((47,(44,(((74,((34,(33,(2,60))),(6,(5,18)))),(19,(73,(50,(62,((3,4),(61,63))))))),(((((8,((7,13),(12,((30,(10,27)),(31,(32,(23,((21,(24,(20,25))),((22,28),(26,29)))))))))),((9,14),(11,(15,16)))),((64,((70,(65,(66,68))),(69,71))),(67,72))),(59,(((51,58),(57,(53,55))),(52,(54,56))))),(38,(35,(37,(36,39)))))))),(41,42))),(40,43))),(45,46))));
	TREE * ambiguous = [&R] (1,(17,((48,(49,((((((74,((34,(33,(2,60))),(6,(5,18)))),(4,(3,((62,(50,(19,73))),(61,63))))),(44,47)),((52,((56,(54,(59,(((13,(7,8)),(12,(30,((31,(10,27)),(32,(23,((21,(24,(20,25))),((22,28),(26,29))))))))),(((9,14),(11,(15,16))),((((65,(64,70)),(66,68)),(69,71)),(67,72))))))),((57,(51,58)),(53,55)))),(38,(35,(37,(36,39)))))),(40,43)),(41,42)))),(45,46))));
	TREE * ambiguous = [&R] (1,(17,(((74,((34,(33,(2,60))),(6,(5,18)))),(4,((62,(3,(61,63))),(50,(19,73))))),(44,((((((8,(7,(13,(12,(10,(30,(27,(31,(32,(23,((21,(24,(20,25))),((22,28),(26,29))))))))))))),((9,14),(11,(15,16)))),((64,((70,(65,(66,68))),(69,71))),(67,72))),(57,(((51,58),(59,(52,(54,56)))),(53,55)))),(38,(37,(35,(36,39))))),(47,((49,((40,43),(48,(45,46)))),(41,42))))))));
	TREE * ambiguous = [&R] (1,(17,(((18,(34,(33,(2,(60,74))))),(5,6)),(44,(((19,(73,(50,(63,((3,4),(61,62)))))),(((((8,((7,13),(12,((10,27),(30,(31,(32,(23,((21,(24,(20,25))),((22,28),(26,29))))))))))),((9,14),(11,(15,16)))),((64,((70,(65,(66,68))),(69,71))),(67,72))),(57,(((51,58),(52,(59,(54,56)))),(53,55)))),(38,((35,37),(36,39))))),(47,((49,((40,43),(48,(45,46)))),(41,42))))))));
	TREE * ambiguous = [&R] (1,(17,((48,(49,((((((74,(((2,60),(6,(5,18))),(33,34))),(4,(61,(63,(3,(62,(50,(19,73)))))))),(44,47)),((52,((56,(54,(59,(((13,(7,8)),(12,(30,((31,(10,27)),(32,(23,((21,(24,(20,25))),((22,28),(26,29))))))))),(((9,14),(11,(15,16))),(((68,(65,(64,70))),(66,(69,71))),(67,72))))))),((57,(51,58)),(53,55)))),(38,((35,37),(36,39))))),(40,43)),(41,42)))),(45,46))));
	TREE * ambiguous = [&R] (1,(17,((74,((34,(33,(2,60))),(6,(5,18)))),((19,(73,(50,((62,(3,4)),(61,63))))),((((((8,((7,13),(12,((10,27),(30,(31,(32,(23,((21,(24,(20,25))),((22,28),(26,29))))))))))),((9,14),(11,(15,16)))),(72,(67,(64,((70,(65,(66,68))),(69,71)))))),(58,((51,(52,(59,(54,56)))),(57,(53,55))))),(37,((35,38),(36,39)))),(44,(47,((49,((40,43),(48,(45,46)))),(41,42)))))))));
	TREE * ambiguous = [&R] (1,(17,(((49,((47,(44,(((74,((34,(33,(2,60))),(6,(5,18)))),(19,(73,(50,(62,(61,(63,(3,4)))))))),(((((8,((7,13),(12,(((10,27),((32,(21,(24,(20,25)))),(23,(28,(22,(26,29)))))),(30,31))))),((9,14),(11,(15,16)))),((64,((70,(65,(66,68))),(69,71))),(67,72))),(59,(((51,58),(57,(53,55))),(52,(54,56))))),(38,(37,(35,(36,39)))))))),(41,42))),(48,(40,43))),(45,46))));
	TREE * extraState = [&R] (1,((17,((((2,60),(33,34)),(18,74)),(5,6))),((((((19,(73,(50,((62,(3,4)),(61,63))))),(15,16)),((40,43),((41,42),(48,49)))),(55,(((58,(57,((59,((8,((7,13),(12,(10,((((21,(24,(20,(25,28)))),(22,(23,32))),(26,29)),(27,(30,31))))))),(11,(9,14)))),(51,52)))),((38,(35,(37,(36,39)))),(56,(53,54)))),(44,47)))),(72,(67,((65,(64,70)),(68,(66,(69,71))))))),(45,46))));
	TREE * extraState = [&R] (1,((17,(((60,(2,(33,34))),(18,74)),(5,6))),((((((19,(73,(50,(4,(62,(3,(61,63))))))),(15,16)),((40,43),((41,42),(48,49)))),(55,(((58,(57,((59,((8,((7,13),(12,(10,((((24,(25,(20,28))),(23,32)),(21,(22,(26,29)))),(31,(27,30))))))),(11,(9,14)))),(51,52)))),((38,(35,(37,(36,39)))),(56,(53,54)))),(44,47)))),((((65,(64,70)),(66,68)),(69,71)),(67,72))),(45,46))));
	TREE * extraState = [&R] (1,((17,(((60,(2,(33,34))),(18,74)),(5,6))),((((((19,(73,(50,(4,(62,(3,(61,63))))))),(15,16)),((40,43),((41,42),(48,49)))),(55,(((58,(57,((59,((8,((7,13),(12,(10,((31,(32,(23,((21,(24,(20,25))),((22,28),(26,29)))))),(27,30)))))),(11,(9,14)))),(51,52)))),((38,(37,(35,(36,39)))),(56,(53,54)))),(44,47)))),((((65,(64,70)),(69,71)),(66,68)),(67,72))),(45,46))));
	TREE * extraState = [&R] (1,((17,((((2,60),(33,34)),(18,74)),(5,6))),((((((19,(73,(50,((62,(3,4)),(61,63))))),(15,16)),((40,43),(49,(48,(41,42))))),(55,(((58,(57,((59,((8,((7,13),(12,(10,((((24,(25,(20,28))),(23,32)),(21,(22,(26,29)))),(31,(27,30))))))),(11,(9,14)))),(51,52)))),((38,(36,(39,(35,37)))),(56,(53,54)))),(44,47)))),(((65,(64,70)),(68,(66,(69,71)))),(67,72))),(45,46))));
	TREE * extraState = [&R] (1,((17,((((2,60),(33,34)),(18,74)),(5,6))),((((((19,(73,(50,(4,(62,(3,(61,63))))))),(15,16)),((40,43),((41,42),(48,49)))),(55,(((58,(57,((59,((8,((7,13),(12,((10,(27,(30,31))),(24,((22,(26,(29,(28,(20,25))))),(21,(23,32)))))))),(11,(9,14)))),(51,52)))),((38,((35,37),(36,39))),(56,(53,54)))),(44,47)))),(72,(67,(((65,(64,70)),(69,71)),(66,68))))),(45,46))));
	TREE * extraState = [&R] (1,((17,((((2,60),(33,34)),(18,74)),(5,6))),((((((19,(73,(50,(4,(62,(3,(61,63))))))),(15,16)),((40,43),((41,42),(48,49)))),(55,(((58,(57,((59,((8,((7,13),(12,((10,(27,(30,31))),(24,((22,((28,(20,25)),(26,29))),(21,(23,32)))))))),(11,(9,14)))),(51,52)))),((38,(36,(35,(37,39)))),(56,(53,54)))),(44,47)))),(72,(67,(64,((70,(65,(66,68))),(69,71)))))),(45,46))));
	TREE * extraState = [&R] (1,((17,((((2,60),(33,34)),(18,74)),(5,6))),((((((19,(73,(50,(4,(62,(3,(61,63))))))),(15,16)),((40,43),((41,42),(48,49)))),(55,(((57,((59,((8,((7,13),(12,((10,(27,(30,31))),(24,((22,((28,(20,25)),(26,29))),(21,(23,32)))))))),(11,(9,14)))),(51,52))),(58,(56,((38,(36,(37,(35,39)))),(53,54))))),(44,47)))),(72,(67,(((65,(64,70)),(69,71)),(66,68))))),(45,46))));
	TREE * extraState = [&R] (1,((17,((((2,60),(33,34)),(18,74)),(5,6))),((((((19,(73,(50,(4,((3,62),(61,63)))))),(15,16)),((40,43),(48,(49,(41,42))))),(55,(((58,(57,((59,((8,((7,13),(12,((10,(27,(30,31))),(24,((22,((28,(20,25)),(26,29))),(21,(23,32)))))))),(11,(9,14)))),(51,52)))),((38,(36,(37,(35,39)))),(56,(53,54)))),(44,47)))),(((65,(64,70)),(68,(66,(69,71)))),(67,72))),(45,46))));
	TREE * extraState = [&R] (1,((17,((((2,60),(33,34)),(18,74)),(5,6))),((((((19,(73,(50,(4,(62,(3,(61,63))))))),(15,16)),((40,43),(48,(49,(41,42))))),(55,(((58,(57,((59,((8,((7,13),(12,(10,(30,(27,(31,(32,(23,((21,(24,(20,25))),((22,28),(26,29)))))))))))),(11,(9,14)))),(51,52)))),((38,(36,(39,(35,37)))),(56,(53,54)))),(44,47)))),(72,(67,((65,(64,70)),((66,68),(69,71)))))),(45,46))));
	TREE * extraState = [&R] (1,((17,((((2,60),(33,34)),(18,74)),(5,6))),((((((19,(73,(50,(63,((3,4),(61,62)))))),(15,16)),((40,43),((41,42),(48,49)))),(55,(((58,(57,((59,((8,((7,13),(12,(10,((23,(32,((24,(25,(20,28))),(21,(22,(26,29)))))),(31,(27,30))))))),(11,(9,14)))),(51,52)))),((38,(36,(39,(35,37)))),(56,(53,54)))),(44,47)))),((((65,(64,70)),(69,71)),(66,68)),(67,72))),(45,46))));
	TREE * extraState = [&R] (1,((17,((((2,60),(33,34)),(18,74)),(5,6))),((((((19,(73,(50,(4,(62,(3,(61,63))))))),(15,16)),((40,43),((41,42),(48,49)))),(55,(((58,(57,((59,((8,((7,13),(12,((10,(23,(32,((21,(24,(20,25))),((22,28),(26,29)))))),(30,(27,31)))))),(11,(9,14)))),(51,52)))),((38,(36,(39,(35,37)))),(56,(53,54)))),(44,47)))),(72,(67,((65,(64,70)),(68,(66,(69,71))))))),(45,46))));
	TREE * extraState = [&R] (1,((17,(((60,(2,(33,34))),(18,74)),(5,6))),((((((19,(73,(50,(4,(62,(3,(61,63))))))),(15,16)),((40,43),(48,(49,(41,42))))),(55,(((57,((59,((8,((7,13),(12,(10,((23,(32,((24,(25,(20,28))),(21,(22,(26,29)))))),(30,(27,31))))))),(11,(9,14)))),(51,52))),(58,(56,((38,(36,(37,(35,39)))),(53,54))))),(44,47)))),(72,(67,((65,(64,70)),((66,68),(69,71)))))),(45,46))));
	TREE * extraState = [&R] (1,((17,((((2,60),(33,34)),(18,74)),(5,6))),((((((19,(73,(50,(4,(62,(3,(61,63))))))),(15,16)),((40,43),(48,(49,(41,42))))),(55,(((57,((59,((8,((7,13),(12,(10,(30,(27,(31,(32,(23,((21,(24,(20,25))),((22,28),(26,29)))))))))))),(11,(9,14)))),(51,52))),(58,(56,((38,(36,(39,(35,37)))),(53,54))))),(44,47)))),(72,(67,((65,(64,70)),((66,68),(69,71)))))),(45,46))));
	TREE * extraState = [&R] (1,((17,(((60,(2,(33,34))),(18,74)),(5,6))),((((((19,(73,(50,(63,((3,4),(61,62)))))),(15,16)),((40,43),(49,(48,(41,42))))),(55,(((58,(57,((59,((8,((7,13),(12,(10,((23,(32,((24,(25,(20,28))),(21,(22,(26,29)))))),(31,(27,30))))))),(11,(9,14)))),(51,52)))),((38,(36,(37,(35,39)))),(56,(53,54)))),(44,47)))),(((65,(64,70)),(68,(66,(69,71)))),(67,72))),(45,46))));
	TREE * extraState = [&R] (1,((17,((((2,60),(33,34)),(18,74)),(5,6))),((((((19,(73,(50,((62,(3,4)),(61,63))))),(15,16)),((40,43),(48,(49,(41,42))))),(55,(((58,(57,((59,((8,((7,13),(12,((10,(23,(32,((21,(24,(20,25))),((22,28),(26,29)))))),(30,(27,31)))))),(11,(9,14)))),(51,52)))),((38,((35,37),(36,39))),(56,(53,54)))),(44,47)))),(72,(67,(68,((65,(64,70)),(66,(69,71))))))),(45,46))));
	TREE * extraState = [&R] (1,((17,((((2,60),(33,34)),(18,74)),(5,6))),((((((19,(73,(50,(4,(62,(3,(61,63))))))),(15,16)),((40,43),(48,(49,(41,42))))),(55,(((58,(57,((59,((8,((7,13),(12,(10,((23,(32,((21,(24,(20,25))),((22,28),(26,29))))),(30,(27,31))))))),(11,(9,14)))),(51,52)))),((38,((35,37),(36,39))),(56,(53,54)))),(44,47)))),(72,(67,(64,((70,(65,(66,68))),(69,71)))))),(45,46))));
	TREE * extraState = [&R] (1,((17,((((2,60),(33,34)),(18,74)),(5,6))),((((((19,(73,(50,((62,(3,4)),(61,63))))),(15,16)),((40,43),((41,42),(48,49)))),(55,(((58,(57,((59,((8,((7,13),(12,((10,(27,(30,31))),(24,((22,((28,(20,25)),(26,29))),(21,(23,32)))))))),(11,(9,14)))),(51,52)))),((36,(38,(39,(35,37)))),(56,(53,54)))),(44,47)))),(((65,(64,70)),((66,68),(69,71))),(67,72))),(45,46))));
	TREE * extraState = [&R] (1,((17,(((60,(2,(33,34))),(18,74)),(5,6))),((((((19,(73,(50,(4,((3,62),(61,63)))))),(15,16)),((40,43),(48,(49,(41,42))))),(55,(((57,((59,((8,((7,13),(12,(10,((((21,(24,(25,(20,28)))),(26,29)),(22,(23,32))),(27,(30,31))))))),(11,(9,14)))),(51,52))),(58,(56,((38,(36,(39,(35,37)))),(53,54))))),(44,47)))),((((65,(64,70)),(66,68)),(69,71)),(67,72))),(45,46))));
	TREE * extraState = [&R] (1,((17,(((60,(2,(33,34))),(18,74)),(5,6))),((((((19,(73,(50,((62,(3,4)),(61,63))))),(15,16)),((40,43),((41,42),(48,49)))),(55,(((58,(57,((59,((8,((7,13),(12,((10,(27,(30,31))),(24,(21,((29,(28,(20,25))),(26,(22,(23,32)))))))))),(11,(9,14)))),(51,52)))),((36,(38,(39,(35,37)))),(56,(53,54)))),(44,47)))),(72,(67,((65,(64,70)),(68,(66,(69,71))))))),(45,46))));
	TREE * extraState = [&R] (1,((17,((((2,60),(33,34)),(18,74)),(5,6))),((((((19,(73,(50,((62,(3,4)),(61,63))))),(15,16)),((40,43),((41,42),(48,49)))),(55,(((58,(57,((59,((8,((7,13),(12,(10,(30,(27,(31,(32,(23,((21,(24,(20,25))),((22,28),(26,29)))))))))))),(11,(9,14)))),(51,52)))),((38,(36,(35,(37,39)))),(56,(53,54)))),(44,47)))),(((65,(64,70)),(68,(66,(69,71)))),(67,72))),(45,46))));
	TREE * extraState = [&R] (1,((17,((((2,60),(33,34)),(18,74)),(5,6))),((((((19,(73,(50,((62,(3,4)),(61,63))))),(15,16)),((40,43),((41,42),(48,49)))),(55,(((58,(57,((59,((8,((7,13),(12,(10,((31,(32,(23,((21,(24,(20,25))),((22,28),(26,29)))))),(27,30)))))),(11,(9,14)))),(51,52)))),((38,(37,(35,(36,39)))),(56,(53,54)))),(44,47)))),(72,(67,((65,(64,70)),(68,(66,(69,71))))))),(45,46))));
	TREE * extraState = [&R] (1,((17,((((2,60),(33,34)),(18,74)),(5,6))),((((((19,(73,(50,(63,((3,4),(61,62)))))),(15,16)),((40,43),((41,42),(48,49)))),(55,(((58,(57,((59,((8,((7,13),(12,(10,((23,(32,((21,(24,(20,25))),((22,28),(26,29))))),(31,(27,30))))))),(11,(9,14)))),(51,52)))),((38,(36,(35,(37,39)))),(56,(53,54)))),(44,47)))),(72,(67,((68,(65,(64,70))),(66,(69,71)))))),(45,46))));
	TREE * extraState = [&R] (1,((17,(((60,(2,(33,34))),(18,74)),(5,6))),((((((19,(73,(50,(63,((3,4),(61,62)))))),(15,16)),((40,43),(49,(48,(41,42))))),(55,(((57,((59,((8,((7,13),(12,(10,((31,(32,(23,((21,(24,(20,25))),((22,28),(26,29)))))),(27,30)))))),(11,(9,14)))),(51,52))),(58,(56,((36,(38,(39,(35,37)))),(53,54))))),(44,47)))),((((65,(64,70)),(66,68)),(69,71)),(67,72))),(45,46))));
	TREE * extraState = [&R] (1,((17,((((2,60),(33,34)),(18,74)),(5,6))),((((((19,(73,(50,(4,(62,(3,(61,63))))))),(15,16)),((40,43),(49,(48,(41,42))))),(55,(((57,((59,((8,((7,13),(12,(10,((23,(32,((24,(25,(20,28))),(21,(22,(26,29)))))),(31,(27,30))))))),(11,(9,14)))),(51,52))),(58,(56,((38,(36,(37,(35,39)))),(53,54))))),(44,47)))),(72,(67,(64,((70,(65,(66,68))),(69,71)))))),(45,46))));
	TREE * extraState = [&R] (1,((17,(((60,(2,(33,34))),(18,74)),(5,6))),((((((19,(73,(50,((62,(3,4)),(61,63))))),(15,16)),((40,43),((41,42),(48,49)))),(55,(((57,((59,((8,((7,13),(12,((10,(27,(30,31))),(24,(21,((29,(28,(20,25))),(26,(22,(23,32)))))))))),(11,(9,14)))),(51,52))),(58,(56,((38,(36,(35,(37,39)))),(53,54))))),(44,47)))),(72,(67,((65,(64,70)),(68,(66,(69,71))))))),(45,46))));
	TREE * extraState = [&R] (1,((17,(((60,(2,(33,34))),(18,74)),(5,6))),((((((19,(73,(50,((62,(3,4)),(61,63))))),(15,16)),((40,43),((41,42),(48,49)))),(55,(((58,(57,((59,((8,((7,13),(12,(10,((27,(((21,(24,(25,(20,28)))),(26,29)),(22,(23,32)))),(30,31)))))),(11,(9,14)))),(51,52)))),((38,(36,(37,(35,39)))),(56,(53,54)))),(44,47)))),(72,(67,(((65,(64,70)),(66,68)),(69,71))))),(45,46))));
	TREE * extraState = [&R] (1,((17,((((2,60),(33,34)),(18,74)),(5,6))),((((((19,(73,(50,(4,((3,62),(61,63)))))),(15,16)),((40,43),((41,42),(48,49)))),(55,(((58,(57,((59,((8,((7,13),(12,((10,(27,(30,31))),(24,((22,(26,(29,(28,(20,25))))),(21,(23,32)))))))),(11,(9,14)))),(51,52)))),((38,(36,(37,(35,39)))),(56,(53,54)))),(44,47)))),((((65,(64,70)),(69,71)),(66,68)),(67,72))),(45,46))));
	TREE * extraState = [&R] (1,((17,((((2,60),(33,34)),(18,74)),(5,6))),((((((19,(73,(50,((62,(3,4)),(61,63))))),(15,16)),((40,43),(49,(48,(41,42))))),(55,(((58,(57,((59,((8,((7,13),(12,(10,((23,(32,((21,(24,(20,25))),((22,28),(26,29))))),(30,(27,31))))))),(11,(9,14)))),(51,52)))),((38,(36,(37,(35,39)))),(56,(53,54)))),(44,47)))),(72,(67,(((65,(64,70)),(66,68)),(69,71))))),(45,46))));
	TREE * extraState = [&R] (1,((17,(((60,(2,(33,34))),(18,74)),(5,6))),((((((19,(73,(50,(4,(62,(3,(61,63))))))),(15,16)),((40,43),((41,42),(48,49)))),(55,(((58,(57,((59,((8,((7,13),(12,(10,((23,(32,((21,(24,(20,25))),((22,28),(26,29))))),(31,(27,30))))))),(11,(9,14)))),(51,52)))),((38,(36,(37,(35,39)))),(56,(53,54)))),(44,47)))),(72,(67,(64,((70,(65,(66,68))),(69,71)))))),(45,46))));
	TREE * extraState = [&R] (1,((17,(((60,(2,(33,34))),(18,74)),(5,6))),((((((19,(73,(50,(4,(62,(3,(61,63))))))),(15,16)),((40,43),(49,(48,(41,42))))),(55,(((58,(57,((59,((8,((7,13),(12,(10,((((21,(24,(20,(25,28)))),(22,(23,32))),(26,29)),(27,(30,31))))))),(11,(9,14)))),(51,52)))),((38,(36,(37,(35,39)))),(56,(53,54)))),(44,47)))),(72,(67,((65,(64,70)),((66,68),(69,71)))))),(45,46))));
	TREE * extraState = [&R] (1,((17,((((2,60),(33,34)),(18,74)),(5,6))),((((((19,(73,(50,((62,(3,4)),(61,63))))),(15,16)),((40,43),((41,42),(48,49)))),(55,(((58,(57,((59,((8,((7,13),(12,(10,((23,(32,((24,(25,(20,28))),(21,(22,(26,29)))))),(30,(27,31))))))),(11,(9,14)))),(51,52)))),((38,(36,(35,(37,39)))),(56,(53,54)))),(44,47)))),(72,(67,((65,(64,70)),(68,(66,(69,71))))))),(45,46))));
	TREE * extraState = [&R] (1,((17,(((60,(2,(33,34))),(18,74)),(5,6))),((((((19,(73,(50,((62,(3,4)),(61,63))))),(15,16)),((40,43),(49,(48,(41,42))))),(55,(((58,(57,((59,((8,((7,13),(12,(10,((((24,(25,(20,28))),(23,32)),(21,(22,(26,29)))),(31,(27,30))))))),(11,(9,14)))),(51,52)))),((38,(36,(39,(35,37)))),(56,(53,54)))),(44,47)))),(((65,(64,70)),(68,(66,(69,71)))),(67,72))),(45,46))));
	TREE * extraState = [&R] (1,((17,((((2,60),(33,34)),(18,74)),(5,6))),((((((19,(73,(50,(4,(62,(3,(61,63))))))),(15,16)),((40,43),((41,42),(48,49)))),(55,(((57,((59,((8,((7,13),(12,((10,(27,(30,31))),(24,((22,((28,(20,25)),(26,29))),(21,(23,32)))))))),(11,(9,14)))),(51,52))),(58,(56,((38,(36,(35,(37,39)))),(53,54))))),(44,47)))),(72,(67,((65,(64,70)),(68,(66,(69,71))))))),(45,46))));
	TREE * extraState = [&R] (1,((17,(((60,(2,(33,34))),(18,74)),(5,6))),((((((19,(73,(50,((62,(3,4)),(61,63))))),(15,16)),((40,43),(49,(48,(41,42))))),(55,(((58,(57,((59,((8,((7,13),(12,(10,((31,(32,(23,((21,(24,(20,25))),((22,28),(26,29)))))),(27,30)))))),(11,(9,14)))),(51,52)))),((38,(35,(37,(36,39)))),(56,(53,54)))),(44,47)))),((((65,(64,70)),(69,71)),(66,68)),(67,72))),(45,46))));
	TREE * extraState = [&R] (1,((17,(((60,(2,(33,34))),(18,74)),(5,6))),((((((19,(73,(50,(4,((3,62),(61,63)))))),(15,16)),((40,43),(48,(49,(41,42))))),(55,(((58,(57,((59,((8,((7,13),(12,(10,((23,(32,((24,(25,(20,28))),(21,(22,(26,29)))))),(31,(27,30))))))),(11,(9,14)))),(51,52)))),((38,((35,37),(36,39))),(56,(53,54)))),(44,47)))),(((65,(64,70)),((66,68),(69,71))),(67,72))),(45,46))));
	TREE * extraState = [&R] (1,((17,(((60,(2,(33,34))),(18,74)),(5,6))),((((((19,(73,(50,(4,(62,(3,(61,63))))))),(15,16)),((40,43),((41,42),(48,49)))),(55,(((57,((59,((8,((7,13),(12,(10,((27,(((21,(24,(20,(25,28)))),(26,29)),(22,(23,32)))),(30,31)))))),(11,(9,14)))),(51,52))),(58,(56,((38,(36,(39,(35,37)))),(53,54))))),(44,47)))),(72,(67,((65,(64,70)),(68,(66,(69,71))))))),(45,46))));
	TREE * extraState = [&R] (1,((17,(((60,(2,(33,34))),(18,74)),(5,6))),((((((19,(73,(50,(4,(62,(3,(61,63))))))),(15,16)),((40,43),((41,42),(48,49)))),(55,(((58,(57,((59,((8,((7,13),(12,(10,((23,(32,((21,(24,(20,25))),((22,28),(26,29))))),(30,(27,31))))))),(11,(9,14)))),(51,52)))),((38,(36,(37,(35,39)))),(56,(53,54)))),(44,47)))),(72,(67,(64,((70,(65,(66,68))),(69,71)))))),(45,46))));
	TREE * extraState = [&R] (1,((17,((((2,60),(33,34)),(18,74)),(5,6))),((((((19,(73,(50,(63,((3,4),(61,62)))))),(15,16)),((40,43),(48,(49,(41,42))))),(55,(((57,((59,((8,((7,13),(12,((10,(27,(30,31))),(24,((22,((28,(20,25)),(26,29))),(21,(23,32)))))))),(11,(9,14)))),(51,52))),(58,(56,((38,(36,(35,(37,39)))),(53,54))))),(44,47)))),((68,((65,(64,70)),(66,(69,71)))),(67,72))),(45,46))));
	TREE * extraState = [&R] (1,((17,((((2,60),(33,34)),(18,74)),(5,6))),((((((19,(73,(50,(4,(62,(3,(61,63))))))),(15,16)),((40,43),((41,42),(48,49)))),(55,(((57,((59,((8,((7,13),(12,((10,(27,(30,31))),(24,((22,(26,(29,(28,(20,25))))),(21,(23,32)))))))),(11,(9,14)))),(51,52))),(58,(56,((36,(38,(39,(35,37)))),(53,54))))),(44,47)))),(((65,(64,70)),((66,68),(69,71))),(67,72))),(45,46))));
	TREE * extraState = [&R] (1,((17,((((2,60),(33,34)),(18,74)),(5,6))),((((((19,(73,(50,(4,(62,(3,(61,63))))))),(15,16)),((40,43),(49,(48,(41,42))))),(55,(((58,(57,((59,((8,((7,13),(12,(10,((23,(32,((24,(25,(20,28))),(21,(22,(26,29)))))),(31,(27,30))))))),(11,(9,14)))),(51,52)))),((38,(36,(37,(35,39)))),(56,(53,54)))),(44,47)))),(72,(67,(64,((70,(65,(66,68))),(69,71)))))),(45,46))));
	TREE * extraState = [&R] (1,((17,((((2,60),(33,34)),(18,74)),(5,6))),((((((19,(73,(50,((62,(3,4)),(61,63))))),(15,16)),((40,43),(48,(49,(41,42))))),(55,(((58,(57,((59,((8,((7,13),(12,(10,((27,(((21,(24,(25,(20,28)))),(26,29)),(22,(23,32)))),(30,31)))))),(11,(9,14)))),(51,52)))),((38,(36,(39,(35,37)))),(56,(53,54)))),(44,47)))),(((68,(65,(64,70))),(66,(69,71))),(67,72))),(45,46))));
	TREE * extraState = [&R] (1,((17,(((60,(2,(33,34))),(18,74)),(5,6))),((((((19,(73,(50,(63,((3,4),(61,62)))))),(15,16)),((40,43),(49,(48,(41,42))))),(55,(((58,(57,((59,((8,((7,13),(12,(10,((((21,(24,(25,(20,28)))),(26,29)),(22,(23,32))),(27,(30,31))))))),(11,(9,14)))),(51,52)))),((38,(36,(39,(35,37)))),(56,(53,54)))),(44,47)))),(72,(67,((68,(65,(64,70))),(66,(69,71)))))),(45,46))));
	TREE * extraState = [&R] (1,((17,((((2,60),(33,34)),(18,74)),(5,6))),((((((19,(73,(50,(4,(62,(3,(61,63))))))),(15,16)),((40,43),(49,(48,(41,42))))),(55,(((58,(57,((59,((8,((7,13),(12,(10,((23,(32,((21,(24,(20,25))),((22,28),(26,29))))),(31,(27,30))))))),(11,(9,14)))),(51,52)))),((38,(36,(39,(35,37)))),(56,(53,54)))),(44,47)))),(72,(67,(((65,(64,70)),(69,71)),(66,68))))),(45,46))));
	TREE * extraState = [&R] (1,((17,(((60,(2,(33,34))),(18,74)),(5,6))),((((((19,(73,(50,(63,((3,4),(61,62)))))),(15,16)),((40,43),(48,(49,(41,42))))),(55,(((57,((59,((8,((7,13),(12,(10,((23,(32,((24,(25,(20,28))),(21,(22,(26,29)))))),(30,(27,31))))))),(11,(9,14)))),(51,52))),(58,(56,((38,(36,(35,(37,39)))),(53,54))))),(44,47)))),(72,(67,((65,(64,70)),(68,(66,(69,71))))))),(45,46))));
	TREE * extraState = [&R] (1,((17,(((60,(2,(33,34))),(18,74)),(5,6))),((((((19,(73,(50,((62,(3,4)),(61,63))))),(15,16)),((40,43),(48,(49,(41,42))))),(55,(((58,(57,((59,((8,((7,13),(12,(10,((23,(32,((24,(25,(20,28))),(21,(22,(26,29)))))),(31,(27,30))))))),(11,(9,14)))),(51,52)))),((38,(37,(35,(36,39)))),(56,(53,54)))),(44,47)))),((((65,(64,70)),(69,71)),(66,68)),(67,72))),(45,46))));
	TREE * extraState = [&R] (1,((17,(((60,(2,(33,34))),(18,74)),(5,6))),((((((19,(73,(50,(4,((3,62),(61,63)))))),(15,16)),((40,43),((41,42),(48,49)))),(55,(((58,(57,((59,((8,((7,13),(12,(10,((((24,(25,(20,28))),(23,32)),(21,(22,(26,29)))),(31,(27,30))))))),(11,(9,14)))),(51,52)))),((38,(36,(37,(35,39)))),(56,(53,54)))),(44,47)))),(((65,(64,70)),((66,68),(69,71))),(67,72))),(45,46))));
	TREE * extraState = [&R] (1,((17,((((2,60),(33,34)),(18,74)),(5,6))),((((((19,(73,(50,(63,((3,4),(61,62)))))),(15,16)),((40,43),(49,(48,(41,42))))),(55,(((57,((59,((8,((7,13),(12,(10,((23,(32,((21,(24,(20,25))),((22,28),(26,29))))),(30,(27,31))))))),(11,(9,14)))),(51,52))),(58,(56,((38,(36,(35,(37,39)))),(53,54))))),(44,47)))),(72,(67,(68,((65,(64,70)),(66,(69,71))))))),(45,46))));
	TREE * extraState = [&R] (1,((17,(((60,(2,(33,34))),(18,74)),(5,6))),((((((19,(73,(50,(4,(62,(3,(61,63))))))),(15,16)),((40,43),(48,(49,(41,42))))),(55,(((58,(57,((59,((8,((7,13),(12,(10,((23,(32,((24,(25,(20,28))),(21,(22,(26,29)))))),(30,(27,31))))))),(11,(9,14)))),(51,52)))),((38,(37,(35,(36,39)))),(56,(53,54)))),(44,47)))),(72,(67,((65,(64,70)),((66,68),(69,71)))))),(45,46))));
	TREE * extraState = [&R] (1,((17,(((60,(2,(33,34))),(18,74)),(5,6))),((((((19,(73,(50,(4,(62,(3,(61,63))))))),(15,16)),((40,43),((41,42),(48,49)))),(55,(((58,(57,((59,((8,((7,13),(12,((10,(27,(30,31))),(24,((22,((28,(20,25)),(26,29))),(21,(23,32)))))))),(11,(9,14)))),(51,52)))),((38,(36,(37,(35,39)))),(56,(53,54)))),(44,47)))),(72,(67,(((65,(64,70)),(69,71)),(66,68))))),(45,46))));
	TREE * extraState = [&R] (1,((17,(((60,(2,(33,34))),(18,74)),(5,6))),((((((19,(73,(50,((62,(3,4)),(61,63))))),(15,16)),((40,43),((41,42),(48,49)))),(55,(((58,(57,((59,((8,((7,13),(12,(10,((((21,(24,(25,(20,28)))),(22,(23,32))),(26,29)),(27,(30,31))))))),(11,(9,14)))),(51,52)))),((38,(36,(37,(35,39)))),(56,(53,54)))),(44,47)))),(((68,(65,(64,70))),(66,(69,71))),(67,72))),(45,46))));
	TREE * inapplicable = [&R] (1,(((18,(5,6)),(60,(2,(34,33)))),(((((44,47),(42,(41,((40,43),(48,(49,((45,46),(74,17)))))))),((59,(58,((52,(51,(57,(53,55)))),(54,56)))),(((14,9),(11,((16,15),((64,((70,(65,(66,68))),(69,71))),(67,72))))),((12,((31,(30,(10,27))),((32,(21,23)),(((22,28),(26,29)),(24,(25,20)))))),(8,(7,13)))))),(38,((39,36),(35,37)))),(19,(73,(50,((62,(61,63)),(3,4))))))));
	TREE * inapplicable = [&R] (1,(((18,(6,5)),(60,(2,(34,33)))),(((((42,(41,((40,43),(48,(49,(46,(45,(17,74)))))))),(47,44)),((58,((56,54),(((9,14),(11,(((64,(((70,65),(68,66)),(69,71))),(67,72)),(15,16)))),(8,(13,(7,(12,((((23,(28,(22,(26,29)))),(32,(21,(24,(20,25))))),(27,10)),(30,31))))))))),((57,(55,53)),(51,(59,52))))),(38,((39,36),(35,37)))),(19,(73,(50,((62,(63,61)),(4,3))))))));
	TREE * inapplicable = [&R] (1,((((((42,(41,((48,(49,(46,(45,(74,17))))),(43,40)))),(44,47)),((58,(51,(52,((55,57),(56,(54,53)))))),(59,(((9,14),(11,(((64,(((65,70),(66,68)),(71,69))),(72,67)),(16,15)))),(8,((7,13),(12,(((10,27),((23,(28,(22,(26,29)))),(32,(21,(24,(25,20)))))),(30,31))))))))),(38,((39,36),(35,37)))),(19,(73,(50,((62,(61,63)),(4,3)))))),((6,(18,5)),(60,(2,(33,34))))));
	TREE * inapplicable = [&R] (1,((((((58,((52,(51,(57,(55,53)))),(56,54))),(59,((8,((13,7),(12,(((10,27),((23,(28,(22,(26,29)))),(32,(21,(24,(25,20)))))),(31,30))))),((14,9),(11,(((64,((70,(65,(66,68))),(69,71))),(67,72)),(15,16))))))),((42,(41,((48,(49,(45,(46,(17,74))))),(40,43)))),(44,47))),(38,((39,36),(37,35)))),(19,(73,(50,((62,(61,63)),(4,3)))))),((6,(18,5)),(60,(2,(33,34))))));
	TREE * inapplicable = [&R] (1,(((6,(5,18)),(60,(2,(33,34)))),(((((44,47),(42,(41,((48,(49,(45,(46,(17,74))))),(40,43))))),((59,(58,((52,(51,(57,(53,55)))),(54,56)))),(((12,((31,(30,(27,10))),((32,(23,21)),((28,(22,(26,29))),(24,(25,20)))))),(8,(7,13))),((9,14),((11,(16,15)),((64,((70,(65,(66,68))),(69,71))),(67,72))))))),(38,((39,36),(35,37)))),(19,(73,(50,((62,(61,63)),(3,4))))))));
	TREE * inapplicable = [&R] (1,(((6,(18,5)),(60,(2,(33,34)))),(((((42,(41,((48,(49,((45,46),(74,17)))),(43,40)))),(44,47)),((58,((54,56),(((11,(((64,(((70,65),(66,68)),(71,69))),(72,67)),(16,15))),(14,9)),(8,((7,13),(12,((((23,(32,21)),(28,(22,(26,29)))),(24,(25,20))),((31,30),(10,27))))))))),((51,(52,59)),(57,(53,55))))),(38,((36,39),(37,35)))),(19,(73,(50,((62,(61,63)),(3,4))))))));
	TREE * inapplicable = [&R] (1,((((((58,(51,(52,((57,55),(56,(53,54)))))),(59,(((11,(((64,((70,(65,(68,66))),(69,71))),(67,72)),(15,16))),(9,14)),(8,((12,((30,31),((10,27),((32,(21,(24,(25,20)))),(23,(28,(22,(26,29)))))))),(13,7)))))),((44,47),(42,(41,((48,(49,(46,(45,(17,74))))),(40,43)))))),(38,((37,35),(39,36)))),(19,(73,(50,((62,(61,63)),(4,3)))))),((6,(5,18)),(60,(2,(34,33))))));
	TREE * inapplicable = [&R] (1,((((((42,(41,((48,(49,(45,(46,(74,17))))),(43,40)))),(47,44)),((59,(58,((54,56),(52,(51,(57,(53,55))))))),(((8,(7,13)),(12,((31,(30,(10,27))),((32,(23,21)),(((28,22),(29,26)),(24,(25,20))))))),((11,((16,15),((64,(((70,65),(68,66)),(71,69))),(67,72)))),(9,14))))),(38,((39,36),(35,37)))),(19,(73,(50,((62,(63,61)),(4,3)))))),((6,(18,5)),(60,(2,(34,33))))));
	TREE * inapplicable = [&R] (1,((((((47,44),(42,(41,((48,(49,((46,45),(17,74)))),(40,43))))),((58,((54,56),(((9,14),(11,((15,16),((64,((70,(65,(66,68))),(69,71))),(67,72))))),(8,((13,7),(12,((30,(31,(32,(23,(21,((28,(22,(26,29))),(24,(20,25)))))))),(10,27)))))))),((51,(59,52)),(57,(55,53))))),(38,((39,36),(35,37)))),(19,(73,(50,((3,4),(62,(63,61))))))),((6,(18,5)),(60,(2,(34,33))))));
	TREE * inapplicable = [&R] (1,((((((59,(((11,(((64,(((70,65),(68,66)),(71,69))),(67,72)),(15,16))),(9,14)),(8,((13,7),(12,((((23,(28,(22,(26,29)))),(32,(21,(24,(20,25))))),(10,27)),(31,30))))))),(58,(51,(52,((55,57),(56,(54,53))))))),((47,44),(42,(41,((48,(49,(46,(45,(74,17))))),(43,40)))))),(38,((39,36),(37,35)))),(19,(73,(50,((62,(61,63)),(3,4)))))),((60,(2,(34,33))),(18,(5,6)))));
	TREE * inapplicable = [&R] (1,((((((59,(58,((52,(51,(57,(53,55)))),(56,54)))),(((9,14),(11,((16,15),((64,((69,71),((70,65),(66,68)))),(72,67))))),((8,(13,7)),(12,((31,(30,(27,10))),((32,(23,21)),((28,(22,(29,26))),(24,(25,20))))))))),((47,44),(42,(41,((48,(49,(46,(45,(74,17))))),(40,43)))))),(38,((35,37),(36,39)))),(19,(73,(50,((62,(63,61)),(4,3)))))),((18,(6,5)),(60,(2,(33,34))))));
	TREE * inapplicable = [&R] (1,((((((58,((52,(51,(57,(53,55)))),(56,54))),(59,(((11,((16,15),((64,((70,(65,(68,66))),(71,69))),(72,67)))),(9,14)),(8,((12,((((32,(21,(24,(20,25)))),(23,(28,(22,(29,26))))),(27,10)),(31,30))),(13,7)))))),((44,47),(42,(41,((48,(49,((46,45),(74,17)))),(43,40)))))),(38,((36,39),(37,35)))),(19,(73,(50,((3,4),(62,(61,63))))))),((60,(2,(34,33))),(18,(5,6)))));
	TREE * inapplicable = [&R] (1,(((18,(5,6)),(60,(2,(33,34)))),(((((42,(41,((43,40),(48,(49,(45,(46,(74,17)))))))),(44,47)),((58,((54,56),(((11,(((64,(((65,70),(66,68)),(71,69))),(72,67)),(16,15))),(14,9)),(8,((13,7),(12,((((23,(28,(22,(29,26)))),(32,(21,(24,(25,20))))),(10,27)),(31,30)))))))),((51,(52,59)),(57,(53,55))))),(38,((36,39),(37,35)))),(19,(73,(50,((62,(61,63)),(3,4))))))));
	TREE * inapplicable = [&R] (1,((((((42,(41,((48,(49,(45,(46,(74,17))))),(43,40)))),(44,47)),((58,((52,(51,(57,(55,53)))),(54,56))),(59,(((11,(((64,((70,(65,(68,66))),(71,69))),(72,67)),(16,15))),(14,9)),(8,((7,13),(12,(((10,27),((23,(28,(22,(26,29)))),(32,(21,(24,(25,20)))))),(31,30))))))))),(38,((39,36),(37,35)))),(19,(73,(50,((4,3),(62,(63,61))))))),((18,(6,5)),(60,(2,(33,34))))));
	TREE * inapplicable = [&R] (1,(((60,(2,(33,34))),(6,(18,5))),(((((58,((56,54),(((11,(((64,((70,(65,(66,68))),(69,71))),(67,72)),(16,15))),(14,9)),(8,((13,7),(12,((10,27),(30,(31,(32,(23,((21,(24,(20,25))),((22,28),(26,29)))))))))))))),((51,(52,59)),(57,(53,55)))),((47,44),(42,(41,((48,(49,(46,(45,(74,17))))),(40,43)))))),(38,((35,37),(39,36)))),(19,(73,(50,((4,3),(62,(63,61)))))))));
	TREE * inapplicable = [&R] (1,((((((58,((52,(51,(57,(55,53)))),(54,56))),(59,(((11,((16,15),((64,(((70,65),(66,68)),(71,69))),(72,67)))),(9,14)),(8,((7,13),(12,(((27,10),((23,(28,(22,(29,26)))),(32,(21,(24,(20,25)))))),(30,31)))))))),((47,44),(42,(41,((48,(49,(45,(46,(74,17))))),(43,40)))))),(38,((36,39),(37,35)))),(19,(73,(50,((62,(61,63)),(4,3)))))),((18,(6,5)),(60,(2,(34,33))))));
	TREE * inapplicable = [&R] (1,((((((58,((51,(59,52)),(57,(55,53)))),((54,56),((13,(8,(7,(12,((30,31),((10,27),((23,(28,(22,(26,29)))),(32,(21,(24,(20,25))))))))))),((11,(14,(9,(16,15)))),((64,((70,(65,(66,68))),(71,69))),(67,72)))))),((42,(41,((48,(49,(45,(46,(17,74))))),(43,40)))),(47,44))),(38,((37,35),(39,36)))),(19,(73,(50,((62,(63,61)),(4,3)))))),((18,(6,5)),(60,(2,(34,33))))));
	TREE * inapplicable = [&R] (1,((((((59,(58,((52,(51,(57,(53,55)))),(56,54)))),(((14,(9,(16,15))),(11,((64,((71,69),(70,(65,(66,68))))),(72,67)))),((8,(13,7)),(12,((31,(30,(27,10))),((32,(21,23)),((24,(20,25)),(28,(22,(29,26)))))))))),((44,47),(42,(41,((40,43),(48,(49,(46,(45,(74,17)))))))))),(38,((35,37),(36,39)))),(19,(73,(50,((62,(63,61)),(3,4)))))),((18,(6,5)),(60,(2,(33,34))))));
	TREE * inapplicable = [&R] (1,((((((59,(58,((52,(51,(57,(55,53)))),(54,56)))),(((11,(((64,(((65,70),(68,66)),(69,71))),(67,72)),(15,16))),(14,9)),((8,(7,13)),(12,((31,(30,(27,10))),((32,(23,21)),((24,(25,20)),((28,22),(29,26))))))))),((47,44),(42,(41,((48,(49,(46,(45,(74,17))))),(43,40)))))),(38,((36,39),(35,37)))),(19,(73,(50,((62,(63,61)),(3,4)))))),((60,(2,(34,33))),(6,(18,5)))));
	TREE * inapplicable = [&R] (1,(((18,(5,6)),(60,(2,(34,33)))),(((((42,(41,((48,(49,(45,(46,(17,74))))),(43,40)))),(47,44)),((58,((56,54),(((11,(((64,((70,(65,(68,66))),(69,71))),(67,72)),(15,16))),(9,14)),(8,(13,(7,(12,((((23,(28,(22,(26,29)))),(32,(21,(24,(20,25))))),(27,10)),(30,31))))))))),((51,(59,52)),(57,(55,53))))),(38,((39,36),(35,37)))),(19,(73,(50,((62,(63,61)),(4,3))))))));
	TREE * inapplicable = [&R] (1,((((((58,(((51,(59,52)),(57,(53,55))),(54,56))),((13,(8,(7,(12,(((27,10),((23,(28,(22,(29,26)))),(32,(21,(24,(20,25)))))),(31,30)))))),((11,(14,(9,(16,15)))),((64,((70,(65,(68,66))),(71,69))),(72,67))))),((47,44),(42,(41,((48,(49,(45,(46,(74,17))))),(43,40)))))),(38,((39,36),(37,35)))),(19,(73,(50,((3,4),(62,(63,61))))))),((18,(6,5)),(60,(2,(34,33))))));
	TREE * inapplicable = [&R] (1,((((((58,(((51,(59,52)),(57,(53,55))),(54,56))),((13,(8,(7,(12,(((27,10),((23,(28,(22,(29,26)))),(32,(21,(24,(20,25)))))),(31,30)))))),((11,(14,(9,(16,15)))),((64,((70,(65,(68,66))),(71,69))),(72,67))))),((47,44),(42,(41,((48,(49,((45,46),(74,17)))),(43,40)))))),(38,((39,36),(37,35)))),(19,(73,(50,((3,4),(62,(63,61))))))),((18,(6,5)),(60,(2,(34,33))))));
	TREE * inapplicable = [&R] (1,((((((59,(58,((52,(51,(57,(53,55)))),(54,56)))),(((8,(13,7)),(12,((31,(30,(27,10))),((32,(21,23)),(((28,22),(29,26)),(24,(25,20))))))),(((11,(15,16)),((64,((69,71),(70,(65,(68,66))))),(67,72))),(14,9)))),((44,47),(42,(41,((48,(49,((45,46),(17,74)))),(40,43)))))),(38,((39,36),(35,37)))),(19,(73,(50,((62,(61,63)),(3,4)))))),((6,(18,5)),(60,(2,(34,33))))));
	TREE * inapplicable = [&R] (1,(((18,(6,5)),(60,(2,(34,33)))),(((((59,(58,((54,56),(52,(51,(57,(53,55))))))),(((9,14),(11,((16,15),((64,(((70,65),(68,66)),(71,69))),(72,67))))),((8,(7,13)),(12,((((28,(22,(29,26))),(24,(25,20))),(32,(21,23))),(31,(30,(10,27)))))))),((44,47),(42,(41,((48,(49,((46,45),(17,74)))),(40,43)))))),(38,((39,36),(35,37)))),(19,(73,(50,((62,(63,61)),(3,4))))))));
	TREE * inapplicable = [&R] (1,(((60,(2,(34,33))),(6,(18,5))),(((((58,((56,54),((8,((13,7),(12,((30,(31,(32,(23,(21,((24,(20,25)),((22,28),(26,29)))))))),(27,10))))),((14,9),(11,((16,15),((64,(((65,70),(68,66)),(69,71))),(67,72)))))))),((51,(59,52)),(57,(53,55)))),((47,44),(42,(41,((48,(49,(45,(46,(74,17))))),(40,43)))))),(38,((35,37),(36,39)))),(19,(73,(50,((3,4),(62,(63,61)))))))));
	TREE * inapplicable = [&R] (1,((((((58,((51,(59,52)),(57,(55,53)))),((54,56),((13,(8,(7,(12,((30,31),((10,27),((23,(28,(22,(26,29)))),(32,(21,(24,(20,25))))))))))),((11,(14,(9,(16,15)))),((64,(((70,65),(66,68)),(71,69))),(67,72)))))),((42,(41,((48,(49,(45,(46,(17,74))))),(43,40)))),(47,44))),(38,((37,35),(36,39)))),(19,(73,(50,((62,(63,61)),(4,3)))))),((6,(18,5)),(60,(2,(34,33))))));
	TREE * inapplicable = [&R] (1,((((((58,((52,(51,(57,(55,53)))),(54,56))),(59,(((9,14),(11,((16,15),((64,((71,69),((70,65),(68,66)))),(72,67))))),(8,((13,7),(12,((30,31),((10,27),((32,(21,(24,(20,25)))),(23,(28,(22,(29,26))))))))))))),((42,(41,((48,(49,((46,45),(74,17)))),(43,40)))),(47,44))),(38,((36,39),(35,37)))),(19,(73,(50,((62,(61,63)),(3,4)))))),((18,(6,5)),(60,(2,(34,33))))));
	TREE * inapplicable = [&R] (1,((((((42,(41,((48,(49,(45,(46,(17,74))))),(40,43)))),(47,44)),((58,(51,(52,((56,(54,53)),(57,55))))),(59,(((11,(((64,((70,(65,(68,66))),(69,71))),(67,72)),(15,16))),(9,14)),(8,((13,7),(12,((((32,(21,(24,(20,25)))),(23,(28,(22,(29,26))))),(27,10)),(30,31))))))))),(38,((36,39),(37,35)))),(19,(73,(50,((62,(63,61)),(3,4)))))),((6,(18,5)),(60,(2,(34,33))))));
	TREE * inapplicable = [&R] (1,(((6,(5,18)),(60,(2,(34,33)))),(((((58,((56,54),(((11,(((64,((70,(65,(66,68))),(69,71))),(67,72)),(16,15))),(14,9)),(8,((7,13),(12,((30,(31,(32,(23,(21,((24,(25,20)),(28,(22,(26,29))))))))),(27,10)))))))),((57,(55,53)),(51,(52,59)))),((47,44),((42,(41,(48,(49,((46,45),(74,17)))))),(40,43)))),(38,((35,37),(39,36)))),(19,(73,(50,((4,3),(62,(63,61)))))))));
	TREE * inapplicable = [&R] (1,((((((58,(51,(52,((55,57),(53,(56,54)))))),(59,((8,((13,7),(12,((((23,(28,(22,(26,29)))),(32,(21,(24,(25,20))))),(10,27)),(30,31))))),((11,(((64,(((70,65),(68,66)),(71,69))),(67,72)),(15,16))),(9,14))))),((44,47),(42,(41,((43,40),(48,(49,((45,46),(74,17))))))))),(38,((39,36),(35,37)))),(19,(73,(50,((62,(63,61)),(3,4)))))),((60,(2,(34,33))),(18,(5,6)))));
	TREE * inapplicable = [&R] (1,((((((42,(41,((40,43),(48,(49,(45,(46,(17,74)))))))),(47,44)),((58,((52,(51,(57,(53,55)))),(56,54))),(59,(((11,(((64,(((65,70),(66,68)),(69,71))),(67,72)),(15,16))),(9,14)),(8,((13,7),(12,(((27,10),((32,(21,(24,(20,25)))),(23,(28,(22,(26,29)))))),(30,31))))))))),(38,((36,39),(35,37)))),(19,(73,(50,((3,4),(62,(63,61))))))),((6,(18,5)),(60,(2,(34,33))))));
	TREE * inapplicable = [&R] (1,((((((59,(58,((52,(51,(57,(55,53)))),(56,54)))),(((14,9),(11,((16,15),((64,(((70,65),(66,68)),(71,69))),(72,67))))),((8,(13,7)),(12,((31,(30,(27,10))),((32,(21,23)),(((28,22),(29,26)),(24,(20,25))))))))),((44,47),(42,(41,((48,(49,((46,45),(17,74)))),(40,43)))))),(38,((39,36),(37,35)))),(19,(73,(50,((62,(61,63)),(4,3)))))),((18,(5,6)),(60,(2,(33,34))))));
	TREE * inapplicable = [&R] (1,((((((42,(41,((48,(49,(45,(46,(17,74))))),(40,43)))),(47,44)),((59,(58,((52,(51,(57,(55,53)))),(56,54)))),((((11,(15,16)),((64,((70,(65,(68,66))),(71,69))),(67,72))),(14,9)),((8,(7,13)),(12,((31,(30,(10,27))),((32,(21,23)),((28,(22,(29,26))),(24,(20,25)))))))))),(38,((36,39),(35,37)))),(19,(73,(50,((62,(63,61)),(3,4)))))),((18,(6,5)),(60,(2,(33,34))))));
	TREE * inapplicable = [&R] (1,((((((59,(58,((54,56),(52,(51,(57,(55,53))))))),(((14,(9,(15,16))),(11,((64,((70,(65,(66,68))),(69,71))),(67,72)))),((8,(7,13)),(12,((31,(30,(27,10))),((32,(21,23)),((28,(22,(26,29))),(24,(25,20))))))))),((47,44),(42,(41,((48,(49,((45,46),(17,74)))),(40,43)))))),(38,((36,39),(35,37)))),(19,(73,(50,((62,(61,63)),(3,4)))))),((18,(6,5)),(60,(2,(34,33))))));
	TREE * inapplicable = [&R] (1,((((((58,(51,(52,((57,55),(56,(53,54)))))),(59,((8,((13,7),(12,((31,30),((27,10),((23,(28,(22,(29,26)))),(32,(21,(24,(25,20)))))))))),((11,(((64,(((65,70),(66,68)),(69,71))),(72,67)),(16,15))),(14,9))))),((47,44),(42,(41,((40,43),(48,(49,(45,(46,(17,74)))))))))),(38,((36,39),(37,35)))),(19,(73,(50,((62,(63,61)),(4,3)))))),((60,(2,(33,34))),(6,(18,5)))));
	TREE * inapplicable = [&R] (1,((((((58,((52,(51,(57,(53,55)))),(56,54))),(59,(((11,(((64,((70,(65,(66,68))),(71,69))),(72,67)),(16,15))),(9,14)),(8,((7,13),(12,(((10,27),((32,(21,(24,(20,25)))),(23,(28,(22,(29,26)))))),(31,30)))))))),((44,47),(42,(41,((48,(49,(46,(45,(17,74))))),(40,43)))))),(38,((39,36),(37,35)))),(19,(73,(50,((62,(63,61)),(4,3)))))),((60,(2,(33,34))),(18,(5,6)))));
	TREE * inapplicable = [&R] (1,(((18,(5,6)),(60,(2,(33,34)))),(((((58,(51,(52,((53,(56,54)),(55,57))))),(59,(((9,14),(11,(((64,((70,(65,(68,66))),(71,69))),(72,67)),(15,16)))),(8,((7,13),(12,(((10,27),((23,(28,(22,(29,26)))),(32,(21,(24,(20,25)))))),(30,31)))))))),((44,47),(42,(41,((48,(49,(45,(46,(74,17))))),(43,40)))))),(38,((36,39),(37,35)))),(19,(73,(50,((4,3),(62,(61,63)))))))));
	TREE * inapplicable = [&R] (1,(((6,(5,18)),(60,(2,(34,33)))),(((((58,((56,54),(((14,9),(11,(((64,((70,(65,(68,66))),(71,69))),(67,72)),(16,15)))),(8,((13,7),(12,((30,(31,(32,(23,((21,(24,(25,20))),((28,22),(29,26))))))),(27,10)))))))),((51,(59,52)),(57,(55,53)))),((47,44),((42,(41,(48,(49,((45,46),(74,17)))))),(40,43)))),(38,((37,35),(39,36)))),(19,(73,(50,((3,4),(62,(61,63)))))))));
	TREE * inapplicable = [&R] (1,((((((58,(((57,(55,53)),(51,(59,52))),(54,56))),((13,(8,(7,(12,((30,31),((27,10),((23,(28,(22,(29,26)))),(32,(21,(24,(20,25))))))))))),((11,(14,(9,(16,15)))),((64,((70,(65,(66,68))),(71,69))),(67,72))))),((42,(41,((48,(49,(45,(46,(17,74))))),(43,40)))),(47,44))),(38,((36,39),(35,37)))),(19,(73,(50,((62,(63,61)),(3,4)))))),((6,(18,5)),(60,(2,(34,33))))));
	TREE * inapplicable = [&R] (1,(((18,(5,6)),(60,(2,(33,34)))),(((((59,(58,((54,56),(52,(51,(57,(53,55))))))),(((11,((16,15),((64,(((65,70),(66,68)),(71,69))),(72,67)))),(14,9)),((8,(7,13)),(12,((31,(30,(27,10))),(((24,(25,20)),((22,28),(26,29))),(32,(23,21)))))))),((44,47),(42,(41,((48,(49,(46,(45,(17,74))))),(40,43)))))),(38,((39,36),(35,37)))),(19,(73,(50,((62,(63,61)),(3,4))))))));
	TREE * inapplicable = [&R] (1,(((60,(2,(34,33))),(6,(5,18))),(((((58,((54,56),((8,((7,13),(12,((31,30),((10,27),((32,(21,(24,(25,20)))),(23,(28,(22,(29,26)))))))))),((9,14),(11,(((64,(((65,70),(66,68)),(71,69))),(72,67)),(15,16))))))),((51,(59,52)),(57,(55,53)))),((44,47),(42,(41,((48,(49,(45,(46,(17,74))))),(43,40)))))),(38,((39,36),(35,37)))),(19,(73,(50,((4,3),(62,(61,63)))))))));
	TREE * inapplicable = [&R] (1,((((((58,(51,(52,((55,57),(56,(54,53)))))),(59,(((11,((16,15),((64,((70,(65,(66,68))),(71,69))),(72,67)))),(9,14)),(8,((13,7),(12,(((10,27),((23,(28,(22,(29,26)))),(32,(21,(24,(20,25)))))),(31,30)))))))),((44,47),(42,(41,((48,(49,(45,(46,(74,17))))),(43,40)))))),(38,((39,36),(35,37)))),(19,(73,(50,((62,(61,63)),(4,3)))))),((60,(2,(34,33))),(18,(6,5)))));
	TREE * inapplicable = [&R] (1,((((((58,(51,(52,((55,57),(53,(54,56)))))),(59,((8,((12,((30,31),((27,10),((23,(28,(22,(29,26)))),(32,(21,(24,(20,25)))))))),(13,7))),((11,(((64,((70,(65,(66,68))),(69,71))),(72,67)),(16,15))),(9,14))))),((44,47),(42,(41,((48,(49,(46,(45,(17,74))))),(40,43)))))),(38,((39,36),(37,35)))),(19,(73,(50,((62,(61,63)),(3,4)))))),((60,(2,(34,33))),(18,(5,6)))));
	TREE * inapplicable = [&R] (1,(((6,(5,18)),(60,(2,(34,33)))),(((((58,((56,54),(((11,(((64,(((70,65),(66,68)),(69,71))),(67,72)),(16,15))),(14,9)),(8,((7,13),(12,((30,(31,(32,((23,21),((24,(25,20)),(28,(22,(26,29)))))))),(27,10)))))))),((57,(55,53)),(51,(52,59)))),((47,44),((42,(41,(48,(49,((46,45),(74,17)))))),(40,43)))),(38,((35,37),(39,36)))),(19,(73,(50,((4,3),(62,(63,61)))))))));
	TREE * inapplicable = [&R] (1,((((((47,44),((42,(41,(48,(49,((45,46),(17,74)))))),(40,43))),((58,((54,56),(((9,14),(11,(((64,((69,71),((65,70),(66,68)))),(67,72)),(15,16)))),(8,((13,7),(12,((30,(31,(32,(23,((21,(24,(20,25))),((22,28),(29,26))))))),(27,10)))))))),((51,(59,52)),(57,(55,53))))),(38,((39,36),(35,37)))),(19,(73,(50,((3,4),(62,(63,61))))))),((6,(5,18)),(60,(2,(34,33))))));
	TREE * inapplicable = [&R] (1,((((((58,(51,(52,((56,(53,54)),(57,55))))),(59,((8,((7,13),(12,((((32,(21,(24,(25,20)))),(23,(28,(22,(26,29))))),(10,27)),(31,30))))),((11,(((64,(((70,65),(66,68)),(69,71))),(67,72)),(15,16))),(14,9))))),((42,(41,((48,(49,((45,46),(17,74)))),(40,43)))),(44,47))),(38,((36,39),(35,37)))),(19,(73,(50,((4,3),(62,(61,63))))))),((6,(5,18)),(60,(2,(33,34))))));
	TREE * inapplicable = [&R] (1,((((((59,((8,((13,7),(12,(((10,27),((23,(28,(22,(26,29)))),(32,(21,(24,(25,20)))))),(30,31))))),((9,14),(11,(((64,((70,(65,(68,66))),(71,69))),(67,72)),(15,16)))))),(58,(51,(52,((55,57),(56,(53,54))))))),((42,(41,((48,(49,(46,(45,(17,74))))),(40,43)))),(44,47))),(38,((35,37),(39,36)))),(19,(73,(50,((62,(61,63)),(4,3)))))),((60,(2,(33,34))),(18,(5,6)))));
	TREE * inapplicable = [&R] (1,(((18,(6,5)),(60,(2,(34,33)))),(((((42,(41,((48,(49,((46,45),(74,17)))),(43,40)))),(44,47)),((59,(58,((52,(51,(57,(55,53)))),(56,54)))),(((14,(9,(15,16))),(11,((64,((70,(65,(68,66))),(71,69))),(72,67)))),((8,(7,13)),(12,(((((28,22),(29,26)),(24,(20,25))),(32,(21,23))),(31,(30,(10,27))))))))),(38,((36,39),(35,37)))),(19,(73,(50,((62,(63,61)),(4,3))))))));
	TREE * inapplicable = [&R] (1,((((((59,(58,((52,(51,(57,(53,55)))),(54,56)))),(((14,(9,(15,16))),(11,((64,((70,(65,(68,66))),(69,71))),(67,72)))),((8,(7,13)),(12,((31,(30,(10,27))),((32,(23,21)),(((28,22),(26,29)),(24,(25,20))))))))),((47,44),(42,(41,((48,(49,((46,45),(74,17)))),(43,40)))))),(38,((36,39),(35,37)))),(19,(73,(50,((62,(63,61)),(3,4)))))),((6,(5,18)),(60,(2,(34,33))))));
	TREE * inapplicable = [&R] (1,(((6,(5,18)),(60,(2,(34,33)))),(((((58,((56,54),(((11,(((64,((70,(65,(66,68))),(69,71))),(67,72)),(16,15))),(14,9)),(8,((7,13),(12,((30,(31,(32,(23,((21,(24,(25,20))),((22,28),(26,29))))))),(27,10)))))))),((51,(52,59)),(57,(55,53)))),((47,44),((42,(41,(48,(49,(46,(45,(74,17))))))),(40,43)))),(38,((35,37),(39,36)))),(19,(73,(50,((4,3),(62,(63,61)))))))));
END;
