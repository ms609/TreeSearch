#NEXUS
begin data;
  dimensions ntax=33 nchar=50;
  format datatype=standard gap=- missing=? Interleave=no;
  matrix
    Capitella_capitata                      00--000000----000000000000000000000000000-------00
    Psammodrilius_balanoglossoides          00--0??000----000001000000000000000000000-------00
    Arenicola_marina                        00--000000----000101010010000000000000000-------00
    Boguea_enigmatica                       1100110000----011111111010001101000000000-------00
    Boguella_ornata                         1100110000----011111111010001101000000000-------00
    Rhodine_loveni                          1100110000----010111011010001101000000000-------00
    Notoproctus_oculatus                    11101100010-0-0101010100110011010101-----00-----01
    Lumbriclymene_cylindricauda             1110110000----1-0101010010001101010011110-------00
    Lumbriclymenella_robusta                1110110000----1-0101010010001101010011110-------00
    Praxillura_longissima                   1110110000----1-0101010010001101010011101-------00
    Clymenopsis_cingulata                   1110110000----1-0101010010001101010011101-------00
    Nicomache_lumbricalis                   1120111100----1-01010100110011010111-----22-00-102
    Petaloproctus_terriculus                1120111100----1-01010100110011010111-----22-00-102
    Micromaldane_ornithochaeta              1120111100----0101010100110011010111-----22-00-102
    Asychis_atlanticus                      112111000110100101010100120111010101-----111----01
    Chirimia_amoena                         112111000110100101010100120211010101-----111----01
    Maldane_glebifex                        112211000110100101010100120211010101-----111----01
    Metasychis_disparidentatus              112111000110100101010100120111010101-----111----01
    Sabaco_maculatus                        112211000110100101010100120211010101-----111----01
    Bathyasychis_cristatus                  112111000110100101010100120011010101-----110----01
    Clymenura_cirrata                       112011210110200201010101110011011111-----22-010002
    Euclymene_oerstedi                      112011210110201-01010101110011011111-----22-011002
    Axiothella_catenata                     112011210110200201010101110011011111-----22-011002
    Praxillella_praetermissa                112011210110210101010101110011011111-----22-012012
    Clymenella_torquatus                    112011210110201-01010101110011011111-----22-011002
    Johnstonia_clymenoides                  112011210110201-01010101110011011111-----22-011002
    Maldanella_antarctica                   112011211111200101010101110011011111-----22-1--002
    Petaloclymene_pacifica                  112011211111200101010101110011011111-----22-1--002
    Gravierella_multiannulata               112011210110200101010101111011110111-----22-00-002
    Microclymene_acirrata                   112011210110210101010101110011011111-----22-012012
    Macroclymene_monilis                    112011210110200101010101111011110111-----22-00-002
    Isocirrus_corallicolus                  112011211110200101010101110011011111-----22-00-002
    Aclymene_gesae                          112011211111200101010101110011011111-----22-00-002
  ;                                                                     
end;
  
BEGIN TAXA;
	DIMENSIONS NTAX = 33;
	TAXLABELS
		Capitella_capitata
		Psammodrilius_balanoglossoides
		Arenicola_marina
		Boguea_enigmatica
		Boguella_ornata
		Rhodine_loveni
		Notoproctus_oculatus
		Lumbriclymene_cylindricauda
		Lumbriclymenella_robusta
		Praxillura_longissima
		Clymenopsis_cingulata
		Nicomache_lumbricalis
		Petaloproctus_terriculus
		Micromaldane_ornithochaeta
		Asychis_atlanticus
		Chirimia_amoena
		Maldane_glebifex
		Metasychis_disparidentatus
		Sabaco_maculatus
		Bathyasychis_cristatus
		Clymenura_cirrata
		Euclymene_oerstedi
		Axiothella_catenata
		Praxillella_praetermissa
		Clymenella_torquatus
		Johnstonia_clymenoides
		Maldanella_antarctica
		Petaloclymene_pacifica
		Gravierella_multiannulata
		Microclymene_acirrata
		Macroclymene_monilis
		Isocirrus_corallicolus
		Aclymene_gesae
	;
END;
BEGIN TREES;
	TRANSLATE
		1	Capitella_capitata,
		2	Psammodrilius_balanoglossoides,
		3	Arenicola_marina,
		4	Boguea_enigmatica,
		5	Boguella_ornata,
		6	Rhodine_loveni,
		7	Notoproctus_oculatus,
		8	Lumbriclymene_cylindricauda,
		9	Lumbriclymenella_robusta,
		10	Praxillura_longissima,
		11	Clymenopsis_cingulata,
		12	Nicomache_lumbricalis,
		13	Petaloproctus_terriculus,
		14	Micromaldane_ornithochaeta,
		15	Asychis_atlanticus,
		16	Chirimia_amoena,
		17	Maldane_glebifex,
		18	Metasychis_disparidentatus,
		19	Sabaco_maculatus,
		20	Bathyasychis_cristatus,
		21	Clymenura_cirrata,
		22	Euclymene_oerstedi,
		23	Axiothella_catenata,
		24	Praxillella_praetermissa,
		25	Clymenella_torquatus,
		26	Johnstonia_clymenoides,
		27	Maldanella_antarctica,
		28	Petaloclymene_pacifica,
		29	Gravierella_multiannulata,
		30	Microclymene_acirrata,
		31	Macroclymene_monilis,
		32	Isocirrus_corallicolus,
		33	Aclymene_gesae
	;
	TREE * ambiguous = [&R] (1,(2,(3,((6,(4,5)),((7,(((14,(12,13)),((((23,(21,(25,(22,26)))),(24,30)),(32,(33,(27,28)))),(29,31))),((15,18),(20,(16,(17,19)))))),((8,9),(10,11)))))));
	TREE * ambiguous = [&R] (1,(2,(3,((6,(4,5)),((7,(((14,(12,13)),(((((21,23),(24,30)),(26,(22,25))),(32,(33,(27,28)))),(29,31))),(20,((16,(15,18)),(17,19))))),((8,9),(10,11)))))));
	TREE * ambiguous = [&R] (1,(2,(3,((6,(4,5)),((7,(((14,(12,13)),((((21,23),((22,(25,26)),(24,30))),(32,(33,(27,28)))),(29,31))),((20,(15,18)),(16,(17,19))))),((8,9),(10,11)))))));
	TREE * ambiguous = [&R] (1,(2,(3,((6,(4,5)),((7,(((14,(12,13)),(((((21,23),(25,(22,26))),(24,30)),(32,(33,(27,28)))),(29,31))),(20,((15,18),(16,(17,19)))))),((8,9),(10,11)))))));
	TREE * ambiguous = [&R] (1,(2,(3,((6,(4,5)),((7,(((14,(12,13)),((((21,(23,(26,(22,25)))),(24,30)),(32,(33,(27,28)))),(29,31))),(20,((16,(15,18)),(17,19))))),((8,9),(10,11)))))));
	TREE * ambiguous = [&R] (1,(2,(3,((6,(4,5)),((7,(((14,(12,13)),(((((21,23),(26,(22,25))),(24,30)),(32,(33,(27,28)))),(29,31))),((15,18),(20,(16,(17,19)))))),((8,9),(10,11)))))));
	TREE * ambiguous = [&R] (1,(2,(3,((6,(4,5)),((7,(((14,(12,13)),(((((21,23),(25,(22,26))),(24,30)),(32,(33,(27,28)))),(29,31))),(20,(16,((15,18),(17,19)))))),((8,9),(10,11)))))));
	TREE * ambiguous = [&R] (1,(2,(3,((6,(4,5)),((7,(((14,(12,13)),(((((21,23),(26,(22,25))),(24,30)),(32,(33,(27,28)))),(29,31))),(20,(18,(15,(16,(17,19))))))),((8,9),(10,11)))))));
	TREE * ambiguous = [&R] (1,(2,(3,((6,(4,5)),((7,(((14,(12,13)),(((((21,23),(24,30)),(26,(22,25))),(32,(33,(27,28)))),(29,31))),(20,((15,18),(16,(17,19)))))),((8,9),(10,11)))))));
	TREE * ambiguous = [&R] (1,(2,(3,((6,(4,5)),((7,(((14,(12,13)),(((((21,23),(24,30)),(26,(22,25))),(32,(33,(27,28)))),(29,31))),(20,(15,(18,(16,(17,19))))))),((8,9),(10,11)))))));
	TREE * ambiguous = [&R] (1,(2,(3,((6,(4,5)),((7,(((14,(12,13)),((((23,(21,(22,(25,26)))),(24,30)),(32,(33,(27,28)))),(29,31))),(20,(18,(15,(16,(17,19))))))),((8,9),(10,11)))))));
	TREE * ambiguous = [&R] (1,(2,(3,((6,(4,5)),((7,(((14,(12,13)),((((21,(23,(26,(22,25)))),(24,30)),(32,(33,(27,28)))),(29,31))),(20,((15,18),(16,(17,19)))))),((8,9),(10,11)))))));
	TREE * extraState = [&R] (1,(2,(3,((6,(4,5)),((7,(((14,(12,13)),((((23,(21,(25,(22,26)))),(24,30)),(32,(33,(27,28)))),(29,31))),((15,18),(20,(16,(17,19)))))),((8,9),(10,11)))))));
	TREE * extraState = [&R] (1,(2,(3,((6,(4,5)),((7,(((14,(12,13)),(((((21,23),(24,30)),(26,(22,25))),(32,(33,(27,28)))),(29,31))),(20,((16,(15,18)),(17,19))))),((8,9),(10,11)))))));
	TREE * extraState = [&R] (1,(2,(3,((6,(4,5)),((7,(((14,(12,13)),(((((21,23),(22,(25,26))),(24,30)),(32,(33,(27,28)))),(29,31))),((20,(15,18)),(16,(17,19))))),((8,9),(10,11)))))));
	TREE * extraState = [&R] (1,(2,(3,((6,(4,5)),((7,(((14,(12,13)),(((((21,23),(25,(22,26))),(24,30)),(32,(33,(27,28)))),(29,31))),(20,((16,(15,18)),(17,19))))),((8,9),(10,11)))))));
	TREE * extraState = [&R] (1,(2,(3,((6,(4,5)),((7,(((14,(12,13)),((((21,23),((22,(25,26)),(24,30))),(32,(33,(27,28)))),(29,31))),((15,18),(20,(16,(17,19)))))),((8,9),(10,11)))))));
	TREE * extraState = [&R] (1,(2,(3,((6,(4,5)),((7,(((14,(12,13)),((((21,(23,(26,(22,25)))),(24,30)),(32,(33,(27,28)))),(29,31))),(20,((16,(15,18)),(17,19))))),((8,9),(10,11)))))));
	TREE * extraState = [&R] (1,(2,(3,((6,(4,5)),((7,(((14,(12,13)),((((21,(23,(22,(25,26)))),(24,30)),(32,(33,(27,28)))),(29,31))),(20,((15,18),(16,(17,19)))))),((8,9),(10,11)))))));
	TREE * extraState = [&R] (1,(2,(3,((6,(4,5)),((7,(((14,(12,13)),(((((21,23),(22,(25,26))),(24,30)),(32,(33,(27,28)))),(29,31))),(20,((15,18),(16,(17,19)))))),((8,9),(10,11)))))));
	TREE * extraState = [&R] (1,(2,(3,((6,(4,5)),((7,(((14,(12,13)),((((21,23),((22,(25,26)),(24,30))),(32,(33,(27,28)))),(29,31))),(20,((15,18),(16,(17,19)))))),((8,9),(10,11)))))));
	TREE * extraState = [&R] (1,(2,(3,((6,(4,5)),((7,(((14,(12,13)),((((21,23),((26,(22,25)),(24,30))),(32,(33,(27,28)))),(29,31))),(20,(15,(18,(16,(17,19))))))),((8,9),(10,11)))))));
	TREE * extraState = [&R] (1,(2,(3,((6,(4,5)),((7,(((14,(12,13)),((((23,(21,(25,(22,26)))),(24,30)),(32,(33,(27,28)))),(29,31))),(20,(18,(15,(16,(17,19))))))),((8,9),(10,11)))))));
	TREE * extraState = [&R] (1,(2,(3,((6,(4,5)),((7,(((14,(12,13)),(((((21,23),(22,(25,26))),(24,30)),(32,(33,(27,28)))),(29,31))),(20,(18,(15,(16,(17,19))))))),((8,9),(10,11)))))));
	TREE * inapplicable = [&R] (1,(2,(3,((6,(4,5)),((7,((20,((16,(15,18)),(17,19))),((14,(12,13)),((29,31),((32,(33,(27,28))),((21,(23,(26,(22,25)))),(30,24))))))),((9,8),(11,10)))))));
	TREE * inapplicable = [&R] (1,(2,(3,((6,(4,5)),(((11,10),(9,8)),(7,((20,(15,(18,(16,(17,19))))),((14,(12,13)),(((32,(33,(28,27))),(((24,30),(23,21)),(25,(26,22)))),(31,29))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(((7,((20,(18,(15,(16,(19,17))))),((((32,(33,(28,27))),(((26,(22,25)),(23,21)),(24,30))),(29,31)),(14,(12,13))))),((9,8),(11,10))),(6,(4,5))))));
	TREE * inapplicable = [&R] (1,(2,(3,((((10,11),(9,8)),(7,((20,(15,(18,(16,(19,17))))),((((32,(33,(27,28))),(((23,21),(26,(25,22))),(30,24))),(31,29)),(14,(12,13)))))),(6,(4,5))))));
	TREE * inapplicable = [&R] (1,(2,(3,((6,(5,4)),(((10,11),(8,9)),(7,((20,(18,(15,(16,(19,17))))),((((32,(33,(27,28))),(((21,23),(22,(26,25))),(30,24))),(29,31)),(14,(12,13))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,((((10,11),(9,8)),(7,((20,((18,15),(16,(17,19)))),((((((26,(25,22)),(23,21)),(30,24)),(32,(33,(28,27)))),(31,29)),(14,(12,13)))))),(6,(4,5))))));
	TREE * inapplicable = [&R] (1,(2,(3,(((7,((20,((18,15),(16,(17,19)))),((((32,(33,(28,27))),(((21,23),(22,(25,26))),(24,30))),(29,31)),(14,(12,13))))),((9,8),(11,10))),(6,(4,5))))));
	TREE * inapplicable = [&R] (1,(2,(3,((((10,11),(8,9)),(7,((20,((18,15),(16,(19,17)))),((14,(13,12)),(((32,(33,(27,28))),((30,24),(23,(21,(22,(25,26)))))),(29,31)))))),(6,(5,4))))));
	TREE * inapplicable = [&R] (1,(2,(3,((6,(5,4)),(((8,9),(10,11)),(7,((20,((16,(17,19)),(18,15))),((((32,(33,(28,27))),(((21,23),(25,(22,26))),(24,30))),(29,31)),(14,(12,13))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,((6,(5,4)),(((10,11),(9,8)),(7,(((((32,(33,(27,28))),(((26,(25,22)),(30,24)),(23,21))),(29,31)),(14,(13,12))),((20,(16,(19,17))),(15,18)))))))));
	TREE * inapplicable = [&R] (1,(2,(3,((((10,11),(8,9)),(7,((20,((16,(15,18)),(19,17))),((((32,(33,(27,28))),((24,30),(23,(21,(25,(26,22)))))),(31,29)),(14,(13,12)))))),(6,(4,5))))));
	TREE * inapplicable = [&R] (1,(2,(3,((((9,8),(10,11)),(7,((((((24,30),(23,(21,(26,(25,22))))),(32,(33,(28,27)))),(31,29)),(14,(13,12))),(20,((16,(15,18)),(17,19)))))),(6,(4,5))))));
	TREE * inapplicable = [&R] (1,(2,(3,((6,(5,4)),((7,(((((32,(33,(28,27))),(((30,24),(23,21)),(26,(25,22)))),(31,29)),(14,(13,12))),((20,(15,18)),(16,(17,19))))),((9,8),(11,10)))))));
	TREE * inapplicable = [&R] (1,(2,(3,(((7,((20,(15,(18,(16,(19,17))))),((((32,(33,(28,27))),(((24,30),(26,(25,22))),(21,23))),(31,29)),(14,(13,12))))),((9,8),(10,11))),(6,(4,5))))));
	TREE * inapplicable = [&R] (1,(2,(3,(((7,(((20,(15,18)),(16,(17,19))),(((((23,(21,(26,(25,22)))),(30,24)),(32,(33,(27,28)))),(29,31)),(14,(12,13))))),((9,8),(10,11))),(6,(5,4))))));
	TREE * inapplicable = [&R] (1,(2,(3,((((11,10),(8,9)),(7,(((((((30,24),(21,23)),(22,(26,25))),(32,(33,(27,28)))),(31,29)),(14,(13,12))),((20,(15,18)),(16,(17,19)))))),(6,(5,4))))));
	TREE * inapplicable = [&R] (1,(2,(3,((6,(4,5)),(((9,8),(11,10)),(7,(((((32,(33,(27,28))),((23,(21,(26,(22,25)))),(24,30))),(31,29)),(14,(12,13))),(20,(16,((17,19),(15,18)))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(((7,((20,(15,(18,(16,(19,17))))),(((31,29),((32,(33,(28,27))),((21,(23,(22,(25,26)))),(24,30)))),(14,(12,13))))),((8,9),(11,10))),(6,(5,4))))));
	TREE * inapplicable = [&R] (1,(2,(3,((((9,8),(11,10)),(7,((20,(16,((17,19),(15,18)))),(((((23,(21,(22,(25,26)))),(24,30)),(32,(33,(28,27)))),(29,31)),(14,(13,12)))))),(6,(5,4))))));
	TREE * inapplicable = [&R] (1,(2,(3,((6,(5,4)),(((9,8),(10,11)),(7,(((14,(12,13)),((((21,(23,(22,(26,25)))),(24,30)),(32,(33,(27,28)))),(29,31))),(20,((16,(19,17)),(18,15))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,((((11,10),(8,9)),(7,(((((32,(33,(28,27))),(((21,23),(22,(26,25))),(30,24))),(31,29)),(14,(12,13))),((20,(18,15)),(16,(17,19)))))),(6,(5,4))))));
	TREE * inapplicable = [&R] (1,(2,(3,(((7,((20,(18,(15,(16,(19,17))))),((((((22,(25,26)),(24,30)),(21,23)),(32,(33,(27,28)))),(29,31)),(14,(12,13))))),((9,8),(11,10))),(6,(4,5))))));
	TREE * inapplicable = [&R] (1,(2,(3,(((7,((((((21,(23,(25,(22,26)))),(24,30)),(32,(33,(28,27)))),(31,29)),(14,(13,12))),(20,((16,(18,15)),(19,17))))),((10,11),(8,9))),(6,(5,4))))));
	TREE * inapplicable = [&R] (1,(2,(3,(((7,((20,((16,(15,18)),(17,19))),(((((21,(23,(22,(26,25)))),(30,24)),(32,(33,(27,28)))),(31,29)),(14,(12,13))))),((9,8),(10,11))),(6,(5,4))))));
	TREE * inapplicable = [&R] (1,(2,(3,((6,(4,5)),(((8,9),(11,10)),(7,(((20,(18,15)),(16,(19,17))),((14,(13,12)),(((32,(33,(27,28))),(((30,24),(23,21)),(25,(26,22)))),(29,31))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(((7,((20,((16,(15,18)),(17,19))),((((((30,24),(22,(25,26))),(23,21)),(32,(33,(28,27)))),(31,29)),(14,(13,12))))),((8,9),(10,11))),(6,(5,4))))));
	TREE * inapplicable = [&R] (1,(2,(3,(((7,((20,(16,((15,18),(17,19)))),((((32,(33,(27,28))),(((21,23),(26,(25,22))),(30,24))),(29,31)),(14,(12,13))))),((9,8),(10,11))),(6,(5,4))))));
	TREE * inapplicable = [&R] (1,(2,(3,((6,(4,5)),(((11,10),(9,8)),(7,((20,((15,18),(16,(17,19)))),(((29,31),((((26,(22,25)),(30,24)),(23,21)),(32,(33,(28,27))))),(14,(13,12))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(((7,((20,(15,(18,(16,(19,17))))),((((((21,23),(25,(26,22))),(24,30)),(32,(33,(28,27)))),(29,31)),(14,(12,13))))),((10,11),(9,8))),(6,(4,5))))));
	TREE * inapplicable = [&R] (1,(2,(3,((((10,11),(8,9)),(7,(((((32,(33,(28,27))),(((24,30),(26,(25,22))),(21,23))),(29,31)),(14,(12,13))),(20,(18,(15,(16,(17,19)))))))),(6,(4,5))))));
	TREE * inapplicable = [&R] (1,(2,(3,(((7,((20,(16,((18,15),(17,19)))),((((((25,(26,22)),(21,23)),(30,24)),(32,(33,(28,27)))),(31,29)),(14,(13,12))))),((10,11),(8,9))),(6,(5,4))))));
	TREE * inapplicable = [&R] (1,(2,(3,((((8,9),(11,10)),(7,(((20,(15,18)),(16,(19,17))),(((31,29),((32,(33,(27,28))),(((21,23),(25,(26,22))),(24,30)))),(14,(13,12)))))),(6,(4,5))))));
	TREE * inapplicable = [&R] (1,(2,(3,((((9,8),(11,10)),(7,(((((((25,(22,26)),(30,24)),(23,21)),(32,(33,(27,28)))),(31,29)),(14,(13,12))),((20,(18,15)),(16,(19,17)))))),(6,(5,4))))));
	TREE * inapplicable = [&R] (1,(2,(3,((6,(4,5)),(((9,8),(10,11)),(7,((20,((18,15),(16,(19,17)))),(((29,31),((((23,21),(30,24)),(26,(22,25))),(32,(33,(28,27))))),(14,(12,13))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(((7,(((((32,(33,(27,28))),(((24,30),(26,(25,22))),(23,21))),(31,29)),(14,(13,12))),(20,((16,(15,18)),(19,17))))),((9,8),(10,11))),(6,(5,4))))));
	TREE * inapplicable = [&R] (1,(2,(3,(((7,(((((32,(33,(28,27))),((21,(23,(22,(25,26)))),(30,24))),(29,31)),(14,(12,13))),(20,(16,((18,15),(17,19)))))),((8,9),(11,10))),(6,(4,5))))));
	TREE * inapplicable = [&R] (1,(2,(3,((6,(5,4)),(((11,10),(9,8)),(7,(((((((30,24),(22,(25,26))),(21,23)),(32,(33,(27,28)))),(29,31)),(14,(12,13))),(20,(15,(18,(16,(19,17))))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,((((10,11),(9,8)),(7,(((20,(16,(19,17))),(18,15)),((((((24,30),(22,(26,25))),(23,21)),(32,(33,(27,28)))),(31,29)),(14,(13,12)))))),(6,(4,5))))));
	TREE * inapplicable = [&R] (1,(2,(3,(((7,((20,((16,(18,15)),(17,19))),((((((30,24),(25,(26,22))),(21,23)),(32,(33,(28,27)))),(31,29)),(14,(13,12))))),((11,10),(8,9))),(6,(5,4))))));
	TREE * inapplicable = [&R] (1,(2,(3,((((11,10),(8,9)),(7,((((((23,(21,(22,(25,26)))),(30,24)),(32,(33,(28,27)))),(31,29)),(14,(12,13))),(20,(15,(18,(16,(17,19)))))))),(6,(4,5))))));
	TREE * inapplicable = [&R] (1,(2,(3,((6,(5,4)),(((10,11),(8,9)),(7,((20,((16,(19,17)),(15,18))),((((32,(33,(27,28))),((23,(21,(26,(25,22)))),(30,24))),(29,31)),(14,(12,13))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,((((10,11),(8,9)),(7,((20,(18,(15,(16,(19,17))))),((((32,(33,(27,28))),((24,30),(23,(21,(22,(25,26)))))),(31,29)),(14,(13,12)))))),(6,(4,5))))));
	TREE * inapplicable = [&R] (1,(2,(3,((6,(4,5)),(((10,11),(9,8)),(7,((((31,29),((32,(33,(28,27))),(((23,21),(25,(22,26))),(30,24)))),(14,(12,13))),(20,(18,(15,(16,(17,19))))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,((((10,11),(8,9)),(7,((20,((16,(19,17)),(18,15))),((((32,(33,(27,28))),((21,(23,(25,(22,26)))),(30,24))),(31,29)),(14,(13,12)))))),(6,(5,4))))));
	TREE * inapplicable = [&R] (1,(2,(3,(((7,(((14,(12,13)),((29,31),((((21,23),(24,30)),(26,(22,25))),(32,(33,(28,27)))))),(20,(16,((19,17),(18,15)))))),((8,9),(10,11))),(6,(4,5))))));
	TREE * inapplicable = [&R] (1,(2,(3,((((8,9),(10,11)),(7,(((((32,(33,(27,28))),(((21,23),(26,(25,22))),(30,24))),(31,29)),(14,(13,12))),(20,((16,(18,15)),(19,17)))))),(6,(5,4))))));
	TREE * inapplicable = [&R] (1,(2,(3,(((7,(((20,(16,(19,17))),(15,18)),((((((24,30),(23,21)),(25,(22,26))),(32,(33,(28,27)))),(31,29)),(14,(13,12))))),((11,10),(8,9))),(6,(4,5))))));
	TREE * inapplicable = [&R] (1,(2,(3,(((7,(((20,(16,(17,19))),(15,18)),(((29,31),(((21,(23,(22,(25,26)))),(30,24)),(32,(33,(27,28))))),(14,(12,13))))),((10,11),(8,9))),(6,(4,5))))));
	TREE * inapplicable = [&R] (1,(2,(3,((6,(4,5)),(((9,8),(11,10)),(7,((20,((15,18),(16,(19,17)))),((((32,(33,(27,28))),(((30,24),(23,21)),(25,(26,22)))),(31,29)),(14,(13,12))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(((7,(((((((30,24),(21,23)),(26,(22,25))),(32,(33,(27,28)))),(29,31)),(14,(12,13))),((20,(16,(17,19))),(15,18)))),((11,10),(9,8))),(6,(4,5))))));
END;
