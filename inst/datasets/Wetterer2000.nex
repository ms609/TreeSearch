#NEXUS
begin data;
  dimensions ntax=63 nchar=150;
  format datatype=standard gap=- missing=? Interleave=no;
  matrix
    Mormoops                0012100000004000-----00----00300-000-011000?-00002--000002-000000000001000011-00000001010?????????????????0000200--00010001--10?0000000100000000000000
    Pteronotus              000?000000012000-----00----10300-000-0?0?000-00002--0000010000000000000000011001000000010000?00??-00?111-00000200--3-010001--10?000000?10?????????????
    Noctilio                0000002000124000-----00----00300-000-0201000-00000--010100-0000000000000011000?0???200000000?00??-00?001-0001-100--2-000000--10?0000000?00000000000000
    Brachyphylla            0020100000014021101100002--001000000-0100000-00000--000000-1100-000200000?00???????50020211200000-?0000001001-100--0001001-000001?21100200000001000010
    Carollia                10202000000?4121000011002--001001000-0010100-00000--000000-1100-000000000000121101150110000100000-100100020000100--0001001-00000?0211112?0000001000000
    Rhinophylla             102010000?024122000010002--000001000-0???100-0000?--000000-1100-000???111??????????401122?????????????????0000100--00010000--10???2111020000000100000?
    Desmodus                0101100001124021001100002--100000000-0010000-001-1--003100-1101-111???-0-010110101110020201201100-000001-01-1-120--0000010---100?10000120000000000001?
    Diaemus                 0101100001124021001100002--100000000-0010000-001-1--003100-1101-111???-00??????????100202?????????????????1-1-120--0000010---10???????120?????????????
    Diphylla                1000100001024021001100002--100000000-0010000-00001--003100-1101-011???-0001012?????100102?????????????????1-1-100--0000010---10???????1100000000000010
    Anoura                  10221000010?4021000001022--00011-000-0010?00-00010--11-003-01000000000110??????1???00010?023101111?12010031-00101110000101-000010?21101200000001000000
    Choeroniscus            10201000000??021000001012--00011-000-0???1-0-10010--11-003-1100-000000111??????????000100023100111?12011-31-00101110000101-101010?????02?001000110100?
    Choeronycteris          1020100000012021000001012--00011-000-0???1-0-10010--11-003-1100-00000011100001?????000100023100111?12011-31-00101110000101-10101???????20001000110100?
    Glossophaga             1020100000004021000001022--00011-000-0010000-00010--000003-010000000001101000101111000100023101110012110030000101110000101-11121002110120000000100000?
    Hylonycteris            1020200000014021000001012--00011-000-0???1-0-00010--11-003-01000000000111??????????000100023100111?12010031-00101110001101-10101???????2???1???11?1?0?
    Leptonycteris           1022100001014021000001022--00011-000-0010000-00010--000003-0101-01000011000001?????000102023101111?12210030000101110000101-11121??21101200000001010000
    Lichonycteris           1020200000014021000001012--00011-000-0???1-0-00010--11-003-1101-010000111??????????000100023100110?12110031-00101110001101-101010??????20?????????????
    Lionycteris             0022000000016021000011022--000100000-0???100-00000--000003-01000000000110??????????000100023100110?01000010000111000201001-02020??????1?0000000101010?
    Lonchophylla            10201000000?6021000011022--000100000-0???1-0-00000--000003-01000000000110??????1???000100023100110?01000010000111000101001-02020??21101200000001010100
    Monophyllus             1020000000004021000001022--00011-000-0???000-00010--000003-02000000000100??????????000100023101110?12110030000101110000101-11121??2110120000000101000?
    Musonycteris            ????10000000202??00001012--00011-?00-0???1-0-10010--11-003-1100-000000111??????????0001?0????????????????????????????????????????????????001000110100?
    Platalina               1020100000006021000000022--000100000-0???1-0-00000--000003-1100-000000111??????????000100023100110?01000010000111000200001-02020??????????????????????
    Scleronycteris          ????10000001?02??000????2--00011-?00-0???1-0-00010--11-003-1100-000000111??????????0001?0?????????????????????????????????????????????????????????????
    Erophylla               0020100000014021101000002--00011-000-0???000-00000--000000-1100-000211110?????0111151210011100000-?00111-10000101120000001-02001???????10?????????????
    Phyllonycteris          002?100000024021101000002--00011-000-0???100-00000--000000-1100-000211110??????????51020011200000-100111-10000101120000001-02011??2110?10000000100001?
    Chrotopterus            1023100000120020-000211001-000000010-0???000-00000--012001200101000000000?00???????401030?????????????????0000000--0001001-0000?0???????00100100010010
    Glyphonycteris          ????200000024021000010002--000000000-0???000-00000--000003-00001000000000??????????400100?????????????????0000100--0201001-0000???????????????????????
    Lampronycteris          ????000000124021000010001-0000000000-0???000-00000--000002-00001000000000??????????100000?????????????????0000100--0001001-0000???????1???????????????
    Lonchorhina             1122100000???1210000211000-000000000-0???010-00000--000001100001000000000?00???1???000011?????????????????0000100--00010001--10????????000000000010010
    Macrophyllum            10221000010011210000210000-001001000-0???000-00000--000001100001000000000?00???1???500001?????????????????0000100--00010001--10??1????10?000000100001?
    Macrotus                1020100000124021000001001-000000001110011000-00000--000003-000010000001000001?1100140210120101100-?00000020000100--0001001-00000?11000?000000000000010
    Micronycteris_hirsuta   1120100000124021000012001-200000001100???000-00000--000002-00001000000100?00???1???412020?????????????????0000100--0001001-0000?0?1000?10?????????????
    Micronycteris_megalotis 1120100000124021000010001-100000001100???000-00000--000003-00001000000100?00???1???412000?????????????????0000100--0001001-0000?011000110?????????????
    Micronycteris_minuta    ????100000124021000010001-100000001110???010-00000--000002-00001000000100??????????411100?????????????????0000100--0001001-1000???????110000000001001?
    Mimon_bennettii         1020100000000121000020001-0000000000-0???000-00000--010000-00001000000000?00???????401000?????????????????0000100--0001001-0000?????????0?????????????
    Mimon_crenulatum        10201010010001210000200000-001000000-0???000-00000--010000-00001000000000?00???????500000?????????????????0000100--0001001-1000???????100010000001001?
    Phylloderma             0021100000024021000020002--001000000-0???000-00000--000002-00001000000000??????????400120?????????????????0000100--0001001-0000???2100120?????????????
    Phyllostomus            0021?0000002?1210000200000-001000000-0???000-00000--000000-00001000000000001121000000002020101100-100000020000000--0001001-000000021001?00000000010010
    Tonatia                 1120100000?2?020-000210?2--001000010-0???0?0-00000--010002-00001000000000?00???1???41?030?????????????????0000100--0001001-0000?01????1000000000010010
    Trachops                1020100000021020-00021002--001000010-0???000-00000--000001100101000000000?00???1???401100?????????????????0000100--0001001-0000??010001000000100010010
    Trinycteris             ????202000024021000010002--000000000-0???000-00000--000002-00001000000100?00???1???00010020100100-?00000020000100--0001001-0000001?????10?????????????
    Vampyrum                1020100000120020-000211001-000000010-0???000-00000--002002-00101000000100??????????401032?????????????????0000000--00010000--10???????100000000000001?
    Ametrida                11202001110201120000200000-001001200-0???00--010031-001000-1000-000200000??????????000122?????????????????0002200--1-00001-1010???2221?11000100100000?
    Ardops                  0021200101020122000020001-3001001200-0???00300000300001010-1000-000210000??????????500122?????????????????0002200--1-00001-1010???????1?10001001000000
    Ariteus                 1122200101020122000020001-3001001200-0???00300000300001010-1001-000210000??????????500122?????????????????0002200--1-00001-1010???2221??10001011000000
    Artibeus_Artibeus       102211000?0241210000200000-001001100-0010000-00002--001010-100?-000200000?10??0000150012220100000-100000120002100--1-10001-00000?122211?10100001000001
    Artibeus_Dermanura      102211000?02?1210?00200000-001001100-0???000-00002--001010-1001-0?0?00000??????????500122?????????????????0002100--1-10001-0000???????1??0000001000001
    Artibeus_Koopmania      ????2000000231210000200000-001001100-0???000-00002--001000-1000-000200000??????????500122?????????????????0002100--1-10001-0000???????1?1????????????1
    Centurio                1120200111120113------0----00200-200-1???00210000300001000-1001-01020000010011?????002122?????????????????011-200--1-00001-1010?1?2221?100001001000000
    Chiroderma              102221?00002?1210?00200000-001001100-0???000-00000--00?000-110?-0?0211110?10???0???50?122?????????????????0002100--1-10001-0000?1?????1200100001000000
    Ectophylla_alba         10201000000201210100200000-001001100-0???000-00000--000000-1101-010211111??????????501122?????????????????0002000--1-00001-0000???2221??0?????????????
    Ectophylla_macconellii  10222000000201210100200000-011001100-0???000-00000--000000-1101-000211111??????????501122?????????????????0000000--1-10001-0000???????1100000001000000
    Enchisthenes            1022110001024121000020002--001001100-0???000-00000--001000-1000-000200000??????????600122?????????????????0002100--1-10001-0000???22211210000001000000
    Phyllops                1122200111020122000020001-0001001200-0???00310000300001010-1000-000200000??????????40212220100000-?00000120002200--1-00001-10100????????1?????????????
    Platyrrhinus            102211100102?1210?00200000-001001100-0???000-00000--001010-1100-000?10100??????????50?12220100100-?00000120001000--1-00001-10000??22211?01000001000000
    Pygoderma               1020200111010121000020001-0001001200-0???001-0000301001010-1001-010200000??????????400122?????????????????0002200--1-00001-1010?????????10001011000000
    Sphaeronycteris         1020200111020113-00010002--02200-200-1???0021010031-001000-1000-000200000??????????500122?????????????????0102200--1-00001-1010???????1?0?????????????
    Stenoderma              10222001110201220000200000-001001200-0???00300000301001000-1000-000210000??????????500122?????????????????0002200--1-00001-1010????????110001011000000
    Sturnira                00202000010??121000010002--001001100-0010000-00000--0?0000-1100-0?0???000?00??10001400202000?00??-10?001-20001100--0001001-0000?0022211?00100001000010
    Uroderma                10221110000201210200200000-001001100-0???000-00002--001020-1000-000210100?00???????50012220100000-?00000120001100--1-10001-101001?22211201000001000000
    Vampyressa_bidens       10222110000201210200200000-001001100-0???000-00002--010000-1101-000211111??????????500122?????????????????0001100--1-10001-0000???????????????????????
    Vampyressa_nymphaea     ????2110000201210200200000-001001100-0???000-00002--000000-1101-010211111??????????500122?????????????????0001100--1-10001-0000?1??????200000001000000
    Vampyressa_pusilla      11222100000201210200200000-011001100-0???000-00002--000000-1101-010211111??????????40112220100100-?00000120000100--1-10001-000001?2221110?????????????
    Vampyrodes              11221110010241210200200000-001001100-0???000-00000--001020-1101-000100000??????????500122?????????????????0001000--1-10001-1000?1?22211101000001000000
;                                                                     
end;                                                                       

BEGIN TAXA;
	DIMENSIONS NTAX = 63;
	TAXLABELS
		Mormoops
		Pteronotus
		Noctilio
		Brachyphylla
		Carollia
		Rhinophylla
		Desmodus
		Diaemus
		Diphylla
		Anoura
		Choeroniscus
		Choeronycteris
		Glossophaga
		Hylonycteris
		Leptonycteris
		Lichonycteris
		Lionycteris
		Lonchophylla
		Monophyllus
		Musonycteris
		Platalina
		Scleronycteris
		Erophylla
		Phyllonycteris
		Chrotopterus
		Glyphonycteris
		Lampronycteris
		Lonchorhina
		Macrophyllum
		Macrotus
		Micronycteris_hirsuta
		Micronycteris_megalotis
		Micronycteris_minuta
		Mimon_bennettii
		Mimon_crenulatum
		Phylloderma
		Phyllostomus
		Tonatia
		Trachops
		Trinycteris
		Vampyrum
		Ametrida
		Ardops
		Ariteus
		Artibeus_Artibeus
		Artibeus_Dermanura
		Artibeus_Koopmania
		Centurio
		Chiroderma
		Ectophylla_alba
		Ectophylla_macconellii
		Enchisthenes
		Phyllops
		Platyrrhinus
		Pygoderma
		Sphaeronycteris
		Stenoderma
		Sturnira
		Uroderma
		Vampyressa_bidens
		Vampyressa_nymphaea
		Vampyressa_pusilla
		Vampyrodes
	;
END;
BEGIN TREES;
	TRANSLATE
		1	Mormoops,
		2	Pteronotus,
		3	Noctilio,
		4	Brachyphylla,
		5	Carollia,
		6	Rhinophylla,
		7	Desmodus,
		8	Diaemus,
		9	Diphylla,
		10	Anoura,
		11	Choeroniscus,
		12	Choeronycteris,
		13	Glossophaga,
		14	Hylonycteris,
		15	Leptonycteris,
		16	Lichonycteris,
		17	Lionycteris,
		18	Lonchophylla,
		19	Monophyllus,
		20	Musonycteris,
		21	Platalina,
		22	Scleronycteris,
		23	Erophylla,
		24	Phyllonycteris,
		25	Chrotopterus,
		26	Glyphonycteris,
		27	Lampronycteris,
		28	Lonchorhina,
		29	Macrophyllum,
		30	Macrotus,
		31	Micronycteris_hirsuta,
		32	Micronycteris_megalotis,
		33	Micronycteris_minuta,
		34	Mimon_bennettii,
		35	Mimon_crenulatum,
		36	Phylloderma,
		37	Phyllostomus,
		38	Tonatia,
		39	Trachops,
		40	Trinycteris,
		41	Vampyrum,
		42	Ametrida,
		43	Ardops,
		44	Ariteus,
		45	Artibeus_Artibeus,
		46	Artibeus_Dermanura,
		47	Artibeus_Koopmania,
		48	Centurio,
		49	Chiroderma,
		50	Ectophylla_alba,
		51	Ectophylla_macconellii,
		52	Enchisthenes,
		53	Phyllops,
		54	Platyrrhinus,
		55	Pygoderma,
		56	Sphaeronycteris,
		57	Stenoderma,
		58	Sturnira,
		59	Uroderma,
		60	Vampyressa_bidens,
		61	Vampyressa_nymphaea,
		62	Vampyressa_pusilla,
		63	Vampyrodes
	;
	TREE * ambiguous = [&R] (1,(2,(3,((4,((((5,6),(58,(((42,(48,56)),(55,(53,(57,(43,44))))),(52,((47,(45,46)),((49,(60,(61,(62,(50,51))))),(59,(54,63)))))))),((((39,(38,(25,41))),(34,(35,(28,29)))),((26,40),(27,(30,(33,(31,32)))))),(36,37))),((((15,(10,((22,(12,(11,20))),(14,16)))),(13,19)),(21,(17,18))),(23,24)))),(9,(7,8))))));
	TREE * ambiguous = [&R] (1,(2,(3,((4,((((5,6),(58,(((42,(48,56)),(55,(53,(57,(43,44))))),(52,((47,(45,46)),((49,(60,(61,(62,(50,51))))),(59,(54,63)))))))),((((38,(39,(25,41))),(34,(35,(28,29)))),((26,40),(27,(30,(33,(31,32)))))),(36,37))),((((15,(10,(22,((12,(11,20)),(14,16))))),(13,19)),(21,(17,18))),(23,24)))),(9,(7,8))))));
	TREE * ambiguous = [&R] (1,(2,(3,(((4,(((5,6),(58,(((42,(48,56)),(55,(53,(57,(43,44))))),(52,((47,(45,46)),((49,(60,(61,(62,(50,51))))),(59,(54,63)))))))),((((38,(39,(25,41))),((28,29),(34,35))),((26,40),(27,(30,(33,(31,32)))))),(36,37)))),((((15,(10,((22,(20,(11,12))),(14,16)))),(13,19)),(21,(17,18))),(23,24))),(9,(7,8))))));
	TREE * ambiguous = [&R] (1,(2,(3,(((4,(((5,6),(58,(((42,(48,56)),(55,(53,(57,(43,44))))),(52,((47,(45,46)),((49,(60,(61,(62,(50,51))))),(59,(54,63)))))))),((((39,(38,(25,41))),(34,(35,(28,29)))),((26,40),(27,(30,(33,(31,32)))))),(36,37)))),((((15,(10,(22,((12,(11,20)),(14,16))))),(13,19)),(21,(17,18))),(23,24))),(9,(7,8))))));
	TREE * ambiguous = [&R] (1,(2,(3,((4,((((5,6),(58,(((42,(48,56)),(55,(53,(57,(43,44))))),(52,((47,(45,46)),((49,(60,(61,(62,(50,51))))),(59,(54,63)))))))),((((38,(39,(25,41))),((28,29),(34,35))),((26,40),(27,(30,(33,(31,32)))))),(36,37))),((((15,(10,(22,((20,(11,12)),(14,16))))),(13,19)),(21,(17,18))),(23,24)))),(9,(7,8))))));
	TREE * ambiguous = [&R] (1,(2,(3,(((4,(((5,6),(58,(((42,(48,56)),(55,(53,(57,(43,44))))),(52,((47,(45,46)),((49,(60,(61,(62,(50,51))))),(59,(54,63)))))))),((((39,(38,(25,41))),((28,29),(34,35))),((26,40),(27,(30,(33,(31,32)))))),(36,37)))),((((15,(10,(22,((12,(11,20)),(14,16))))),(13,19)),(21,(17,18))),(23,24))),(9,(7,8))))));
	TREE * ambiguous = [&R] (1,(2,(3,((4,((((5,6),(58,(((42,(48,56)),(55,(53,(57,(43,44))))),(52,((47,(45,46)),((49,(60,(61,(62,(50,51))))),(59,(54,63)))))))),((((39,(38,(25,41))),((28,29),(34,35))),((26,40),(27,(30,(33,(31,32)))))),(36,37))),((((15,(10,((20,(11,12)),(22,(14,16))))),(13,19)),(21,(17,18))),(23,24)))),(9,(7,8))))));
	TREE * ambiguous = [&R] (1,(2,(3,(((4,(((5,6),(58,(((42,(48,56)),(55,(53,(57,(43,44))))),(52,((47,(45,46)),((49,(60,(61,(62,(50,51))))),(59,(54,63)))))))),((((39,(38,(25,41))),((26,40),(27,(30,(33,(31,32)))))),(34,(35,(28,29)))),(36,37)))),((((15,(10,((22,(20,(11,12))),(14,16)))),(13,19)),(21,(17,18))),(23,24))),(9,(7,8))))));
	TREE * ambiguous = [&R] (1,(2,(3,((4,((((5,6),(58,(((42,(48,56)),(55,(53,(57,(43,44))))),(52,((47,(45,46)),((49,(60,(61,(62,(50,51))))),(59,(54,63)))))))),((((39,(38,(25,41))),((26,40),(27,(30,(33,(31,32)))))),(34,(35,(28,29)))),(36,37))),((((15,(10,((20,(11,12)),(22,(14,16))))),(13,19)),(21,(17,18))),(23,24)))),(9,(7,8))))));
	TREE * ambiguous = [&R] (1,(2,(3,(((4,(((5,6),(58,(((42,(48,56)),(55,(53,(57,(43,44))))),(52,((47,(45,46)),((49,(60,(61,(62,(50,51))))),(59,(54,63)))))))),((((38,(39,(25,41))),(34,(35,(28,29)))),((26,40),(27,(30,(33,(31,32)))))),(36,37)))),((((15,(10,((11,(12,20)),(22,(14,16))))),(13,19)),(21,(17,18))),(23,24))),(9,(7,8))))));
	TREE * ambiguous = [&R] (1,(2,(3,(((4,(((5,6),(58,(((42,(48,56)),(55,(53,(57,(43,44))))),(52,((47,(45,46)),((49,(60,(61,(62,(50,51))))),(59,(54,63)))))))),((((39,(38,(25,41))),((26,40),(27,(30,(33,(31,32)))))),((28,29),(34,35))),(36,37)))),((((15,(10,((12,(11,20)),(22,(14,16))))),(13,19)),(21,(17,18))),(23,24))),(9,(7,8))))));
	TREE * ambiguous = [&R] (1,(2,(3,((4,((((5,6),(58,(((42,(48,56)),(55,(53,(57,(43,44))))),(52,((47,(45,46)),((49,(60,(61,(62,(50,51))))),(59,(54,63)))))))),((((39,(38,(25,41))),((26,40),(27,(30,(33,(31,32)))))),((28,29),(34,35))),(36,37))),((((15,(10,(22,((20,(11,12)),(14,16))))),(13,19)),(21,(17,18))),(23,24)))),(9,(7,8))))));
	TREE * extraState = [&R] (1,(2,(3,((4,((((5,6),(58,(((42,(48,56)),(55,(53,(57,(43,44))))),(52,((47,(45,46)),((49,(60,(61,(62,(50,51))))),(59,(54,63)))))))),((((39,(38,(25,41))),(34,(35,(28,29)))),((26,40),(27,(30,(33,(31,32)))))),(36,37))),((((15,(10,(22,((11,(12,20)),(14,16))))),(13,19)),(21,(17,18))),(23,24)))),(9,(7,8))))));
	TREE * extraState = [&R] (1,(2,(3,((4,(((6,(5,(58,(((42,(48,56)),(55,(53,(57,(43,44))))),(52,((47,(45,46)),((49,(60,(61,(62,(50,51))))),(59,(54,63))))))))),((36,(((39,(38,(25,41))),(34,(27,(30,(33,(31,32)))))),(37,(35,(28,29))))),(26,40))),((((15,(10,(22,((12,(11,20)),(14,16))))),(13,19)),(21,(17,18))),(23,24)))),(9,(7,8))))));
	TREE * extraState = [&R] (1,(2,(3,((4,((((5,6),(58,(((42,(48,56)),((57,(43,44)),(53,55))),(52,((47,(45,46)),((49,(60,(61,(62,(50,51))))),(59,(54,63)))))))),((36,(((38,(39,(25,41))),(34,(27,(30,(33,(31,32)))))),(37,(35,(28,29))))),(26,40))),((((15,(10,((12,(11,20)),(22,(14,16))))),(13,19)),(21,(17,18))),(23,24)))),(9,(7,8))))));
	TREE * extraState = [&R] (1,(2,(3,((4,(((6,(5,(58,(((42,(48,56)),((57,(43,44)),(53,55))),(52,((47,(45,46)),((49,(60,(61,(62,(50,51))))),(59,(54,63))))))))),((36,(((38,(39,(25,41))),(34,(27,(30,(33,(31,32)))))),(37,(35,(28,29))))),(26,40))),((((15,(10,((22,(20,(11,12))),(14,16)))),(13,19)),(21,(17,18))),(23,24)))),(9,(7,8))))));
	TREE * extraState = [&R] (1,(2,(3,((4,((((5,6),(58,(((42,(48,56)),(55,(53,(57,(43,44))))),(52,((47,(45,46)),((49,(60,(61,(62,(50,51))))),(59,(54,63)))))))),((((38,(39,(25,41))),(34,(35,(28,29)))),((26,40),(27,(30,(33,(31,32)))))),(36,37))),((((15,(10,((22,(12,(11,20))),(14,16)))),(13,19)),(21,(17,18))),(23,24)))),(9,(7,8))))));
	TREE * extraState = [&R] (1,(2,(3,((4,((((5,6),(58,(((42,(48,56)),(55,(53,(57,(43,44))))),(52,((47,(45,46)),((49,(60,(61,(62,(50,51))))),(59,(54,63)))))))),((((39,(38,(25,41))),((26,40),(27,(30,(33,(31,32)))))),(34,(35,(28,29)))),(36,37))),((((15,(10,(22,((11,(12,20)),(14,16))))),(13,19)),(21,(17,18))),(23,24)))),(9,(7,8))))));
	TREE * extraState = [&R] (1,(2,(3,((4,((((5,6),(58,(((42,(48,56)),((57,(43,44)),(53,55))),(52,((47,(45,46)),((49,(60,(61,(62,(50,51))))),(59,(54,63)))))))),((((38,(39,(25,41))),(34,(35,(28,29)))),((26,40),(27,(30,(33,(31,32)))))),(36,37))),((((15,(10,((22,(11,(12,20))),(14,16)))),(13,19)),(21,(17,18))),(23,24)))),(9,(7,8))))));
	TREE * extraState = [&R] (1,(2,(3,((4,(((6,(5,(58,(((42,(48,56)),((57,(43,44)),(53,55))),(52,((47,(45,46)),((49,(60,(61,(62,(50,51))))),(59,(54,63))))))))),((36,(((39,(38,(25,41))),(34,(27,(30,(33,(31,32)))))),(37,(35,(28,29))))),(26,40))),((((15,(10,((12,(11,20)),(22,(14,16))))),(13,19)),(21,(17,18))),(23,24)))),(9,(7,8))))));
	TREE * extraState = [&R] (1,(2,(3,((4,((((5,6),(58,(((42,(48,56)),((57,(43,44)),(53,55))),(52,((47,(45,46)),((49,(60,(61,(62,(50,51))))),(59,(54,63)))))))),((36,((39,(38,(25,41))),((26,40),(27,(30,(33,(31,32))))))),(37,((28,29),(34,35))))),((((15,(10,((12,(11,20)),(22,(14,16))))),(13,19)),(21,(17,18))),(23,24)))),(9,(7,8))))));
	TREE * extraState = [&R] (1,(2,(3,((4,((((5,6),(58,(((42,(48,56)),((57,(43,44)),(53,55))),(52,((47,(45,46)),((49,(60,(61,(62,(50,51))))),(59,(54,63)))))))),((((39,(38,(25,41))),((26,40),(27,(30,(33,(31,32)))))),(34,(35,(28,29)))),(36,37))),((((15,(10,(22,((11,(12,20)),(14,16))))),(13,19)),(21,(17,18))),(23,24)))),(9,(7,8))))));
	TREE * extraState = [&R] (1,(2,(3,((4,((((5,6),(58,(((42,(48,56)),((57,(43,44)),(53,55))),(52,((47,(45,46)),((49,(60,(61,(62,(50,51))))),(59,(54,63)))))))),((((39,(38,(25,41))),(34,(35,(28,29)))),((26,40),(27,(30,(33,(31,32)))))),(36,37))),((((15,(10,(22,((20,(11,12)),(14,16))))),(13,19)),(21,(17,18))),(23,24)))),(9,(7,8))))));
	TREE * extraState = [&R] (1,(2,(3,((4,((((5,6),(58,(((42,(48,56)),(55,(53,(57,(43,44))))),(52,((47,(45,46)),((49,(60,(61,(62,(50,51))))),(59,(54,63)))))))),(40,(26,(36,(((39,(38,(25,41))),(34,(27,(30,(33,(31,32)))))),(37,(35,(28,29)))))))),((((15,(10,((22,(11,(12,20))),(14,16)))),(13,19)),(21,(17,18))),(23,24)))),(9,(7,8))))));
	TREE * extraState = [&R] (1,(2,(3,((4,((((5,6),(58,(((42,(48,56)),((57,(43,44)),(53,55))),(52,((47,(45,46)),((49,(60,(61,(62,(50,51))))),(59,(54,63)))))))),(40,(26,(36,(((39,(38,(25,41))),(34,(27,(30,(33,(31,32)))))),(37,(35,(28,29)))))))),((((15,(10,((12,(11,20)),(22,(14,16))))),(13,19)),(21,(17,18))),(23,24)))),(9,(7,8))))));
	TREE * extraState = [&R] (1,(2,(3,((4,(((6,(5,(58,(((42,(48,56)),(55,(53,(57,(43,44))))),(52,((47,(45,46)),((49,(60,(61,(62,(50,51))))),(59,(54,63))))))))),((36,(((38,(39,(25,41))),(34,(27,(30,(33,(31,32)))))),(37,(35,(28,29))))),(26,40))),((((15,(10,((11,(12,20)),(22,(14,16))))),(13,19)),(21,(17,18))),(23,24)))),(9,(7,8))))));
	TREE * extraState = [&R] (1,(2,(3,((4,((((5,6),(58,(((42,(48,56)),(55,(53,(57,(43,44))))),(52,((47,(45,46)),((49,(60,(61,(62,(50,51))))),(59,(54,63)))))))),(40,(26,(36,(((38,(39,(25,41))),(34,(27,(30,(33,(31,32)))))),(37,(35,(28,29)))))))),((((15,(10,((12,(11,20)),(22,(14,16))))),(13,19)),(21,(17,18))),(23,24)))),(9,(7,8))))));
	TREE * inapplicable = [&R] (1,(2,(3,((((24,23),((21,(18,17)),((13,19),(15,(10,(14,((22,16),(11,(20,12))))))))),(4,(((58,(((47,(45,46)),(52,(57,((42,(56,48)),((53,55),(43,44)))))),((59,(63,54)),(49,(60,(61,(62,(51,50)))))))),(5,6)),((36,((39,(38,(41,25))),((40,26),(27,(30,(33,(32,31))))))),(37,((35,34),(29,28))))))),(9,(8,7))))));
	TREE * inapplicable = [&R] (1,(2,(3,(((4,(((58,(((59,(54,63)),(49,(60,(61,(62,(50,51)))))),(52,((47,(57,((42,(56,48)),((44,43),(53,55))))),(46,45))))),(6,5)),((37,((35,34),(29,28))),(36,((39,(38,(41,25))),((40,26),(27,(30,(33,(32,31)))))))))),(((21,(18,17)),((13,(19,15)),(10,((16,14),(22,(20,(11,12))))))),(24,23))),(9,(8,7))))));
	TREE * inapplicable = [&R] (1,(2,(3,((9,(8,7)),((4,(((58,((52,((46,45),(47,((57,(44,43)),((42,(56,48)),(55,53)))))),(63,(59,(54,(49,(60,(61,(62,(51,50)))))))))),(6,5)),((36,(((40,26),(27,(30,(33,(31,32))))),(39,(38,(25,41))))),(37,((35,34),(28,29)))))),((24,23),((21,(17,18)),(13,(19,(15,(10,((16,14),(22,(12,(20,11)))))))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,((9,(8,7)),((4,(((58,((63,(54,(59,(49,(60,(61,(62,(51,50)))))))),(52,((45,46),(47,(((57,(53,55)),(42,(56,48))),(44,43))))))),(6,5)),((37,((35,34),(28,29))),(36,(((27,(30,(33,(31,32)))),(40,26)),(39,(38,(25,41)))))))),((24,23),((21,(17,18)),(19,(13,(15,(10,((16,14),(22,(11,(20,12)))))))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,((9,(8,7)),((4,(((6,5),(58,((52,((47,((57,((43,44),(55,53))),(42,(56,48)))),(45,46))),(63,(59,(54,(49,(60,(61,(62,(51,50))))))))))),((37,((34,35),(29,28))),(36,(((26,40),(27,(30,(33,(32,31))))),(39,(38,(25,41)))))))),((24,23),((21,(17,18)),((19,13),(15,(10,(14,(22,(16,(12,(11,20)))))))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,((9,(8,7)),((4,(((6,5),(58,((52,((47,(((42,(48,56)),(57,(43,44))),(55,53))),(45,46))),(63,(54,(59,(49,(60,(61,(62,(51,50))))))))))),((36,((39,(38,(25,41))),((40,26),(27,(30,(33,(31,32))))))),(37,((28,29),(35,34)))))),((24,23),((21,(17,18)),((19,13),(15,(10,(14,((22,16),(12,(20,11))))))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(((4,(((6,5),(58,((52,((47,(((57,(44,43)),(42,(48,56))),(53,55))),(45,46))),(63,(59,(54,(49,(60,(61,(62,(51,50))))))))))),((36,(((26,40),(27,(30,(33,(32,31))))),(39,(38,(25,41))))),(37,((34,35),(29,28)))))),(((21,(18,17)),((15,(10,(14,((16,22),(11,(20,12)))))),(13,19))),(23,24))),(9,(7,8))))));
	TREE * inapplicable = [&R] (1,(2,(3,(((4,(((6,5),(58,(((49,(60,(61,(62,(50,51))))),(59,(54,63))),(52,((47,(57,(((53,55),(44,43)),(42,(48,56))))),(45,46)))))),((36,(((27,(30,(33,(31,32)))),(40,26)),(39,(38,(41,25))))),(37,((29,28),(35,34)))))),((23,24),((21,(18,17)),(19,(13,(15,(10,((22,(20,(11,12))),(16,14))))))))),(9,(7,8))))));
	TREE * inapplicable = [&R] (1,(2,(3,((9,(8,7)),((4,(((5,6),(58,((52,((47,((57,(42,(56,48))),((43,44),(53,55)))),(45,46))),((59,(63,54)),(49,(60,(61,(62,(51,50))))))))),((36,((39,(38,(25,41))),((40,26),(27,(30,(33,(31,32))))))),(37,((35,34),(28,29)))))),((24,23),((21,(17,18)),((15,(10,(14,((22,16),(12,(20,11)))))),(19,13)))))))));
	TREE * inapplicable = [&R] (1,(2,(3,((9,(7,8)),((4,(((6,5),(58,((52,((47,((57,(42,(56,48))),(43,(44,(53,55))))),(45,46))),(63,(59,(54,(49,(60,(61,(62,(50,51))))))))))),((37,((34,35),(29,28))),(36,((39,(38,(41,25))),((27,(30,(33,(31,32)))),(26,40))))))),((23,24),((21,(17,18)),((13,(15,19)),(10,((22,(20,(12,11))),(16,14)))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,((9,(8,7)),(((24,23),((21,(17,18)),((13,19),(15,(10,(14,((22,16),(11,(20,12))))))))),(4,(((5,6),(58,(((59,(54,63)),(49,(60,(61,(62,(51,50)))))),(47,((52,(45,46)),((57,((43,44),(55,53))),(42,(56,48)))))))),((36,((39,(38,(25,41))),((27,(30,(33,(31,32)))),(40,26)))),(37,((35,34),(28,29)))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,((((23,24),((21,(18,17)),(13,(19,(15,(10,((22,(20,(12,11))),(16,14)))))))),(4,(((5,6),(58,(((49,(60,(61,(62,(51,50))))),(59,(63,54))),((52,(57,(43,(44,(53,(55,(42,(48,56)))))))),(47,(45,46)))))),((37,((34,35),(29,28))),(36,(((26,40),(27,(30,(33,(32,31))))),(39,(38,(41,25))))))))),(9,(7,8))))));
	TREE * inapplicable = [&R] (1,(2,(3,((((23,24),((21,(17,18)),(19,(13,(15,(10,((22,(11,(12,20))),(16,14)))))))),(4,(((58,(((59,(63,54)),(49,(60,(61,(62,(50,51)))))),(47,((52,(46,45)),((57,((55,53),(44,43))),(42,(48,56))))))),(6,5)),((37,((34,35),(28,29))),(36,(((27,(30,(33,(32,31)))),(26,40)),(39,(38,(41,25))))))))),(9,(7,8))))));
	TREE * inapplicable = [&R] (1,(2,(3,((9,(7,8)),((4,(((58,((63,(59,(54,(49,(60,(61,(62,(51,50)))))))),(52,((46,45),(47,((57,(55,(53,(43,44)))),(42,(48,56)))))))),(6,5)),((37,((34,35),(29,28))),(36,(((26,40),(27,(30,(33,(31,32))))),(39,(38,(25,41)))))))),((23,24),((21,(18,17)),(13,(19,(15,(10,((22,(11,(20,12))),(14,16)))))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,((((24,23),(((15,(10,(14,((16,22),(12,(20,11)))))),(19,13)),(21,(18,17)))),(4,(((58,(((59,(63,54)),(49,(60,(61,(62,(51,50)))))),(52,((47,(((57,(55,53)),(42,(56,48))),(43,44))),(45,46))))),(5,6)),((36,(((27,(30,(33,(31,32)))),(40,26)),(39,(38,(25,41))))),(37,((34,35),(29,28))))))),(9,(8,7))))));
	TREE * inapplicable = [&R] (1,(2,(3,((9,(7,8)),((4,(((6,5),(58,((47,((52,(45,46)),((57,(55,(53,(43,44)))),(42,(48,56))))),((49,(60,(61,(62,(51,50))))),(59,(54,63)))))),((36,(((27,(30,(33,(31,32)))),(40,26)),(39,(38,(41,25))))),(37,((34,35),(28,29)))))),((23,24),((21,(18,17)),((13,19),(15,(10,(14,(22,(16,(12,(11,20)))))))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,((((23,24),((13,(19,(15,(10,((16,14),(22,(12,(11,20)))))))),(21,(17,18)))),(4,(((5,6),(58,((52,((45,46),(47,((57,(55,(53,(43,44)))),(42,(48,56)))))),(63,(59,(54,(49,(60,(61,(62,(51,50))))))))))),((36,((39,(38,(41,25))),((26,40),(27,(30,(33,(31,32))))))),(37,((35,34),(28,29))))))),(9,(7,8))))));
	TREE * inapplicable = [&R] (1,(2,(3,((9,(8,7)),(((24,23),((21,(17,18)),(19,(13,(15,(10,((22,(11,(12,20))),(16,14)))))))),(4,(((5,6),(58,((52,((45,46),(47,((57,((42,(56,48)),(55,53))),(44,43))))),(63,(54,(59,(49,(60,(61,(62,(51,50))))))))))),((37,((29,28),(34,35))),(36,(((40,26),(27,(30,(33,(32,31))))),(39,(38,(25,41)))))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(((((21,(17,18)),((15,(10,(14,(22,(16,(12,(20,11))))))),(19,13))),(23,24)),(4,(((58,((52,((47,(((57,(43,44)),(42,(48,56))),(53,55))),(45,46))),((59,(63,54)),(49,(60,(61,(62,(51,50)))))))),(6,5)),((36,(((27,(30,(33,(32,31)))),(40,26)),(39,(38,(41,25))))),(37,((34,35),(28,29))))))),(9,(7,8))))));
	TREE * inapplicable = [&R] (1,(2,(3,((9,(8,7)),((4,(((5,6),(58,((52,((45,46),(47,(((57,(43,44)),(53,55)),(42,(56,48)))))),((59,(63,54)),(49,(60,(61,(62,(51,50))))))))),((36,((39,(38,(25,41))),((40,26),(27,(30,(33,(31,32))))))),(37,((35,34),(28,29)))))),((24,23),((21,(17,18)),((15,(10,(14,(16,(22,(20,(11,12))))))),(19,13)))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(((4,(((5,6),(58,((52,((46,45),(47,(((57,(44,43)),(42,(48,56))),(53,55))))),(63,(54,(59,(49,(60,(61,(62,(50,51))))))))))),((37,((29,28),(34,35))),(36,(((27,(30,(33,(31,32)))),(26,40)),(39,(38,(41,25)))))))),((24,23),((21,(17,18)),(13,(19,(15,(10,((22,(12,(11,20))),(16,14))))))))),(9,(8,7))))));
	TREE * inapplicable = [&R] (1,(2,(3,((9,(7,8)),((4,(((36,(((40,26),(27,(30,(33,(31,32))))),(39,(38,(25,41))))),(37,((29,28),(35,34)))),((6,5),(58,((63,(54,(59,(49,(60,(61,(62,(50,51)))))))),(52,((46,45),(47,((57,(55,(53,(43,44)))),(42,(48,56))))))))))),((23,24),((21,(18,17)),((15,(10,(14,(22,(16,(12,(20,11))))))),(13,19)))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(((4,(((5,6),(58,(((52,((57,(42,(48,56))),((43,44),(53,55)))),(47,(45,46))),((59,(54,63)),(49,(60,(61,(62,(50,51))))))))),((36,(((26,40),(27,(30,(33,(32,31))))),(39,(38,(41,25))))),(37,((28,29),(34,35)))))),((23,24),((21,(17,18)),(13,(19,(15,(10,((16,14),(22,(20,(11,12))))))))))),(9,(7,8))))));
	TREE * inapplicable = [&R] (1,(2,(3,((9,(8,7)),((4,(((58,((47,((52,(46,45)),(57,(43,(44,(53,(55,(42,(56,48))))))))),((59,(63,54)),(49,(60,(61,(62,(51,50)))))))),(6,5)),((36,(((26,40),(27,(30,(33,(31,32))))),(39,(38,(25,41))))),(37,((35,34),(29,28)))))),((24,23),((21,(17,18)),((13,(19,15)),(10,((22,(11,(12,20))),(14,16)))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(((4,(((58,(((59,(54,63)),(49,(60,(61,(62,(50,51)))))),(52,((47,(((57,(43,44)),(55,53)),(42,(48,56)))),(45,46))))),(5,6)),((37,((35,34),(28,29))),(36,((39,(38,(41,25))),((26,40),(27,(30,(33,(32,31)))))))))),((23,24),(((13,(19,15)),(10,((14,16),(22,(20,(11,12)))))),(21,(17,18))))),(9,(7,8))))));
	TREE * inapplicable = [&R] (1,(2,(3,(((4,(((6,5),(58,((52,((47,(((57,(43,44)),(55,53)),(42,(56,48)))),(45,46))),((59,(63,54)),(49,(60,(61,(62,(51,50))))))))),((37,((35,34),(29,28))),(36,((39,(38,(41,25))),((27,(30,(33,(32,31)))),(26,40))))))),((24,23),((21,(18,17)),(13,(19,(15,(10,((16,14),(22,(12,(20,11))))))))))),(9,(8,7))))));
	TREE * inapplicable = [&R] (1,(2,(3,(((4,(((6,5),(58,((52,((46,45),(47,(((57,(43,44)),(53,55)),(42,(56,48)))))),((59,(54,63)),(49,(60,(61,(62,(50,51))))))))),((36,(((27,(30,(33,(31,32)))),(40,26)),(39,(38,(25,41))))),(37,((35,34),(29,28)))))),((24,23),((21,(18,17)),((13,(15,19)),(10,((14,16),(22,(11,(20,12))))))))),(9,(8,7))))));
	TREE * inapplicable = [&R] (1,(2,(3,(((4,(((5,6),(58,((63,(59,(54,(49,(60,(61,(62,(51,50)))))))),(52,((47,((57,((43,44),(55,53))),(42,(56,48)))),(45,46)))))),((37,((34,35),(28,29))),(36,((39,(38,(41,25))),((27,(30,(33,(31,32)))),(40,26))))))),((((13,(15,19)),(10,((22,(20,(11,12))),(16,14)))),(21,(17,18))),(23,24))),(9,(7,8))))));
	TREE * inapplicable = [&R] (1,(2,(3,((((23,24),((19,(13,(15,(10,((16,14),(22,(12,(20,11)))))))),(21,(17,18)))),(4,(((58,((52,((45,46),(47,(((57,(53,55)),(42,(48,56))),(43,44))))),(63,(54,(59,(49,(60,(61,(62,(51,50)))))))))),(5,6)),((37,((35,34),(28,29))),(36,((39,(38,(41,25))),((26,40),(27,(30,(33,(31,32))))))))))),(9,(7,8))))));
	TREE * inapplicable = [&R] (1,(2,(3,((9,(7,8)),((4,(((58,((52,((47,(57,(((44,43),(55,53)),(42,(56,48))))),(46,45))),(63,(54,(59,(49,(60,(61,(62,(50,51)))))))))),(5,6)),((36,(((26,40),(27,(30,(33,(32,31))))),(39,(38,(41,25))))),(37,((35,34),(29,28)))))),((23,24),((21,(18,17)),(19,(13,(15,(10,((22,(20,(11,12))),(14,16)))))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(((4,(((6,5),(58,((52,((47,(57,(43,(44,(53,(55,(42,(48,56)))))))),(45,46))),(63,(54,(59,(49,(60,(61,(62,(51,50))))))))))),((36,((39,(38,(25,41))),((27,(30,(33,(32,31)))),(26,40)))),(37,((28,29),(34,35)))))),((((13,(19,15)),(10,((14,16),(22,(12,(11,20)))))),(21,(18,17))),(23,24))),(9,(7,8))))));
	TREE * inapplicable = [&R] (1,(2,(3,((9,(7,8)),((4,(((58,((52,((47,(((42,(48,56)),(57,(43,44))),(55,53))),(45,46))),(63,(59,(54,(49,(60,(61,(62,(50,51)))))))))),(5,6)),((37,((35,34),(28,29))),(36,((39,(38,(41,25))),((40,26),(27,(30,(33,(32,31)))))))))),((23,24),((13,(19,(15,(10,((22,(20,(11,12))),(16,14)))))),(21,(18,17)))))))));
	TREE * inapplicable = [&R] (1,(2,(3,((9,(7,8)),((4,(((58,((52,((45,46),(47,(57,(43,(44,(53,(55,(42,(48,56)))))))))),((59,(63,54)),(49,(60,(61,(62,(50,51)))))))),(6,5)),((37,((34,35),(29,28))),(36,(((40,26),(27,(30,(33,(31,32))))),(39,(38,(41,25)))))))),((23,24),((21,(18,17)),((15,(10,(14,((22,16),(20,(11,12)))))),(19,13)))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(((4,(((6,5),(58,((63,(59,(54,(49,(60,(61,(62,(50,51)))))))),(52,((45,46),(47,(((57,(53,55)),(42,(56,48))),(44,43)))))))),((36,((39,(38,(25,41))),((27,(30,(33,(32,31)))),(40,26)))),(37,((34,35),(28,29)))))),(((21,(17,18)),(13,(19,(15,(10,((22,(12,(20,11))),(16,14))))))),(24,23))),(9,(8,7))))));
	TREE * inapplicable = [&R] (1,(2,(3,(((4,(((5,6),(58,((52,((46,45),(47,((57,((55,53),(44,43))),(42,(56,48)))))),(63,(59,(54,(49,(60,(61,(62,(50,51))))))))))),((36,(((40,26),(27,(30,(33,(31,32))))),(39,(38,(25,41))))),(37,((29,28),(35,34)))))),(((21,(18,17)),(13,(19,(15,(10,((14,16),(22,(20,(11,12))))))))),(24,23))),(9,(8,7))))));
	TREE * inapplicable = [&R] (1,(2,(3,((9,(7,8)),(((23,24),((21,(18,17)),(13,(19,(15,(10,((22,(11,(12,20))),(16,14)))))))),(4,(((58,(((47,(45,46)),(52,((57,((53,55),(44,43))),(42,(48,56))))),((49,(60,(61,(62,(51,50))))),(59,(54,63))))),(5,6)),((37,((28,29),(35,34))),(36,(((27,(30,(33,(31,32)))),(40,26)),(39,(38,(41,25)))))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,((9,(8,7)),((4,(((58,((47,((((53,55),(42,(56,48))),(57,(44,43))),(52,(45,46)))),((59,(63,54)),(49,(60,(61,(62,(50,51)))))))),(6,5)),((37,((34,35),(29,28))),(36,(((40,26),(27,(30,(33,(32,31))))),(39,(38,(25,41)))))))),((24,23),((21,(17,18)),((15,(10,(14,((16,22),(20,(12,11)))))),(13,19)))))))));
	TREE * inapplicable = [&R] (1,(2,(3,((9,(8,7)),((4,(((58,((52,((45,46),(47,((57,(42,(56,48))),(43,(44,(53,55))))))),(63,(59,(54,(49,(60,(61,(62,(51,50)))))))))),(6,5)),((37,((29,28),(34,35))),(36,(((40,26),(27,(30,(33,(32,31))))),(39,(38,(25,41)))))))),((24,23),((21,(17,18)),((13,19),(15,(10,(14,(22,(16,(11,(20,12)))))))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,((9,(8,7)),((4,(((58,((52,((46,45),(47,(57,(43,(44,(53,(55,(42,(56,48)))))))))),(63,(54,(59,(49,(60,(61,(62,(51,50)))))))))),(6,5)),((36,(((26,40),(27,(30,(33,(31,32))))),(39,(38,(25,41))))),(37,((35,34),(28,29)))))),((24,23),((21,(18,17)),((13,19),(15,(10,(14,(22,(16,(12,(11,20)))))))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(((((21,(18,17)),((19,13),(15,(10,(14,(16,(22,(20,(12,11))))))))),(24,23)),(4,(((58,((52,((47,((57,(55,(53,(44,43)))),(42,(56,48)))),(46,45))),((59,(63,54)),(49,(60,(61,(62,(50,51)))))))),(5,6)),((36,(((26,40),(27,(30,(33,(31,32))))),(39,(38,(25,41))))),(37,((35,34),(28,29))))))),(9,(8,7))))));
	TREE * inapplicable = [&R] (1,(2,(3,(((4,(((58,(((47,(45,46)),(52,((57,(42,(48,56))),(43,(44,(53,55)))))),((59,(63,54)),(49,(60,(61,(62,(51,50)))))))),(5,6)),((37,((34,35),(28,29))),(36,((39,(38,(25,41))),((26,40),(27,(30,(33,(31,32)))))))))),(((21,(17,18)),((13,(19,15)),(10,((22,(12,(20,11))),(14,16))))),(23,24))),(9,(7,8))))));
	TREE * inapplicable = [&R] (1,(2,(3,(((((21,(17,18)),((13,(19,15)),(10,((14,16),(22,(12,(11,20))))))),(24,23)),(4,(((58,(((49,(60,(61,(62,(50,51))))),(59,(54,63))),(47,((57,(43,(44,(53,(55,(42,(56,48))))))),(52,(45,46)))))),(6,5)),((36,(((40,26),(27,(30,(33,(31,32))))),(39,(38,(25,41))))),(37,((34,35),(28,29))))))),(9,(8,7))))));
	TREE * inapplicable = [&R] (1,(2,(3,((9,(7,8)),((4,(((58,((63,(59,(54,(49,(60,(61,(62,(51,50)))))))),(52,((46,45),(47,((57,(42,(48,56))),((53,55),(43,44)))))))),(6,5)),((37,((34,35),(29,28))),(36,(((26,40),(27,(30,(33,(31,32))))),(39,(38,(25,41)))))))),((23,24),((21,(18,17)),((13,(19,15)),(10,((22,(12,(11,20))),(14,16)))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,((9,(8,7)),((4,(((6,5),(58,((52,((46,45),(47,((57,((53,55),(44,43))),(42,(48,56)))))),(63,(54,(59,(49,(60,(61,(62,(50,51))))))))))),((36,(((27,(30,(33,(31,32)))),(40,26)),(39,(38,(25,41))))),(37,((35,34),(28,29)))))),((24,23),((21,(17,18)),((13,(19,15)),(10,((22,(20,(11,12))),(14,16)))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(((4,(((6,5),(58,((52,((47,(((57,(44,43)),(42,(48,56))),(53,55))),(45,46))),((59,(63,54)),(49,(60,(61,(62,(50,51))))))))),((37,((35,34),(28,29))),(36,((39,(38,(25,41))),((26,40),(27,(30,(33,(31,32)))))))))),((23,24),((21,(17,18)),(13,(19,(15,(10,((22,(20,(12,11))),(16,14))))))))),(9,(7,8))))));
	TREE * inapplicable = [&R] (1,(2,(3,((9,(7,8)),((4,(((5,6),(58,((63,(54,(59,(49,(60,(61,(62,(50,51)))))))),(52,((47,((57,((43,44),(53,55))),(42,(48,56)))),(46,45)))))),((36,(((27,(30,(33,(32,31)))),(40,26)),(39,(38,(41,25))))),(37,((34,35),(29,28)))))),((23,24),((21,(17,18)),(19,(13,(15,(10,((22,(11,(20,12))),(14,16)))))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(((4,(((37,((35,34),(28,29))),(36,(((26,40),(27,(30,(33,(32,31))))),(39,(38,(25,41)))))),((58,((52,((46,45),(47,((57,(42,(56,48))),((55,53),(43,44)))))),((59,(63,54)),(49,(60,(61,(62,(51,50)))))))),(5,6)))),((24,23),((21,(17,18)),((15,(10,(14,(22,(16,(20,(11,12))))))),(13,19))))),(9,(8,7))))));
	TREE * inapplicable = [&R] (1,(2,(3,((9,(7,8)),((4,(((6,5),(58,(((52,((57,((53,55),(43,44))),(42,(48,56)))),(47,(46,45))),((59,(54,63)),(49,(60,(61,(62,(51,50))))))))),((36,(((26,40),(27,(30,(33,(31,32))))),(39,(38,(41,25))))),(37,((35,34),(28,29)))))),((23,24),((21,(18,17)),((15,(10,(14,(22,(16,(12,(20,11))))))),(19,13)))))))));
	TREE * inapplicable = [&R] (1,(2,(3,((9,(8,7)),((4,(((6,5),(58,((52,((47,((57,((55,53),(44,43))),(42,(48,56)))),(45,46))),(63,(54,(59,(49,(60,(61,(62,(50,51))))))))))),((36,((39,(38,(25,41))),((40,26),(27,(30,(33,(31,32))))))),(37,((28,29),(34,35)))))),((24,23),((21,(17,18)),(13,(19,(15,(10,((22,(20,(11,12))),(16,14)))))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(((4,(((36,((39,(38,(25,41))),((27,(30,(33,(32,31)))),(26,40)))),(37,((28,29),(35,34)))),((6,5),(58,((52,((45,46),(47,(57,(43,(44,(53,(55,(42,(48,56)))))))))),((59,(54,63)),(49,(60,(61,(62,(51,50))))))))))),((23,24),(((13,(15,19)),(10,((22,(20,(12,11))),(16,14)))),(21,(18,17))))),(9,(7,8))))));
END;
