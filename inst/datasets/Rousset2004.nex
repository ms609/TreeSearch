#NEXUS
begin data;
  dimensions ntax=34 nchar=107;
  format datatype=standard gap=- missing=? Interleave=no;
  matrix
    Hesiospina_sp                           000---100000--00000-00---00000-0-000000-000000000011110--00000000000--0-0-0-0-0--0000-00--00000000-000-00-?
    Nephtys_hombergii                       000---100000--00000-00---03000-0-000000-001111111111110--00000010000--0-0-0-0-0--0000-00--00000000-000-00-0
    Amphicorina_mobilis                     1311111100021111000-00---03000-0-0000010001111011111110--00000121001011311100-1?10100-00--100010011001010-1
    Anobothus_gracilis                      011000110111--00000-00---03000-0-00000110001?1000001111010111102221101110-10101010301100--010??103-0?1000-1
    Artacama_proboscidea                    202---110011--00000-00---03000-0-0000010000001000011111200111002221111121111101010300-00--0?0?2103-0?1010-?
    Cirriformia_tentaculata                 00100011100---00020-00---03000-0-000000-0011111111111110011111011100--0-0-0-0-0-00001000--000020010010-00-1
    Diplocirrus_glaucus                     1?????11?00---00000-00---13000-0-000000-1011111111111110111110011100--0-0-0-0-0-00000-00--000021010110-00-1
    Dodecaceria_sp                          00100011100---00000-00---03000-0-000000-0001110111111110011110011100--0-0-0-0-0-00001000--000020010010-00-1
    Eupolymnia_nesidensis                   202---110011--00000-00---03000-0-0001010000001000011111100111002221111121111101010300-00--01002103-011010-1
    Fauveliopsis_sp                         0010000-------00000-00---13000-0-0000010101111111111110--00000011100--0-0-0-0-0-00000-00--0??0210??1?0-00-?
    Hydroides_norvegica                     1311011100020000000-00---03000-0-00001??001111011111110--00000121001011010100-1010100-00--100010011011210-0
    Lamellibrachia_barhami                  13????11100---0002101100002101111120000-000111011111110--0000004440101110-0-121110200-01110010101110111111?
    Lanice_conchilega                       202---110011--00000-00---03000-0-0001010000001000011111100111002221111121111101010300-00--01002103-011000-1
    Magelona_sp                             02????1??00---00000-00---0?000-0-000000-00?111?11111110--0000001330100??110-0-1101200-00--00012000-010-00-0
    Melinna_sp                              011000110111--00000-00---03000-0-0000011000011001101111010111102421101100-10101010300-00--01002103-011000-1
    Myriochele_sp                           0010010-------00000-00---03000-0-000000-001111001111110--0000002440121130-100-1100300-00--0????00?00?1000-2
    Myxicola_sp                             1311111100021111000-00---03000-0-0000010001111011111110--000001210010112111?0-1?10100-00--100010011001000-1
    Owenia_sp                               0410010-------00000-00---03000-0-000000-001111000111110--0000002440121130-100-1100300-00--0010200200?1000-2
    Paralvinella_palmiformis                011000110111--00000-00---03000-0-00000??000011000000001110111102-101011011110-1010301200--000?2103-011010-1
    Pectinaria_auricoma                     1?????11?01?--000????0---01000-0-000001?010100000000001300001102-20101110-0-111010301110--01012103-011000-0
    Phragmatopoma_sp                        000---11100---00000-00---01000-0-000000-011111111111111000111112000101110-10100-10101110--0000100100?1010-0
    Pista_cristata                          202---110011--00000-00---03000-0-0001010000001000011111100110002221111121111101110300-00--0?0?2103-0?1010-1
    Polybrachia_sp                          00100011100---00021100---02111010011000-000111011111110--0000004440111110-0-121110200-01000010101100111010?
    Polydora_sp                             0010001110----00000-00---03000-0-000000-0011111111111110000000013301000-110-0-1101200-00--00012000-00101100
    Protula_sp                              1311011100020000000-00---03000-0-00001??001111011111110--00000121001011010100-1010100-00--100010011011210-?
    Pseudopotamilla_reniformis              1311011100021001100-00---03000-0-0000010001111011111110--00000121001011211110-1?10110-00--100010011001010-1
    Ridgeia_piscesae                        13????11100---0002101111102101111120000-000111011111110--0000004440101110-0-121110200-011100101011001111111
    Riftia_pachyptila                       13????11100---0002101111102101111120000-000111011111110--0000004440121110-0-121110200-011100101011001111111
    Sabella_pavonina                        1311011100021101100-00---03000-0-0000010001111011111110--00000121001011211110-1?10110-00--100010011001000-1
    Sabellaria_alveolata                    000---11100---00000-00---01000-0-000000-011111111111111000111112000101110-10100-10101110--000010010011010-0
    Sclerolinum_brattstromi                 00100011100---00000-00---02111111010000-000111011111110--0000004440101110-0-121110200-010100?0101??0?111111
    Siboglinum_ordicum                      00100011100---00011100---02111010011000-000111011111110--0000004440111110-0-121110200-010000101011000110101
    Terebellides_stroemi                    202---110011--00000-00---03000-0-00000110000010000000113001100022211011211100-1?10300-00--01002103-011010-1
    Thelepus_sp                             202---110011--00000-00---03000-0-0000010000011000011111200110002221101121111101010300-00--01002103-0?1010-1
  ;                                                                     
end;

BEGIN TAXA;
	DIMENSIONS NTAX = 34;
	TAXLABELS
		Hesiospina_sp
		Nephtys_hombergii
		Amphicorina_mobilis
		Anobothus_gracilis
		Artacama_proboscidea
		Cirriformia_tentaculata
		Diplocirrus_glaucus
		Dodecaceria_sp
		Eupolymnia_nesidensis
		Fauveliopsis_sp
		Hydroides_norvegica
		Lamellibrachia_barhami
		Lanice_conchilega
		Magelona_sp
		Melinna_sp
		Myriochele_sp
		Myxicola_sp
		Owenia_sp
		Paralvinella_palmiformis
		Pectinaria_auricoma
		Phragmatopoma_sp
		Pista_cristata
		Polybrachia_sp
		Polydora_sp
		Protula_sp
		Pseudopotamilla_reniformis
		Ridgeia_piscesae
		Riftia_pachyptila
		Sabella_pavonina
		Sabellaria_alveolata
		Sclerolinum_brattstromi
		Siboglinum_ordicum
		Terebellides_stroemi
		Thelepus_sp
	;
END;
BEGIN TREES;
	TRANSLATE
		1	Hesiospina_sp,
		2	Nephtys_hombergii,
		3	Amphicorina_mobilis,
		4	Anobothus_gracilis,
		5	Artacama_proboscidea,
		6	Cirriformia_tentaculata,
		7	Diplocirrus_glaucus,
		8	Dodecaceria_sp,
		9	Eupolymnia_nesidensis,
		10	Fauveliopsis_sp,
		11	Hydroides_norvegica,
		12	Lamellibrachia_barhami,
		13	Lanice_conchilega,
		14	Magelona_sp,
		15	Melinna_sp,
		16	Myriochele_sp,
		17	Myxicola_sp,
		18	Owenia_sp,
		19	Paralvinella_palmiformis,
		20	Pectinaria_auricoma,
		21	Phragmatopoma_sp,
		22	Pista_cristata,
		23	Polybrachia_sp,
		24	Polydora_sp,
		25	Protula_sp,
		26	Pseudopotamilla_reniformis,
		27	Ridgeia_piscesae,
		28	Riftia_pachyptila,
		29	Sabella_pavonina,
		30	Sabellaria_alveolata,
		31	Sclerolinum_brattstromi,
		32	Siboglinum_ordicum,
		33	Terebellides_stroemi,
		34	Thelepus_sp
	;
	TREE * ambiguous = [&R] (1,(2,((((((3,17),(26,29)),(11,25)),((((15,(4,(20,(19,(33,(34,(5,(9,(13,22))))))))),(16,18)),(31,((12,(27,28)),(23,32)))),(21,30))),((6,8),(7,10))),(14,24))));
	TREE * ambiguous = [&R] (1,(2,((((((3,17),(26,29)),(11,25)),((((15,(4,(19,(20,(33,(34,(5,(9,(13,22))))))))),(16,18)),(31,((27,(12,28)),(23,32)))),(21,30))),((6,8),(7,10))),(14,24))));
	TREE * ambiguous = [&R] (1,(2,(((((((3,17),(26,29)),(11,25)),(21,30)),(((15,(4,(20,(19,(33,(34,(5,(9,(13,22))))))))),(16,18)),(31,((12,(27,28)),(23,32))))),(14,24)),((6,8),(7,10)))));
	TREE * ambiguous = [&R] (1,(2,(((((((3,17),(26,29)),(11,25)),(21,30)),(((15,(4,(19,(20,(33,(34,(5,(9,(13,22))))))))),(16,18)),(31,((27,(12,28)),(23,32))))),(14,24)),((6,8),(7,10)))));
	TREE * ambiguous = [&R] (1,(2,((((((3,17),(26,29)),(11,25)),((((15,(4,(20,(19,(33,(34,(5,(13,(9,22))))))))),(16,18)),(31,((28,(12,27)),(23,32)))),(21,30))),(14,24)),((6,8),(7,10)))));
	TREE * ambiguous = [&R] (1,(2,((((((3,17),(26,29)),(11,25)),((((15,(4,(19,(20,(33,(34,(5,(13,(9,22))))))))),(16,18)),(31,((12,(27,28)),(23,32)))),(21,30))),(14,24)),((6,8),(7,10)))));
	TREE * extraState = [&R] (1,(2,(((((((3,17),(26,29)),(11,25)),((20,(4,(15,(19,(33,(34,(5,(9,(13,22))))))))),(21,30))),((31,((28,(12,27)),(23,32))),(16,18))),(14,24)),(10,(7,(6,8))))));
	TREE * extraState = [&R] (1,(2,((((((((3,17),(26,29)),(11,25)),((20,(4,(15,(19,(33,(34,(22,(13,(5,9))))))))),(21,30))),(31,((27,(12,28)),(23,32)))),(16,18)),(14,24)),(10,(7,(6,8))))));
	TREE * extraState = [&R] (1,(2,(10,((((((((3,17),(26,29)),(11,25)),((20,(4,(15,(19,(33,((5,34),(13,(9,22)))))))),(21,30))),(31,((27,(12,28)),(23,32)))),(16,18)),(14,24)),(7,(6,8))))));
	TREE * extraState = [&R] (1,(2,(10,((((((((3,17),(26,29)),(11,25)),((20,(4,(15,(19,(33,(34,(5,(13,(9,22))))))))),(21,30))),(31,((12,(27,28)),(23,32)))),(16,18)),(14,24)),(7,(6,8))))));
	TREE * extraState = [&R] (1,(2,(((((((3,17),(26,29)),(11,25)),((20,(4,(15,(19,(33,((5,34),(9,(13,22)))))))),(21,30))),((31,((12,(27,28)),(23,32))),(16,18))),(14,24)),(10,(7,(6,8))))));
	TREE * extraState = [&R] (1,(2,(((((((3,17),(26,29)),(11,25)),((20,(4,(15,(19,(33,(34,(22,(5,(9,13))))))))),(21,30))),((31,((12,(27,28)),(23,32))),(16,18))),(14,24)),(10,(7,(6,8))))));
	TREE * extraState = [&R] (1,(2,(10,((((((((3,17),(26,29)),(11,25)),(((4,15),(20,(19,(33,(34,(5,(9,(13,22)))))))),(21,30))),(31,((27,(12,28)),(23,32)))),(16,18)),(14,24)),(7,(6,8))))));
	TREE * extraState = [&R] (1,(2,(10,((((((((3,17),(26,29)),(11,25)),(((15,(4,(19,20))),(33,(34,(5,(22,(9,13)))))),(21,30))),(16,18)),(31,((12,(27,28)),(23,32)))),(14,24)),(7,(6,8))))));
	TREE * extraState = [&R] (1,(2,((((((((3,17),(26,29)),(11,25)),(((15,(4,(19,20))),(33,(34,(5,(13,(9,22)))))),(21,30))),(31,((12,(27,28)),(23,32)))),(16,18)),(14,24)),(10,(7,(6,8))))));
	TREE * extraState = [&R] (1,(2,(((((((3,17),(26,29)),(11,25)),(((15,(4,(19,20))),(33,(34,(5,(9,(13,22)))))),(21,30))),((31,((12,(27,28)),(23,32))),(16,18))),(14,24)),(10,(7,(6,8))))));
	TREE * inapplicable = [&R] (1,(2,(((((30,21),(20,(4,(15,(19,(33,(34,(5,(22,(9,13)))))))))),((((25,11),((17,3),(26,29))),(31,((32,23),(28,(27,12))))),(18,16))),(14,24)),((10,7),(8,6)))));
	TREE * inapplicable = [&R] (1,(2,(10,(((((20,(4,(15,(19,(33,(34,(22,(5,(9,13))))))))),((30,21),(((29,26),(3,17)),(11,25)))),((31,((12,(28,27)),(32,23))),(18,16))),(24,14)),(7,(8,6))))));
	TREE * inapplicable = [&R] (1,(2,(((14,24),((((31,((32,23),(12,(27,28)))),(16,18)),((25,11),((3,17),(26,29)))),((30,21),(20,((19,(15,4)),(33,(34,(5,(9,(13,22)))))))))),((10,7),(8,6)))));
	TREE * inapplicable = [&R] (1,(2,(((24,14),((((31,((23,32),(12,(27,28)))),(18,16)),((((3,17),(26,29)),(25,11)),((34,(33,(5,(13,(22,9))))),((15,4),(19,20))))),(21,30))),((7,10),(6,8)))));
	TREE * inapplicable = [&R] (1,(2,(((((30,21),((20,((19,(4,15)),(33,(34,(5,(9,(13,22))))))),((25,11),((17,3),(26,29))))),((31,((27,(12,28)),(32,23))),(16,18))),(24,14)),((10,7),(8,6)))));
	TREE * inapplicable = [&R] (1,(2,(((7,10),(8,6)),((((20,(4,(15,(19,(33,(34,(5,(9,(13,22))))))))),(30,21)),(((31,((28,(27,12)),(32,23))),(16,18)),(((3,17),(26,29)),(11,25)))),(14,24)))));
	TREE * inapplicable = [&R] (1,(2,(((7,10),(8,6)),((24,14),(((30,21),((20,((19,(4,15)),(33,(34,(5,(9,(22,13))))))),(((3,17),(26,29)),(11,25)))),((31,((32,23),(28,(27,12)))),(16,18)))))));
	TREE * inapplicable = [&R] (1,(2,(10,(((((20,(4,(15,(19,(33,(34,(5,(9,(13,22))))))))),((30,21),(((26,29),(3,17)),(25,11)))),((31,((28,(12,27)),(32,23))),(16,18))),(14,24)),(7,(8,6))))));
	TREE * inapplicable = [&R] (1,(2,(((10,7),(6,8)),((24,14),((((31,((32,23),(27,(12,28)))),(18,16)),(((33,(34,(5,(13,(22,9))))),((20,19),(4,15))),(((17,3),(29,26)),(11,25)))),(21,30))))));
	TREE * inapplicable = [&R] (1,(2,(((6,8),(7,10)),((((31,((28,(12,27)),(23,32))),(18,16)),((((11,25),((26,29),(17,3))),(21,30)),(20,(4,(15,(19,(33,(34,(22,(13,(9,5))))))))))),(14,24)))));
	TREE * inapplicable = [&R] (1,(2,(10,((7,(8,6)),((24,14),((((31,((32,23),(28,(12,27)))),(16,18)),((((17,3),(29,26)),(11,25)),((34,(33,(5,(9,(13,22))))),((15,4),(19,20))))),(30,21)))))));
	TREE * inapplicable = [&R] (1,(2,(10,(((((20,(4,(15,(19,(33,(34,(22,(13,(9,5))))))))),(21,30)),(((25,11),((17,3),(26,29))),((16,18),(31,((23,32),(27,(12,28))))))),(14,24)),(7,(6,8))))));
	TREE * inapplicable = [&R] (1,(2,(10,(((24,14),((((((29,26),(3,17)),(11,25)),(20,((19,(15,4)),(33,(34,(5,(22,(13,9)))))))),(30,21)),((31,((32,23),(12,(28,27)))),(16,18)))),(7,(6,8))))));
	TREE * inapplicable = [&R] (1,(2,((((((((26,29),(17,3)),(25,11)),((33,(15,(4,(20,19)))),(34,(5,(22,(9,13)))))),((18,16),(31,((12,(28,27)),(23,32))))),(21,30)),(24,14)),((7,10),(8,6)))));
	TREE * inapplicable = [&R] (1,(2,(((7,10),(8,6)),(((((31,((23,32),(27,(28,12)))),(18,16)),(((3,17),(26,29)),(11,25))),((30,21),(20,((19,(4,15)),(33,(34,(5,(9,(22,13))))))))),(24,14)))));
	TREE * inapplicable = [&R] (1,(2,((((((4,15),(20,(19,(33,(34,(5,(22,(13,9)))))))),(21,30)),(((31,((28,(12,27)),(23,32))),((25,11),((29,26),(17,3)))),(18,16))),(14,24)),((10,7),(6,8)))));
	TREE * inapplicable = [&R] (1,(2,(10,(((((20,(4,(15,(19,(33,(34,(22,(9,(5,13))))))))),((21,30),((25,11),((29,26),(17,3))))),((31,((23,32),(28,(12,27)))),(16,18))),(14,24)),(7,(6,8))))));
	TREE * inapplicable = [&R] (1,(2,(10,(((14,24),(((20,(4,(15,(19,(33,(34,(22,(13,(9,5))))))))),((21,30),(((29,26),(17,3)),(11,25)))),((31,((23,32),(12,(28,27)))),(18,16)))),(7,(8,6))))));
	TREE * inapplicable = [&R] (1,(2,(((24,14),(((21,30),((20,((19,(4,15)),(33,(34,(5,(13,(22,9))))))),(((3,17),(29,26)),(11,25)))),((31,((28,(12,27)),(23,32))),(18,16)))),((7,10),(8,6)))));
	TREE * inapplicable = [&R] (1,(2,(((10,7),(6,8)),((24,14),((((16,18),(31,((28,(27,12)),(23,32)))),((((15,4),(20,19)),(34,(33,(5,(13,(9,22)))))),(((17,3),(29,26)),(25,11)))),(21,30))))));
	TREE * inapplicable = [&R] (1,(2,(((24,14),((((31,((28,(12,27)),(23,32))),(18,16)),(((3,17),(29,26)),(11,25))),((21,30),((20,(19,(33,(34,(5,(22,(13,9))))))),(15,4))))),((7,10),(6,8)))));
	TREE * inapplicable = [&R] (1,(2,(((7,10),(6,8)),((14,24),(((20,(4,(15,(19,(33,(34,(5,(13,(22,9))))))))),(21,30)),(((31,((23,32),(12,(28,27)))),((25,11),((29,26),(17,3)))),(18,16)))))));
	TREE * inapplicable = [&R] (1,(2,(((8,6),(7,10)),(((((31,((12,(27,28)),(23,32))),(((17,3),(29,26)),(11,25))),(16,18)),(((20,(19,(33,(34,(5,(9,(22,13))))))),(4,15)),(21,30))),(24,14)))));
	TREE * inapplicable = [&R] (1,(2,(10,(((14,24),((((((29,26),(3,17)),(11,25)),(20,((19,(15,4)),(33,(34,(5,(9,(13,22)))))))),(30,21)),((31,((32,23),(28,(12,27)))),(16,18)))),(7,(8,6))))));
	TREE * inapplicable = [&R] (1,(2,(10,((7,(6,8)),(((((((17,3),(26,29)),(11,25)),(30,21)),(20,(4,(15,(19,(33,(34,(22,(5,(9,13)))))))))),((31,((28,(27,12)),(32,23))),(18,16))),(24,14))))));
	TREE * inapplicable = [&R] (1,(2,(((((31,((27,(28,12)),(32,23))),(16,18)),((((25,11),((26,29),(17,3))),(30,21)),(20,(4,(15,(19,(33,(34,(5,(13,(9,22))))))))))),(14,24)),((7,10),(8,6)))));
	TREE * inapplicable = [&R] (1,(2,(10,((7,(6,8)),((((((33,(34,(5,(13,(22,9))))),(15,(4,(20,19)))),((11,25),((3,17),(26,29)))),((31,((28,(12,27)),(32,23))),(16,18))),(30,21)),(24,14))))));
	TREE * inapplicable = [&R] (1,(2,(10,(((24,14),(((20,(4,(15,(19,(33,(34,(22,(9,(13,5))))))))),(21,30)),(((18,16),(31,((23,32),(27,(28,12))))),(((29,26),(17,3)),(11,25))))),(7,(8,6))))));
	TREE * inapplicable = [&R] (1,(2,(((24,14),((((31,((27,(12,28)),(23,32))),(((3,17),(29,26)),(11,25))),(18,16)),((21,30),((15,4),(20,(19,(33,(34,(5,(13,(22,9))))))))))),((10,7),(6,8)))));
	TREE * inapplicable = [&R] (1,(2,(((14,24),(((20,(4,(15,(19,(33,((34,5),(13,(22,9)))))))),((30,21),(((3,17),(26,29)),(11,25)))),((31,((32,23),(12,(27,28)))),(16,18)))),((10,7),(6,8)))));
	TREE * inapplicable = [&R] (1,(2,(((14,24),((((31,((32,23),(27,(12,28)))),(16,18)),((((17,3),(29,26)),(11,25)),((34,(5,(9,(13,22)))),(33,((20,19),(15,4)))))),(30,21))),((6,8),(10,7)))));
	TREE * inapplicable = [&R] (1,(2,(((((30,21),((20,(19,(33,(34,(5,(9,(13,22))))))),(4,15))),(((11,25),((29,26),(17,3))),((31,((12,(28,27)),(32,23))),(16,18)))),(14,24)),((10,7),(6,8)))));
	TREE * inapplicable = [&R] (1,(2,(10,((7,(8,6)),((14,24),((((18,16),(31,((23,32),(12,(28,27))))),(((29,26),(17,3)),(25,11))),((20,((19,(4,15)),(33,(34,(5,(13,(22,9))))))),(21,30))))))));
	TREE * inapplicable = [&R] (1,(2,(((10,7),(8,6)),((24,14),(((20,((19,(15,4)),(33,(34,(5,(22,(9,13))))))),(30,21)),(((31,((32,23),(28,(27,12)))),(16,18)),(((3,17),(26,29)),(11,25))))))));
	TREE * inapplicable = [&R] (1,(2,(((((21,30),((20,((19,(4,15)),(33,(34,(5,(22,(13,9))))))),((25,11),((26,29),(3,17))))),((31,((12,(27,28)),(23,32))),(18,16))),(24,14)),((7,10),(6,8)))));
	TREE * inapplicable = [&R] (1,(2,(((10,7),(8,6)),(((((((29,26),(17,3)),(11,25)),((33,(34,(5,(22,(13,9))))),(15,(4,(20,19))))),((31,((32,23),(27,(28,12)))),(16,18))),(30,21)),(14,24)))));
	TREE * inapplicable = [&R] (1,(2,(10,(((((20,(4,(15,(19,(33,(34,(5,(22,(9,13))))))))),((30,21),((11,25),((3,17),(29,26))))),((18,16),(31,((32,23),(12,(28,27)))))),(24,14)),(7,(8,6))))));
	TREE * inapplicable = [&R] (1,(2,(10,(((24,14),(((20,(4,(15,(19,(33,(34,(22,(13,(9,5))))))))),((21,30),(((3,17),(29,26)),(11,25)))),((31,((27,(12,28)),(23,32))),(18,16)))),(7,(6,8))))));
	TREE * inapplicable = [&R] (1,(2,(10,((7,(6,8)),((14,24),(((31,((27,(28,12)),(32,23))),(16,18)),(((((26,29),(3,17)),(25,11)),(30,21)),(20,(4,(15,(19,(33,((34,5),(13,(9,22)))))))))))))));
	TREE * inapplicable = [&R] (1,(2,(10,(((14,24),(((((19,(15,(4,20))),(34,(33,(5,(22,(13,9)))))),(((3,17),(29,26)),(11,25))),((31,((32,23),(27,(12,28)))),(16,18))),(30,21))),(7,(6,8))))));
	TREE * inapplicable = [&R] (1,(2,(((((21,30),(20,(4,(15,(19,(33,((34,5),(9,(22,13))))))))),(((31,((28,(27,12)),(23,32))),(((3,17),(26,29)),(11,25))),(18,16))),(24,14)),((10,7),(6,8)))));
	TREE * inapplicable = [&R] (1,(2,(10,(((((30,21),(20,((19,(4,15)),(33,(34,(5,(9,(22,13)))))))),(((25,11),((17,3),(26,29))),((31,((27,(28,12)),(32,23))),(16,18)))),(24,14)),(7,(8,6))))));
	TREE * inapplicable = [&R] (1,(2,(((((30,21),(20,((19,(15,4)),(33,(34,(5,(22,(13,9)))))))),(((11,25),((29,26),(17,3))),((31,((27,(12,28)),(32,23))),(16,18)))),(14,24)),((7,10),(8,6)))));
	TREE * inapplicable = [&R] (1,(2,(10,((7,(8,6)),((24,14),(((20,((33,(34,(5,(9,(13,22))))),(19,(4,15)))),(30,21)),(((31,((32,23),(12,(27,28)))),(16,18)),(((3,17),(26,29)),(11,25)))))))));
	TREE * inapplicable = [&R] (1,(2,(10,(((24,14),((((31,((32,23),(28,(27,12)))),(16,18)),((((17,3),(29,26)),(11,25)),((33,(34,(5,(22,(9,13))))),((4,15),(20,19))))),(30,21))),(7,(8,6))))));
	TREE * inapplicable = [&R] (1,(2,(10,((((((16,18),(31,((23,32),(28,(12,27))))),(((3,17),(26,29)),(25,11))),((20,(4,(15,(19,(33,((34,5),(22,(9,13)))))))),(21,30))),(14,24)),(7,(6,8))))));
	TREE * inapplicable = [&R] (1,(2,(((24,14),(((20,(4,(15,(19,(33,(34,(22,(13,(9,5))))))))),(30,21)),(((31,((23,32),(12,(28,27)))),(16,18)),(((3,17),(29,26)),(11,25))))),((7,10),(8,6)))));
	TREE * inapplicable = [&R] (1,(2,(((((((25,11),((26,29),(3,17))),((33,(34,(5,(22,(13,9))))),((15,4),(19,20)))),((31,((23,32),(27,(12,28)))),(16,18))),(30,21)),(24,14)),((7,10),(8,6)))));
	TREE * inapplicable = [&R] (1,(2,(10,(((24,14),((21,30),((((34,(33,(5,(22,(13,9))))),(19,(15,(4,20)))),(((3,17),(26,29)),(11,25))),((31,((23,32),(28,(12,27)))),(18,16))))),(7,(8,6))))));
	TREE * inapplicable = [&R] (1,(2,(((7,10),(6,8)),(((((((26,29),(3,17)),(25,11)),((34,(33,(5,(9,(22,13))))),(19,(15,(4,20))))),((31,((23,32),(28,(27,12)))),(18,16))),(21,30)),(24,14)))));
END;
