#NEXUS
begin data;
  dimensions ntax=58 nchar=317;
  format datatype=standard gap=- missing=? Interleave=no SYMBOLS= "0123459";
  matrix 
    Probainognathus   0?000000?00000??00000???0?0000000000000?0???????????0??00?00????????00??0?00?0000???00????????200????0?000001100??????0000????0010?0?00?000?0??0?0??????0000?00?00?0????0?000000?00000000000000?0??000000?00000???00???0?100000??000??0000000000000011010000?000?00?00000000000000000000000000000000000000000?00000?00000???0
    Tritylodontids   0?000010?00000??00000???0?3000?110?2??1??0??????0?0????????4????????00??0?00??0????????????????00??????100511402??????2????????????0?120011????0?3??????0000?00000?000000000000000000000?000000?000000000000000000000??00100000??000??00000001?0001000000101?100?000001000100000000?0010000000000000000?01010?00000?00000???0
    Tritheledontids   1?000000?000000?000000001?20000000001?0?0?????????0?0??00?00????????00??0?00?0?000??00????????240????0?00?001100??????000?????0010?0?00?001?0??0?0??????00100?0??0?00?1101000000?00000000000000?0??0?000???0?????????????1000100?000??0?000001?0000001000000?000?00000000100?11010000000000000000010?001?001???????011100???0
    Adelobasileus   1???????????????????????????????????????????????????0???0?????????0?00????????0??????????????????????0????0??0????????????????????????????????????????????????????????????????????????????????????????????????????????????10??????01?0????000001002010110000?00000000001????0?????0?1110?00??1101120??????01????????????10???
    Sinoconodon   1?000000?0000000000000011000000000001?1010010000000001200?00000???0010?00000100000??000??0--??200????0?00?101000?0?0?0000?????00?0?0??10000?0??001?0000000101000?00?000000000000000000000000000????000000??0?????????????10001000011000000000001112000000101?0000001001110000110110110100000110000000000010100000000000010??0
    Morganucodon   10000100?00000000000000?1000021000?01?1300100000000101200?11000???0012001202000000??000??0--??240????0?00?10100100?0?0000?????0000?0?110010?1??001?000000010100000?10?1?0010?000?00000000000000?0000100010?0?00000000????100110??0121101000000011120101001120100000101110110?210110110100000110011101100010100000000010010??0
    Megazostrodon   10000100?000000000000000201100?000?01??300101000000101200?12000???0012000102000000??000??0--??240????0?00?10100100?0?0000?????0000?0?110000?0??001?0000000100?0000?1????0?100000?000000000000?0000001000?00000000000?000010?110??01201010?00000111101?10011201000001011101?0?21?11?11?10??001?001?10???????1???????0110?10??0
    Dinnetherium   100001110000000000000002201100?0?0?0???300100000000101200?11020???0012011201000000??000??0--??240????0?00?10100100?0?0000?????0000?0?110010?0??001?0000000101?????????????????????????????????????????????????????????????????????12110???000001111?1?1001120100000101110?10?21??1??1??????????????????????1???????00????????
    Haldanodon   10000010?0000000000000011011021000001??100100000001001200?11??0???0012002100000000??000??0--??210????0?00150130100?0?00100???00000?0?11001001001?10000000000??????????????100????00?00?0100000?????0?000?0???????????????1001201101200010000000111001???01020100000110110????2?02112211000000?101111110000000???10??010010??0
    Hadrocodium   1?101???300?10000?000000102??2?0?0?01??0?0?1100010?001100?12000???001?000000000000??000??0--??200????0?00?10100100?0?0000?????0000?0?1100?0?0??001?0000000???????????????????????????????????????????????????????????????1100210101212????00000111?110210002110000010?11?????2??2112211001001111212101?00?21??11111??00?10??0
    Kuehneotherium   10000110?00000000000000?100101?0?01???13?0?0100000010?3120120200?0111101120101000000000000--?0110???00?0002001011100?0010000?01000?0??1001??100101??00?00000?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
    Pseudotribos   1?0001110000?00000??0001?10010?0?0?11??3100100100111102211120100?0110101220001000000011000--200201010000003012021100?011001000100010?1100?1010010110000000????????00000000001010000000001000????0?10?000?????????????????1???????????????????????????????????????????????????????????????????????????????????????????????????
    Ambondro   ???0??1????????????????????????????????????0?0200011???21?131?11021?00011200?100002114110100?1????????????301?0211?11?110?00???????0?1100????0010???00??0????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
    Ausktribosphenos   1010011121?0100010010?0?112012?????????3?01101210011??121?131021221?00001200020000211411021123????????????501?0212???0110?11???????0?1100??????00???00?00????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
    Henosferus   1000011121?0000020010000112112?0?0?1???3?001001000?00?122?131211021?001100010100002114110??021???????????0301?0211?100110?00?01????0?1100?00???00??000000?01????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1????????
    Asfaltomylos   10000?11210??0002001010?112112???????????0???0100011??121?13??112?1?001100011100002114110?0021?????????????01?0211??00110?10??1????0?1100????0000???00000????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
    Bishops   101011112110100010010101112112???0?????3?01101210011??121?131021221?00001200110000211411021123????????????501?0212???0110?11???????0?1100????0000???00?00????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
    Steropodon   1??0101????????????????????01???????????????????0?????121?1311211?1?0010112002000122031100--23????????????501?0212?210020?00???????0?1100????0011?0??0??0????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
    Teinolophos   ??1011112100100020011101112012????????????????????????221?1311211?1?0000112012000?22031100--23????????????501?0212?210020?00???????0?1100??2?0011???????0????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
    Obdurodon   ??102010310011002011101?112111?1???2???0?0011020011001121?1311211?1?00101?200210?022031100--23010???????0?50140212?210?200100?100000?1200??2100113?00000002121???????????????????????????????????????????????????????????0000111001212????000011111111210012010000000000?????2??2112211121?11101212111101?211??????1??0010??0
    Ornithorynchus   10102?10?1111100201?111111?111?1???2???0????????0???011???1?????????0???1?200210??220?1100--23010???????0050040????????2??????100000?12001?21??0?30??00?1101??110111000000001010000000001000000?1110000020100000000211111000010100121212000000111111112100120100000000002012?2112112211121?111012121111000211110111??00010??0
    Gobiconodon   13101110???0?11020110111101001?110111?120001?010000101200?12010???0111010001000?00??0000?0--??210??????00010100110?0?00000?????020?01110001?0??001?0000000101?????00????1?21?1?1?1110000110000??00000000100100??????????110012011012?10?0?000??1?1?11???????0?0??00?????????????21??????0??1012001?0?1?0??01???????00???10??0
    Amphilestes   13101110???1?110200?0?1110210??0?0?0??120001101000010?200?12010??00?11010001000?00??0000?0--??2?????????0?10100110?0?0000??????????0?1100???0??001?000000????0?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1?????????????????????????????????
    Jeholodens   1?10??10?????110?0?100121010?1?010?11??010?10000000101200?12010???00110?0001?00000??000000--??2?0??????00?10?00110?0?00000??00?0?0?011100?1?0??001?0000000?????0??10????112111??01110??0110100000?0000001000001?000010100?0012?110?????1??????????????????????????????????122????1??????0??11???11??01?0??1???????????00?????
    Priacodon   11101010???1?11020110012101101?010?000?100001010100201200?11110???0011100003100?00??0000?0--??210??????11?10100100?0?00000??00?000?02110010?0??001?0000000101???????????????????????????110100???????????????????????????1?????????21101??000001111?11100??20??00??10121?????2??21???????????11???2????????????????00???10??0
    Trioracodon   11101010???1?110201100121010011??010??1200001010000201100?11110???0011?00003100?00??0000?0--??210??????11?10100100?0?00000??00?000?02110010?0??001?0000000?????????????????????????????????????????????????????????0??????????????121101??000001111?1110011201?00??1012??????2???1???????????11???????????1?1101110?????10??0
    Tinodon   10101110???0?11010??0111113111?0?0?1???10001001000010?212?120100?0110101120101000000010000--00110???00?00020010111?0?001010?001000?021100??01??001??00?00????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
    Peramus   1?1011114100110021010001112112?0?010???3000011101001011210131201001100010001010?0001021110--01010?0000000030110211110011010?0011?01011100??01??00100000000???????????????????????????????????????????????????????????????1???????????????????????????????????????????????????????????????????????????????????????????????????
    Vincelestes   12102?11?10011001101010111211??1101000?0000010101011011220130101001100100000010000101210000?0101110000?0003011021111001100000010001021100?101??0021000001010001111?11211112111110111101001111000010111001110101100121??0?110021110121210?1111001111110211012120110011021?????21?110?11101000?12001211110??11???????0010010000
    Kielantherium   1?1010114100?10011110?0??1311??????0???200001000?0000?2210130201011100?10001010000111411000?0100110000000030110212110112010000110010?1100??01??0021?00??0????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
    Deltatheridium   13102?113101110111010101313111?01110001100001010100101221013120101110011000111000011141111010102110?10000030120212210112010000110010111001001??00210000000100????????????????????????????????????????????????1211?12?????111?21111121222??111002123221???00212?000111021?????21?211110101??0112?1?200211??1????0???001000?000
    Asiatherium   13101?113101110111010101?1311???11??00?10000101010010122111310012111001100111101002114111111130111022000003012021221011200100011001001100??01??00210000000???????101????11210111?21111120221111?0101?111111101?????????2011102111112122???111??2?2322????00?121??1111??1?????21?21111010???01???11200?????21??????????100?000
    Kokopellia   13?01?113??1?1??11110?????301??0?0?0???1?00010101001??221113110121110011001111010021141111110302110120000030120212210112001000210010?11001001??0021?00?000???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
    Pucadelphys   13101?11310111011101011131311??01110001100001010100101221113100121110011001111010021141112111303110221100030120212210112001000210010011001001??00210000000???1111101121111210111121111120221111?11011111111101211112020?0111021111121222??111002123221???002121000111021?????21?211110101110112011200211?210?????????1100?000
    Didelphis   12102?1131011101110101113130111011100011110010101001012211131001211100110011110100211411121113031102011000301202122101120010002000100110010010?0021000000011211111011211112101111211111202211111110111111111012111120202011102111112122211111002123221???0021200011110211111121221111010111011200120021112100110111210100?000
    Pappotherium   ???0??1??????????????????????????????????0?010001000???210131001011100110001?100001114111110020311001000003012021221011101100011001001100??01??0021??00000???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
    Erinaceus   12102?1111011100110101013131121100111?100000011000001112111300012111001100210100002113?1?11113111112200000501402122111120010001000102110011011110310000000112111110112111121011112111112022101010111111121111221211102020111021111121222111121?2123221?110021201100110211111121221111010110011201121021112210110111210100?111
    Asioryctes   1?102?111100110011010101313112?000100012000110100000101211130001011100110001210000111411111003021111200000301202122101120110001100100110010010000210000000???01111??????????????????????????0101??????????10122?2111020?011102111112122???1121?2123221?11002120100011021?????21?211110101110112011210211??110110111??0000?111
    Prokennalestes   1?1010111100110011110001312112?0?0?0???300011010000010121113000101110011000121000011141111100303111110000?30120212210111011000110010011001?010000210000000100????????????????????????????????????????????????????????????1????????1212221111201212??21?110021??11??11021?????2???????????1????1????????????????????00???11000
    Zhangheotheriids   12101010???0?11020010111110111?010111?11101100100101013220120100?0110100120101000000000000--?0020???00?0004112011100?011000?001110001110111110010100000000????1100010101112111110111101?111100000001111011000011001211?211001211101211????111001?11?1121001212000001?121?????21??1????1?0??01???1???0111??????????????????000
    Amphitheridae   101111114100110020010101112112?0?0?0???3?00010100010??321?13100100110011000101001001021110--01110???00?00040110211110011010?00110000?1100??0???00200000000???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
    Henkelotherium   10111011110011002001010111301?10?010??11000000101011013210121000?0110010000001001000000000--00000???0000004012121110?012011?0010100021100100000102000000001000?????1????112111?1?11110?00111000??0011110111010????1?????101?12?11012121111?110?11????121?002??011??110???????????1??????11?01??????????????????????0?0011?00?
    Dryolestes   1011111111001100200101011130101000101?12000000101011013210121000?0110010000001001000000000--00000???0000004212121110?012011?012010002111110000010200000000100???????????????????????????111100???????????????????????????1?????????????????????????????????????????????????????????????????????????????????????????001???????
    Laolestes   10111111110011002001010111301??0?010???2?00000101011013210121000?0110010000001001000000000--00000???0000014212121110?012111?112110002111111100010200000000100????????????????????????????????????????????????????????????1?????????????????????????????????????????????????????????????????????????????????????????00????????
    Amblotherium   10111111110011002001010111301??0?010???20000001010110?3210121000?0110010000001001000000000--00000???0000014212121110?012011?0011?0001111111100010200000000???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
    Comotherium   ???1??????????????0???????????????????????????????????3??012???????10?????????0???????????????000???0000004??2121110??1??1??002100001111?1?10????200??0??0???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
    Mesungulatum   ??11??1????????0????0??????????????0?????2?1012?2011011210121000?0110000202001000100000000--000?0???00?0?15112121110?0?1111?122011?021101??00111020???1100???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
    Coloniatherium   11112?111101?10011010?????3102????1000?1021101212001011210121000?0110000202001000100000000--00000???00?0015112121110?011011?122011?0211011?001110201111100100??????????????????????????????????????????????????????????????????????21220??11?00111??1111010212?11?01112??????2?????????????????????????????????????00?????000
    Reigitherium   11112?1????1???01??10?????2112???????????1011121100001?210121?00?0100010202001000200000000--00040???00?0005112121010?0110?1?122001?1211011??0112020?11??00?????????????????????????????????????????????????????????????????????????212201111?00111????????????????????????????????????????????????????????????????????????000
    Peligrotherium   10112?11110111001101010??13102??1?1000?1021111212102011210121000?0110000202001000100000000--00040???00?0015114121110?01?011?122011?12110110001120201111000??????????????????????????????????????10?????????0?????????????0??0?0???121220??1100111??21101011??2?11?01112??????2??21?2??1?0??0012001?10?11??11??0011?????110000
    Groebertherium   ???1????????????????????????????????????????????????0??210121000?01100101010?1001000000010--00000???00?00?4212121110?0?2101?022111?0?1111???0011020????0???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????0?????????????
    Leonardus   ???12?1??????????????????????????????????1?01101100201?210121000??1100100000020001000000?0--??000???00?0014212121110?0?2001?122001?021?31??10000?100000111???????????????????????????????????????????????????????????????0???????????????????????????????????????????????????????????????????????????????????????????????????
    Foxraptor   00?11011???1???01??10??????10??0?0?0???1000111101001??2210131000?01?00100000?1001000020000--20????????????510?0211?0?0?20?1????0???0?1100?0????00??000?00????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
    Paurodon   0?111111???0?1?01??10??????11??0??10???01000111010110?2210130000?0110010000001001000020010--20??0?-???????4112021110?0?20?1???????00?1100???0??00??000?01????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
    Cronopio   10112?113101110010010011111101??1?1001?2110011201002001210121000?0110010000002000100000000--00000?--00?0004212121110?012011?002011?02002111100000000000111???????????????????????????????????????????????????????????????0001201111212?0??1110?111??1011010212?11?01112??????21?01??0?100?100?????1?0?10??2????01?1??00110000
    Drescheratherium   ????????????????????????????????0??001?11???????????002??01????????10???????010???????????????000???00?001???2?2111??????1??11100000011????100?0?200??0??0???????????????????????????????????????????????????????????????1?????????????????????????????????????????????????????????????????01????????????????????????????????
    Necrolestes   10112?11?1011100110101?1113112?001?000?1100101011002011220121100?011001000000200010000-0-0----000?--00?10042?2121110?-120?1?001001?020021?110000000000011111?0?1?1?1??????1????1?2110010112011??0??111010??0?????????????0??021111121221111111?111??1011011212011001?021??????1?111?101????001?12?110?0???211??01??0?00110000
    Spalacotherium   12101010???0?11020?10111112111?0??100??2010100100111013210120100?0110100121101000000000000--?0000???00?0004?12121110?012000?001110?011101?01?0010100000?00???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
  ;
end;

BEGIN TAXA;
	DIMENSIONS NTAX = 58;
	TAXLABELS
		Probainognathus
		Tritylodontids
		Tritheledontids
		Adelobasileus
		Sinoconodon
		Morganucodon
		Megazostrodon
		Dinnetherium
		Haldanodon
		Hadrocodium
		Kuehneotherium
		Pseudotribos
		Ambondro
		Ausktribosphenos
		Henosferus
		Asfaltomylos
		Bishops
		Steropodon
		Teinolophos
		Obdurodon
		Ornithorynchus
		Gobiconodon
		Amphilestes
		Jeholodens
		Priacodon
		Trioracodon
		Tinodon
		Peramus
		Vincelestes
		Kielantherium
		Deltatheridium
		Asiatherium
		Kokopellia
		Pucadelphys
		Didelphis
		Pappotherium
		Erinaceus
		Asioryctes
		Prokennalestes
		Zhangheotheriids
		Amphitheridae
		Henkelotherium
		Dryolestes
		Laolestes
		Amblotherium
		Comotherium
		Mesungulatum
		Coloniatherium
		Reigitherium
		Peligrotherium
		Groebertherium
		Leonardus
		Foxraptor
		Paurodon
		Cronopio
		Drescheratherium
		Necrolestes
		Spalacotherium
	;
END;
BEGIN TREES;
	TRANSLATE
		1	Probainognathus,
		2	Tritylodontids,
		3	Tritheledontids,
		4	Adelobasileus,
		5	Sinoconodon,
		6	Morganucodon,
		7	Megazostrodon,
		8	Dinnetherium,
		9	Haldanodon,
		10	Hadrocodium,
		11	Kuehneotherium,
		12	Pseudotribos,
		13	Ambondro,
		14	Ausktribosphenos,
		15	Henosferus,
		16	Asfaltomylos,
		17	Bishops,
		18	Steropodon,
		19	Teinolophos,
		20	Obdurodon,
		21	Ornithorynchus,
		22	Gobiconodon,
		23	Amphilestes,
		24	Jeholodens,
		25	Priacodon,
		26	Trioracodon,
		27	Tinodon,
		28	Peramus,
		29	Vincelestes,
		30	Kielantherium,
		31	Deltatheridium,
		32	Asiatherium,
		33	Kokopellia,
		34	Pucadelphys,
		35	Didelphis,
		36	Pappotherium,
		37	Erinaceus,
		38	Asioryctes,
		39	Prokennalestes,
		40	Zhangheotheriids,
		41	Amphitheridae,
		42	Henkelotherium,
		43	Dryolestes,
		44	Laolestes,
		45	Amblotherium,
		46	Comotherium,
		47	Mesungulatum,
		48	Coloniatherium,
		49	Reigitherium,
		50	Peligrotherium,
		51	Groebertherium,
		52	Leonardus,
		53	Foxraptor,
		54	Paurodon,
		55	Cronopio,
		56	Drescheratherium,
		57	Necrolestes,
		58	Spalacotherium
	;
  TREE * ambiguous = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((24,((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,((36,(31,(33,(32,(34,35))))),(39,(37,38))))))),(((49,(50,(47,48))),(52,(55,57))),(53,(54,56)))),(42,(43,((44,51),(45,46))))),(40,58))))),(22,23))),(25,26))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((23,((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,((36,(31,(33,(32,(34,35))))),(39,(37,38))))))),((53,((49,(50,(47,48))),(52,(55,57)))),(54,56))),(42,(43,((44,51),(45,46))))),(40,58))))),(22,24))),(25,26))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((23,((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,((36,(31,(32,(33,(34,35))))),(39,(37,38))))))),((53,((49,(50,(47,48))),(52,(55,57)))),(54,56))),(42,(43,(46,(45,(44,51)))))),(40,58))))),(22,24))),(25,26))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,(((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,(36,((31,(33,(32,(34,35)))),(39,(37,38)))))))),((53,((49,(50,(47,48))),(52,(55,57)))),(54,56))),(42,(43,(46,(45,(44,51)))))),(40,58))))),(23,(22,24))),(25,26))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,(36,((31,(33,(32,(34,35)))),(39,(37,38)))))))),((53,((49,(50,(47,48))),(52,(55,57)))),(54,56))),(42,(43,(46,(45,(44,51)))))),(40,58))))),((22,24),(23,(25,26))))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((24,((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,(36,((31,(33,(32,(34,35)))),(39,(37,38)))))))),(((49,(50,(47,48))),(52,(55,57))),(53,(54,56)))),(42,(43,(46,(45,(44,51)))))),(40,58))))),(22,23))),(25,26))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),(((41,(28,(29,(30,(36,((31,(33,(32,(34,35)))),(39,(37,38)))))))),((42,(43,(46,(45,(44,51))))),(((49,(50,(47,48))),(52,(55,57))),(53,(54,56))))),(40,58))))),(23,((22,24),(25,26))))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,(((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,((36,(31,(32,(33,(34,35))))),(39,(37,38))))))),(((49,(50,(47,48))),(52,(55,57))),(53,(54,56)))),(42,(43,((44,51),(45,46))))),(40,58))))),(23,(22,24))),(25,26))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((24,((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,((36,(31,(32,(33,(34,35))))),(39,(37,38))))))),((53,((49,(50,(47,48))),(52,(55,57)))),(54,56))),(42,(43,(46,(45,(44,51)))))),(40,58))))),(22,23))),(25,26))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,(((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,((36,(31,(32,(33,(34,35))))),(39,(37,38))))))),((53,((49,(50,(47,48))),(52,(55,57)))),(54,56))),(42,(43,((44,51),(45,46))))),(40,58))))),(23,(22,24))),(25,26))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,(24,((23,(22,(11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,(36,((31,(33,(32,(34,35)))),(39,(37,38)))))))),(((49,(50,(47,48))),(52,(55,57))),(53,(54,56)))),(42,(43,((44,51),(45,46))))),(40,58))))))),(25,26)))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,(24,(((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,((36,(31,(33,(32,(34,35))))),(39,(37,38))))))),((53,((49,(50,(47,48))),(52,(55,57)))),(54,56))),(42,(43,(46,(45,(44,51)))))),(40,58))))),(22,23)),(25,26)))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((23,((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,((36,(31,(32,(33,(34,35))))),(39,(37,38))))))),(((49,(50,(47,48))),(52,(55,57))),(53,(54,56)))),(42,(43,(46,(45,(44,51)))))),(40,58))))),(22,24))),(25,26))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,((36,(31,(33,(32,(34,35))))),(39,(37,38))))))),((53,((49,(50,(47,48))),(52,(55,57)))),(54,56))),(42,(43,(46,(45,(44,51)))))),(40,58))))),((22,24),(23,(25,26))))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,((36,(31,(32,(33,(34,35))))),(39,(37,38))))))),((53,((49,(50,(47,48))),(52,(55,57)))),(54,56))),(42,(43,(46,(45,(44,51)))))),(40,58))))),((22,24),(23,(25,26))))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,(24,(((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,((36,(31,(32,(33,(34,35))))),(39,(37,38))))))),((53,((49,(50,(47,48))),(52,(55,57)))),(54,56))),(42,(43,(46,(45,(44,51)))))),(40,58))))),(22,23)),(25,26)))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,((36,(31,(32,(33,(34,35))))),(39,(37,38))))))),(((49,(50,(47,48))),(52,(55,57))),(53,(54,56)))),(42,(43,((44,51),(45,46))))),(40,58))))),(23,((22,24),(25,26))))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),(((41,(28,(29,(30,((36,(31,(33,(32,(34,35))))),(39,(37,38))))))),((42,(43,(46,(45,(44,51))))),(((49,(50,(47,48))),(52,(55,57))),(53,(54,56))))),(40,58))))),(23,((22,24),(25,26))))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((23,((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,((36,(31,(33,(32,(34,35))))),(39,(37,38))))))),((53,((49,(50,(47,48))),(52,(55,57)))),(54,56))),(42,(43,(46,(45,(44,51)))))),(40,58))))),(22,24))),(25,26))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((23,((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,(36,((31,(33,(32,(34,35)))),(39,(37,38)))))))),(((49,(50,(47,48))),(52,(55,57))),(53,(54,56)))),(42,(43,((44,51),(45,46))))),(40,58))))),(22,24))),(25,26))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((23,((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,((36,(31,(32,(33,(34,35))))),(39,(37,38))))))),((53,((49,(50,(47,48))),(52,(55,57)))),(54,56))),(42,(43,((44,51),(45,46))))),(40,58))))),(22,24))),(25,26))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,((36,(31,(33,(32,(34,35))))),(39,(37,38))))))),(((49,(50,(47,48))),(52,(55,57))),(53,(54,56)))),(42,(43,((44,51),(45,46))))),(40,58))))),((22,24),(23,(25,26))))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((24,((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,(36,((31,(33,(32,(34,35)))),(39,(37,38)))))))),((53,((49,(50,(47,48))),(52,(55,57)))),(54,56))),(42,(43,(46,(45,(44,51)))))),(40,58))))),(22,23))),(25,26))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((24,((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,((36,(31,(33,(32,(34,35))))),(39,(37,38))))))),((53,((49,(50,(47,48))),(52,(55,57)))),(54,56))),(42,(43,(46,(45,(44,51)))))),(40,58))))),(22,23))),(25,26))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),(((41,(28,(29,(30,(36,((31,(33,(32,(34,35)))),(39,(37,38)))))))),((42,(43,((44,51),(45,46)))),(((49,(50,(47,48))),(52,(55,57))),(53,(54,56))))),(40,58))))),(23,((22,24),(25,26))))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((24,((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,((36,(31,(32,(33,(34,35))))),(39,(37,38))))))),((53,((49,(50,(47,48))),(52,(55,57)))),(54,56))),(42,(43,((44,51),(45,46))))),(40,58))))),(22,23))),(25,26))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,(24,(((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,((36,(31,(33,(32,(34,35))))),(39,(37,38))))))),(((49,(50,(47,48))),(52,(55,57))),(53,(54,56)))),(42,(43,((44,51),(45,46))))),(40,58))))),(22,23)),(25,26)))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,(((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,(36,((31,(33,(32,(34,35)))),(39,(37,38)))))))),((53,((49,(50,(47,48))),(52,(55,57)))),(54,56))),(42,(43,((44,51),(45,46))))),(40,58))))),(23,(22,24))),(25,26))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,((36,(31,(33,(32,(34,35))))),(39,(37,38))))))),(((49,(50,(47,48))),(52,(55,57))),(53,(54,56)))),(42,(43,(46,(45,(44,51)))))),(40,58))))),((22,24),(23,(25,26))))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((24,((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,((36,(31,(32,(33,(34,35))))),(39,(37,38))))))),(((49,(50,(47,48))),(52,(55,57))),(53,(54,56)))),(42,(43,(46,(45,(44,51)))))),(40,58))))),(22,23))),(25,26))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,(24,((23,(22,(11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,((36,(31,(33,(32,(34,35))))),(39,(37,38))))))),(((49,(50,(47,48))),(52,(55,57))),(53,(54,56)))),(42,(43,(46,(45,(44,51)))))),(40,58))))))),(25,26)))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,(24,((23,(22,(11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,((36,(31,(32,(33,(34,35))))),(39,(37,38))))))),((53,((49,(50,(47,48))),(52,(55,57)))),(54,56))),(42,(43,(46,(45,(44,51)))))),(40,58))))))),(25,26)))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,((36,(31,(32,(33,(34,35))))),(39,(37,38))))))),((53,((49,(50,(47,48))),(52,(55,57)))),(54,56))),(42,(43,(46,(45,(44,51)))))),(40,58))))),(23,((22,24),(25,26))))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,(24,(((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,(36,((31,(33,(32,(34,35)))),(39,(37,38)))))))),(((49,(50,(47,48))),(52,(55,57))),(53,(54,56)))),(42,(43,(46,(45,(44,51)))))),(40,58))))),(22,23)),(25,26)))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,(36,((31,(33,(32,(34,35)))),(39,(37,38)))))))),((53,((49,(50,(47,48))),(52,(55,57)))),(54,56))),(42,(43,(46,(45,(44,51)))))),(40,58))))),(23,((22,24),(25,26))))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,(((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,((36,(31,(33,(32,(34,35))))),(39,(37,38))))))),((53,((49,(50,(47,48))),(52,(55,57)))),(54,56))),(42,(43,((44,51),(45,46))))),(40,58))))),(23,(22,24))),(25,26))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,((36,(31,(32,(33,(34,35))))),(39,(37,38))))))),((53,((49,(50,(47,48))),(52,(55,57)))),(54,56))),(42,(43,((44,51),(45,46))))),(40,58))))),(23,((22,24),(25,26))))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,((36,(31,(32,(33,(34,35))))),(39,(37,38))))))),(((49,(50,(47,48))),(52,(55,57))),(53,(54,56)))),(42,(43,(46,(45,(44,51)))))),(40,58))))),((22,24),(23,(25,26))))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((23,((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,(36,((31,(33,(32,(34,35)))),(39,(37,38)))))))),(((49,(50,(47,48))),(52,(55,57))),(53,(54,56)))),(42,(43,(46,(45,(44,51)))))),(40,58))))),(22,24))),(25,26))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,(24,(((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,(36,((31,(33,(32,(34,35)))),(39,(37,38)))))))),((53,((49,(50,(47,48))),(52,(55,57)))),(54,56))),(42,(43,(46,(45,(44,51)))))),(40,58))))),(22,23)),(25,26)))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,(24,((23,(22,(11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,((36,(31,(33,(32,(34,35))))),(39,(37,38))))))),(((49,(50,(47,48))),(52,(55,57))),(53,(54,56)))),(42,(43,((44,51),(45,46))))),(40,58))))))),(25,26)))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,(36,((31,(33,(32,(34,35)))),(39,(37,38)))))))),(((49,(50,(47,48))),(52,(55,57))),(53,(54,56)))),(42,(43,((44,51),(45,46))))),(40,58))))),(23,((22,24),(25,26))))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((23,((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,((36,(31,(33,(32,(34,35))))),(39,(37,38))))))),(((49,(50,(47,48))),(52,(55,57))),(53,(54,56)))),(42,(43,(46,(45,(44,51)))))),(40,58))))),(22,24))),(25,26))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,((36,(31,(32,(33,(34,35))))),(39,(37,38))))))),(((49,(50,(47,48))),(52,(55,57))),(53,(54,56)))),(42,(43,((44,51),(45,46))))),(40,58))))),((22,24),(23,(25,26))))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,((36,(31,(33,(32,(34,35))))),(39,(37,38))))))),((53,((49,(50,(47,48))),(52,(55,57)))),(54,56))),(42,(43,((44,51),(45,46))))),(40,58))))),((22,24),(23,(25,26))))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,(24,(((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,((36,(31,(32,(33,(34,35))))),(39,(37,38))))))),((53,((49,(50,(47,48))),(52,(55,57)))),(54,56))),(42,(43,((44,51),(45,46))))),(40,58))))),(22,23)),(25,26)))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,((36,(31,(32,(33,(34,35))))),(39,(37,38))))))),((53,((49,(50,(47,48))),(52,(55,57)))),(54,56))),(42,(43,((44,51),(45,46))))),(40,58))))),((22,24),(23,(25,26))))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,(24,(((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,((36,(31,(33,(32,(34,35))))),(39,(37,38))))))),((53,((49,(50,(47,48))),(52,(55,57)))),(54,56))),(42,(43,((44,51),(45,46))))),(40,58))))),(22,23)),(25,26)))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,(36,((31,(33,(32,(34,35)))),(39,(37,38)))))))),(((49,(50,(47,48))),(52,(55,57))),(53,(54,56)))),(42,(43,((44,51),(45,46))))),(40,58))))),((22,24),(23,(25,26))))))))))));
	TREE * ambiguous = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,(((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,((36,(31,(32,(33,(34,35))))),(39,(37,38))))))),((53,((49,(50,(47,48))),(52,(55,57)))),(54,56))),(42,(43,(46,(45,(44,51)))))),(40,58))))),(23,(22,24))),(25,26))))))))));
	TREE * extraState = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,(24,((23,(22,(11,(27,((12,((13,(15,16)),((14,17),(19,(18,(20,21)))))),((((41,(28,(29,(30,((36,(31,(32,(33,(34,35))))),(39,(37,38))))))),(((49,(50,(47,48))),(52,(55,57))),(53,(54,56)))),(42,(43,((44,51),(45,46))))),(40,58))))))),(25,26)))))))))));
	TREE * extraState = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,(((11,(27,((12,((13,(15,16)),((14,17),(19,(18,(20,21)))))),((((41,(28,(29,(30,((36,(31,(33,(32,(34,35))))),(39,(37,38))))))),((53,((49,(50,(47,48))),(52,(55,57)))),(54,56))),(42,(43,((44,51),(45,46))))),(40,58))))),(23,(22,24))),(25,26))))))))));
	TREE * extraState = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,(24,(((11,(27,((12,((13,(15,16)),((14,17),(19,(18,(20,21)))))),((((41,(28,(29,(30,(36,((31,(33,(32,(34,35)))),(39,(37,38)))))))),(((49,(50,(47,48))),(52,(55,57))),(53,(54,56)))),(42,(43,(46,(45,(44,51)))))),(40,58))))),(22,23)),(25,26)))))))))));
	TREE * extraState = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,(24,((23,(22,(11,(27,((12,((13,(15,16)),((14,17),(19,(18,(20,21)))))),((((41,(28,(29,(30,((36,(31,(33,(32,(34,35))))),(39,(37,38))))))),((53,((49,(50,(47,48))),(52,(55,57)))),(54,56))),(42,(43,(46,(45,(44,51)))))),(40,58))))))),(25,26)))))))))));
	TREE * extraState = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,(36,((31,(33,(32,(34,35)))),(39,(37,38)))))))),((53,((49,(50,(47,48))),(52,(55,57)))),(54,56))),(42,(43,(46,(45,(44,51)))))),(40,58))))),(23,((22,24),(25,26))))))))))));
	TREE * extraState = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,(((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,((36,(31,(32,(33,(34,35))))),(39,(37,38))))))),(((49,(50,(47,48))),(52,(55,57))),(53,(54,56)))),(42,(43,(46,(45,(44,51)))))),(40,58))))),(23,(22,24))),(25,26))))))))));
	TREE * extraState = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,(24,(((11,(27,((12,((13,(15,16)),((14,17),(19,(18,(20,21)))))),((((41,(28,(29,(30,((36,(31,(33,(32,(34,35))))),(39,(37,38))))))),(((49,(50,(47,48))),(52,(55,57))),(53,(54,56)))),(42,(43,(46,(45,(44,51)))))),(40,58))))),(22,23)),(25,26)))))))))));
	TREE * extraState = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((23,((11,(27,((12,((13,(15,16)),((14,17),(19,(18,(20,21)))))),((((41,(28,(29,(30,((36,(31,(33,(32,(34,35))))),(39,(37,38))))))),(((49,(50,(47,48))),(52,(55,57))),(53,(54,56)))),(42,(43,((44,51),(45,46))))),(40,58))))),(22,24))),(25,26))))))))));
	TREE * extraState = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,(24,((23,(22,(11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,((36,(31,(32,(33,(34,35))))),(39,(37,38))))))),(((49,(50,(47,48))),(52,(55,57))),(53,(54,56)))),(42,(43,(46,(45,(44,51)))))),(40,58))))))),(25,26)))))))))));
	TREE * extraState = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((23,((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,((36,(31,(33,(32,(34,35))))),(39,(37,38))))))),((53,((49,(50,(47,48))),(52,(55,57)))),(54,56))),(42,(43,(46,(45,(44,51)))))),(40,58))))),(22,24))),(25,26))))))))));
	TREE * extraState = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((24,((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,((36,(31,(32,(33,(34,35))))),(39,(37,38))))))),(((49,(50,(47,48))),(52,(55,57))),(53,(54,56)))),(42,(43,(46,(45,(44,51)))))),(40,58))))),(22,23))),(25,26))))))))));
	TREE * extraState = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,(24,(((11,(27,((12,((13,(15,16)),((14,17),(19,(18,(20,21)))))),((((41,(28,(29,(30,((36,(31,(32,(33,(34,35))))),(39,(37,38))))))),(((49,(50,(47,48))),(52,(55,57))),(53,(54,56)))),(42,(43,((44,51),(45,46))))),(40,58))))),(22,23)),(25,26)))))))))));
	TREE * extraState = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,(((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,(36,((31,(33,(32,(34,35)))),(39,(37,38)))))))),((53,((49,(50,(47,48))),(52,(55,57)))),(54,56))),(42,(43,((44,51),(45,46))))),(40,58))))),(23,(22,24))),(25,26))))))))));
	TREE * extraState = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,(36,((31,(33,(32,(34,35)))),(39,(37,38)))))))),(((49,(50,(47,48))),(52,(55,57))),(53,(54,56)))),(42,(43,((44,51),(45,46))))),(40,58))))),(23,((22,24),(25,26))))))))))));
	TREE * extraState = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,(24,((23,(22,(11,(27,((12,((13,(15,16)),((14,17),(19,(18,(20,21)))))),((((41,(28,(29,(30,(36,((31,(33,(32,(34,35)))),(39,(37,38)))))))),(((49,(50,(47,48))),(52,(55,57))),(53,(54,56)))),(42,(43,((44,51),(45,46))))),(40,58))))))),(25,26)))))))))));
	TREE * extraState = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((11,(27,((12,((13,(15,16)),((14,17),(19,(18,(20,21)))))),(((41,(28,(29,(30,(36,((31,(33,(32,(34,35)))),(39,(37,38)))))))),((42,(43,(46,(45,(44,51))))),(((49,(50,(47,48))),(52,(55,57))),(53,(54,56))))),(40,58))))),(23,((22,24),(25,26))))))))))));
	TREE * extraState = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,(((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,((36,(31,(33,(32,(34,35))))),(39,(37,38))))))),(((49,(50,(47,48))),(52,(55,57))),(53,(54,56)))),(42,(43,(46,(45,(44,51)))))),(40,58))))),(23,(22,24))),(25,26))))))))));
	TREE * extraState = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((24,((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,((36,(31,(32,(33,(34,35))))),(39,(37,38))))))),(((49,(50,(47,48))),(52,(55,57))),(53,(54,56)))),(42,(43,((44,51),(45,46))))),(40,58))))),(22,23))),(25,26))))))))));
	TREE * extraState = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((11,(27,((12,((13,(15,16)),((14,17),(19,(18,(20,21)))))),((((41,(28,(29,(30,(36,((31,(33,(32,(34,35)))),(39,(37,38)))))))),(((49,(50,(47,48))),(52,(55,57))),(53,(54,56)))),(42,(43,((44,51),(45,46))))),(40,58))))),((22,24),(23,(25,26))))))))))));
	TREE * extraState = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,(24,((23,(22,(11,(27,((12,((13,(15,16)),((14,17),(19,(18,(20,21)))))),((((41,(28,(29,(30,((36,(31,(32,(33,(34,35))))),(39,(37,38))))))),(((49,(50,(47,48))),(52,(55,57))),(53,(54,56)))),(42,(43,(46,(45,(44,51)))))),(40,58))))))),(25,26)))))))))));
	TREE * extraState = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,(((11,(27,((12,((13,(15,16)),((14,17),(19,(18,(20,21)))))),((((41,(28,(29,(30,((36,(31,(33,(32,(34,35))))),(39,(37,38))))))),((53,((49,(50,(47,48))),(52,(55,57)))),(54,56))),(42,(43,(46,(45,(44,51)))))),(40,58))))),(23,(22,24))),(25,26))))))))));
	TREE * extraState = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,(24,((23,(22,(11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,(36,((31,(33,(32,(34,35)))),(39,(37,38)))))))),((53,((49,(50,(47,48))),(52,(55,57)))),(54,56))),(42,(43,((44,51),(45,46))))),(40,58))))))),(25,26)))))))))));
	TREE * extraState = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,((36,(31,(32,(33,(34,35))))),(39,(37,38))))))),(((49,(50,(47,48))),(52,(55,57))),(53,(54,56)))),(42,(43,((44,51),(45,46))))),(40,58))))),(23,((22,24),(25,26))))))))))));
	TREE * extraState = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,(24,((23,(22,(11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,((36,(31,(33,(32,(34,35))))),(39,(37,38))))))),(((49,(50,(47,48))),(52,(55,57))),(53,(54,56)))),(42,(43,(46,(45,(44,51)))))),(40,58))))))),(25,26)))))))))));
	TREE * extraState = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,((36,(31,(33,(32,(34,35))))),(39,(37,38))))))),((53,((49,(50,(47,48))),(52,(55,57)))),(54,56))),(42,(43,(46,(45,(44,51)))))),(40,58))))),((22,24),(23,(25,26))))))))))));
	TREE * extraState = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((11,(27,((12,((13,(15,16)),((14,17),(19,(18,(20,21)))))),((((41,(28,(29,(30,(36,((31,(33,(32,(34,35)))),(39,(37,38)))))))),((53,((49,(50,(47,48))),(52,(55,57)))),(54,56))),(42,(43,((44,51),(45,46))))),(40,58))))),((22,24),(23,(25,26))))))))))));
	TREE * extraState = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,(24,((23,(22,(11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,(36,((31,(33,(32,(34,35)))),(39,(37,38)))))))),((53,((49,(50,(47,48))),(52,(55,57)))),(54,56))),(42,(43,(46,(45,(44,51)))))),(40,58))))))),(25,26)))))))))));
	TREE * extraState = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),(((41,(28,(29,(30,(36,((31,(33,(32,(34,35)))),(39,(37,38)))))))),((42,(43,((44,51),(45,46)))),(((49,(50,(47,48))),(52,(55,57))),(53,(54,56))))),(40,58))))),(23,((22,24),(25,26))))))))))));
	TREE * extraState = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,(24,((23,(22,(11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,((36,(31,(33,(32,(34,35))))),(39,(37,38))))))),((53,((49,(50,(47,48))),(52,(55,57)))),(54,56))),(42,(43,(46,(45,(44,51)))))),(40,58))))))),(25,26)))))))))));
	TREE * extraState = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,(24,((23,(22,(11,(27,((12,((13,(15,16)),((14,17),(19,(18,(20,21)))))),((((41,(28,(29,(30,(36,((31,(33,(32,(34,35)))),(39,(37,38)))))))),((53,((49,(50,(47,48))),(52,(55,57)))),(54,56))),(42,(43,((44,51),(45,46))))),(40,58))))))),(25,26)))))))))));
	TREE * extraState = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,(24,((23,(22,(11,(27,((12,((13,(15,16)),((14,17),(19,(18,(20,21)))))),((((41,(28,(29,(30,(36,((31,(33,(32,(34,35)))),(39,(37,38)))))))),(((49,(50,(47,48))),(52,(55,57))),(53,(54,56)))),(42,(43,(46,(45,(44,51)))))),(40,58))))))),(25,26)))))))))));
	TREE * extraState = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,((36,(31,(33,(32,(34,35))))),(39,(37,38))))))),((53,((49,(50,(47,48))),(52,(55,57)))),(54,56))),(42,(43,(46,(45,(44,51)))))),(40,58))))),(23,((22,24),(25,26))))))))))));
	TREE * extraState = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,(24,((23,(22,(11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,((36,(31,(32,(33,(34,35))))),(39,(37,38))))))),(((49,(50,(47,48))),(52,(55,57))),(53,(54,56)))),(42,(43,((44,51),(45,46))))),(40,58))))))),(25,26)))))))))));
	TREE * extraState = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,((36,(31,(33,(32,(34,35))))),(39,(37,38))))))),(((49,(50,(47,48))),(52,(55,57))),(53,(54,56)))),(42,(43,((44,51),(45,46))))),(40,58))))),((22,24),(23,(25,26))))))))))));
	TREE * extraState = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((11,(27,((12,((13,(15,16)),((14,17),(19,(18,(20,21)))))),((((41,(28,(29,(30,((36,(31,(32,(33,(34,35))))),(39,(37,38))))))),(((49,(50,(47,48))),(52,(55,57))),(53,(54,56)))),(42,(43,(46,(45,(44,51)))))),(40,58))))),((22,24),(23,(25,26))))))))))));
	TREE * extraState = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,(24,(((11,(27,((12,((13,(15,16)),((14,17),(19,(18,(20,21)))))),((((41,(28,(29,(30,(36,((31,(33,(32,(34,35)))),(39,(37,38)))))))),((53,((49,(50,(47,48))),(52,(55,57)))),(54,56))),(42,(43,(46,(45,(44,51)))))),(40,58))))),(22,23)),(25,26)))))))))));
	TREE * extraState = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((11,(27,((12,((13,(15,16)),((14,17),(19,(18,(20,21)))))),(((41,(28,(29,(30,((36,(31,(33,(32,(34,35))))),(39,(37,38))))))),((42,(43,(46,(45,(44,51))))),(((49,(50,(47,48))),(52,(55,57))),(53,(54,56))))),(40,58))))),(23,((22,24),(25,26))))))))))));
	TREE * extraState = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((24,((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,((36,(31,(32,(33,(34,35))))),(39,(37,38))))))),((53,((49,(50,(47,48))),(52,(55,57)))),(54,56))),(42,(43,((44,51),(45,46))))),(40,58))))),(22,23))),(25,26))))))))));
	TREE * extraState = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((23,((11,(27,((12,((13,(15,16)),((14,17),(19,(18,(20,21)))))),((((41,(28,(29,(30,((36,(31,(32,(33,(34,35))))),(39,(37,38))))))),((53,((49,(50,(47,48))),(52,(55,57)))),(54,56))),(42,(43,((44,51),(45,46))))),(40,58))))),(22,24))),(25,26))))))))));
	TREE * extraState = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,(24,(((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,(36,((31,(33,(32,(34,35)))),(39,(37,38)))))))),(((49,(50,(47,48))),(52,(55,57))),(53,(54,56)))),(42,(43,((44,51),(45,46))))),(40,58))))),(22,23)),(25,26)))))))))));
	TREE * extraState = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((24,((11,(27,((12,((13,(15,16)),((14,17),(19,(18,(20,21)))))),((((41,(28,(29,(30,((36,(31,(32,(33,(34,35))))),(39,(37,38))))))),(((49,(50,(47,48))),(52,(55,57))),(53,(54,56)))),(42,(43,((44,51),(45,46))))),(40,58))))),(22,23))),(25,26))))))))));
	TREE * extraState = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((11,(27,((12,((13,(15,16)),((14,17),(19,(18,(20,21)))))),(((41,(28,(29,(30,(36,((31,(33,(32,(34,35)))),(39,(37,38)))))))),((42,(43,((44,51),(45,46)))),(((49,(50,(47,48))),(52,(55,57))),(53,(54,56))))),(40,58))))),(23,((22,24),(25,26))))))))))));
	TREE * extraState = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,(24,((23,(22,(11,(27,((12,((13,(15,16)),((14,17),(19,(18,(20,21)))))),((((41,(28,(29,(30,((36,(31,(33,(32,(34,35))))),(39,(37,38))))))),(((49,(50,(47,48))),(52,(55,57))),(53,(54,56)))),(42,(43,((44,51),(45,46))))),(40,58))))))),(25,26)))))))))));
	TREE * extraState = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((23,((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,((36,(31,(32,(33,(34,35))))),(39,(37,38))))))),(((49,(50,(47,48))),(52,(55,57))),(53,(54,56)))),(42,(43,(46,(45,(44,51)))))),(40,58))))),(22,24))),(25,26))))))))));
	TREE * extraState = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((23,((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,((36,(31,(32,(33,(34,35))))),(39,(37,38))))))),(((49,(50,(47,48))),(52,(55,57))),(53,(54,56)))),(42,(43,((44,51),(45,46))))),(40,58))))),(22,24))),(25,26))))))))));
	TREE * extraState = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,(24,(((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,(36,((31,(33,(32,(34,35)))),(39,(37,38)))))))),((53,((49,(50,(47,48))),(52,(55,57)))),(54,56))),(42,(43,(46,(45,(44,51)))))),(40,58))))),(22,23)),(25,26)))))))))));
	TREE * extraState = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,(((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,((36,(31,(33,(32,(34,35))))),(39,(37,38))))))),(((49,(50,(47,48))),(52,(55,57))),(53,(54,56)))),(42,(43,((44,51),(45,46))))),(40,58))))),(23,(22,24))),(25,26))))))))));
	TREE * extraState = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,(24,(((11,(27,((12,((13,(15,16)),((14,17),(19,(18,(20,21)))))),((((41,(28,(29,(30,((36,(31,(33,(32,(34,35))))),(39,(37,38))))))),((53,((49,(50,(47,48))),(52,(55,57)))),(54,56))),(42,(43,(46,(45,(44,51)))))),(40,58))))),(22,23)),(25,26)))))))))));
	TREE * extraState = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((11,(27,((12,((13,(15,16)),((14,17),(19,(18,(20,21)))))),((((41,(28,(29,(30,((36,(31,(33,(32,(34,35))))),(39,(37,38))))))),((53,((49,(50,(47,48))),(52,(55,57)))),(54,56))),(42,(43,(46,(45,(44,51)))))),(40,58))))),(23,((22,24),(25,26))))))))))));
	TREE * extraState = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(15,16))),((((41,(28,(29,(30,((36,(31,(33,(32,(34,35))))),(39,(37,38))))))),((53,((49,(50,(47,48))),(52,(55,57)))),(54,56))),(42,(43,((44,51),(45,46))))),(40,58))))),(23,((22,24),(25,26))))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,(24,(((22,23),(11,(27,((12,((13,((19,(18,(21,20))),(17,14))),(15,16))),((40,58),((42,(43,((46,45),(51,44)))),(((53,(56,54)),((52,(57,55)),(49,(50,(48,47))))),(41,(28,(29,(30,((36,(31,(33,(32,(35,34))))),(39,(37,38)))))))))))))),(26,25)))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(4,(5,((9,(10,((24,((23,22),(11,(27,((12,((13,((19,(18,(21,20))),(17,14))),(15,16))),((40,58),((((53,(54,56)),((52,(57,55)),(49,(50,(47,48))))),(41,(28,(29,(30,((36,(31,(32,(33,(35,34))))),(39,(38,37)))))))),(42,(43,((46,45),(51,44))))))))))),(26,25)))),(7,(6,8))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(4,(5,((9,(10,((23,((24,22),(11,(27,((12,((13,((19,(18,(21,20))),(14,17))),(16,15))),((58,40),((((53,(54,56)),((52,(57,55)),(49,(50,(47,48))))),(41,(28,(29,(30,((36,(31,(33,(32,(34,35))))),(39,(37,38)))))))),(42,(43,(46,(45,(44,51)))))))))))),(26,25)))),(7,(8,6))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(4,(5,((9,(10,((23,((22,24),(11,(27,((12,((13,((17,14),(19,(18,(20,21))))),(15,16))),((58,40),((42,(43,((46,45),(44,51)))),(((53,((52,(57,55)),(49,(50,(48,47))))),(56,54)),(41,(28,(29,(30,((36,(31,(32,(33,(34,35))))),(39,(37,38))))))))))))))),(25,26)))),(7,(6,8))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(4,(5,((9,(10,((24,((23,22),(11,(27,(((40,58),((((53,(56,54)),((52,(57,55)),(49,(50,(48,47))))),(41,(28,(29,(30,((36,(31,(33,(32,(34,35))))),(39,(37,38)))))))),(42,(43,((46,45),(44,51)))))),(12,((13,((19,(18,(20,21))),(17,14))),(15,16)))))))),(25,26)))),(7,(8,6))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(4,(5,((7,(8,6)),(9,(10,(((23,(22,24)),(11,(27,((12,((13,((14,17),(19,(18,(21,20))))),(16,15))),((40,58),((((53,(54,56)),((52,(55,57)),(49,(50,(48,47))))),(41,(28,(29,(30,((36,(31,(33,(32,(34,35))))),(39,(38,37)))))))),(42,(43,(46,(45,(51,44))))))))))),(26,25))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((23,((26,25),(22,24))),(11,(27,(((40,58),((((53,(54,56)),((52,(55,57)),(49,(50,(47,48))))),(41,(28,(29,(30,((36,(31,(33,(32,(34,35))))),(39,(37,38)))))))),(42,(43,((45,46),(44,51)))))),(12,((13,((17,14),(19,(18,(21,20))))),(15,16)))))))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(4,(5,((9,(10,(24,(((23,22),(11,(27,((12,((13,((19,(18,(20,21))),(14,17))),(16,15))),(((((53,((52,(55,57)),(49,(50,(47,48))))),(54,56)),(41,(28,(29,(30,(36,((31,(33,(32,(34,35)))),(39,(38,37))))))))),(42,(43,((45,46),(44,51))))),(40,58)))))),(25,26))))),(7,(6,8))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(4,(5,((7,(8,6)),(9,(10,(24,((23,(22,(11,(27,((12,((13,((19,(18,(20,21))),(14,17))),(16,15))),(((((53,(54,56)),((52,(57,55)),(49,(50,(47,48))))),(41,(28,(29,(30,((36,(31,(32,(33,(34,35))))),(39,(38,37)))))))),(42,(43,((46,45),(51,44))))),(40,58))))))),(25,26)))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(4,(5,((9,(10,((24,((23,22),(11,(27,((12,((13,((14,17),(19,(18,(21,20))))),(16,15))),((40,58),((42,(43,((46,45),(51,44)))),((41,(28,(29,(30,(36,((31,(33,(32,(35,34)))),(39,(38,37)))))))),((53,((52,(55,57)),(49,(50,(48,47))))),(54,56)))))))))),(26,25)))),(7,(6,8))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(4,(5,((7,(8,6)),(9,(10,(((23,(25,26)),(24,22)),(11,(27,(((40,58),((((53,((52,(55,57)),(49,(50,(48,47))))),(54,56)),(41,(28,(29,(30,((36,(31,(33,(32,(34,35))))),(39,(37,38)))))))),(42,(43,((45,46),(44,51)))))),(12,((13,((19,(18,(20,21))),(14,17))),(16,15)))))))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(4,(5,((9,(10,(24,((23,(22,(11,(27,((12,((15,16),(13,((19,(18,(21,20))),(17,14))))),((40,58),((((53,(54,56)),((49,(50,(47,48))),(52,(55,57)))),(41,(28,(29,(30,(36,((31,(33,(32,(35,34)))),(39,(37,38))))))))),(42,(43,(46,(45,(51,44)))))))))))),(26,25))))),(7,(8,6))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((24,((23,22),(11,(27,((12,((16,15),(13,((19,(18,(20,21))),(14,17))))),((58,40),((42,(43,((46,45),(51,44)))),(((53,(56,54)),((52,(55,57)),(49,(50,(48,47))))),(41,(28,(29,(30,(36,((31,(33,(32,(34,35)))),(39,(38,37)))))))))))))))),(25,26))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(4,(5,((9,(10,(24,((23,(22,(11,(27,((12,((13,((17,14),(19,(18,(20,21))))),(15,16))),((58,40),((42,(43,((46,45),(51,44)))),(((53,((52,(57,55)),(49,(50,(48,47))))),(54,56)),(41,(28,(29,(30,(36,((31,(33,(32,(34,35)))),(39,(37,38)))))))))))))))),(25,26))))),(7,(6,8))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,(24,((23,(22,(11,(27,(((40,58),((((53,(56,54)),((52,(55,57)),(49,(50,(47,48))))),(41,(28,(29,(30,((36,(31,(33,(32,(34,35))))),(39,(37,38)))))))),(42,(43,(46,(45,(44,51))))))),(12,((13,((19,(18,(21,20))),(17,14))),(15,16)))))))),(26,25)))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(4,(5,((9,(10,(24,((23,(22,(11,(27,((12,((13,((19,(18,(20,21))),(14,17))),(16,15))),((58,40),((42,(43,((45,46),(51,44)))),(((53,((52,(57,55)),(49,(50,(48,47))))),(56,54)),(41,(28,(29,(30,((36,(31,(33,(32,(35,34))))),(39,(38,37))))))))))))))),(25,26))))),(7,(6,8))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(4,(5,((9,(10,((23,((22,24),(11,(27,((12,((13,((19,(18,(20,21))),(14,17))),(16,15))),((40,58),((((53,(54,56)),((52,(55,57)),(49,(50,(48,47))))),(41,(28,(29,(30,(36,((31,(33,(32,(34,35)))),(39,(37,38))))))))),(42,(43,(46,(45,(51,44)))))))))))),(25,26)))),(7,(8,6))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,(((23,(24,22)),(11,(27,((12,((13,((17,14),(19,(18,(21,20))))),(15,16))),((58,40),((42,(43,(46,(45,(51,44))))),(((53,(56,54)),((52,(55,57)),(49,(50,(48,47))))),(41,(28,(29,(30,(36,((31,(33,(32,(34,35)))),(39,(38,37))))))))))))))),(25,26))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(4,(5,((9,(10,(24,(((23,22),(11,(27,((12,((15,16),(13,((19,(18,(21,20))),(17,14))))),(((42,(43,((46,45),(44,51)))),(((53,(56,54)),((52,(55,57)),(49,(50,(47,48))))),(41,(28,(29,(30,(36,((31,(33,(32,(34,35)))),(39,(37,38)))))))))),(40,58)))))),(26,25))))),(7,(8,6))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(4,(5,((9,(10,((23,((25,26),(22,24))),(11,(27,((12,((13,((17,14),(19,(18,(20,21))))),(15,16))),((58,40),((((53,((52,(57,55)),(49,(50,(47,48))))),(54,56)),(41,(28,(29,(30,((36,(31,(32,(33,(34,35))))),(39,(37,38)))))))),(42,(43,((45,46),(44,51)))))))))))),(7,(6,8))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(4,(5,((7,(8,6)),(9,(10,((11,(27,((12,((13,((19,(18,(21,20))),(17,14))),(15,16))),((58,40),((((53,(56,54)),((52,(57,55)),(49,(50,(47,48))))),(42,(43,((46,45),(51,44))))),(41,(28,(29,(30,(36,((31,(33,(32,(35,34)))),(39,(38,37))))))))))))),(23,((26,25),(22,24))))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(4,(5,((9,(10,((23,((25,26),(24,22))),(11,(27,((12,((13,((19,(18,(20,21))),(14,17))),(16,15))),((58,40),((((53,((52,(57,55)),(49,(50,(48,47))))),(56,54)),(41,(28,(29,(30,((36,(31,(33,(32,(34,35))))),(39,(37,38)))))))),(42,(43,((45,46),(51,44)))))))))))),(7,(8,6))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((23,((26,25),(24,22))),(11,(27,((12,((13,((19,(18,(21,20))),(17,14))),(15,16))),((40,58),((((53,((52,(55,57)),(49,(50,(47,48))))),(54,56)),(41,(28,(29,(30,(36,((31,(33,(32,(35,34)))),(39,(37,38))))))))),(42,(43,(46,(45,(44,51)))))))))))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(4,(5,((9,(10,(((23,(26,25)),(24,22)),(11,(27,((12,((13,((19,(18,(21,20))),(17,14))),(15,16))),((40,58),((((53,(56,54)),((52,(57,55)),(49,(50,(48,47))))),(41,(28,(29,(30,((36,(31,(33,(32,(34,35))))),(39,(38,37)))))))),(42,(43,((46,45),(51,44)))))))))))),(7,(6,8))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((24,((23,22),(11,(27,((12,((16,15),(13,((19,(18,(20,21))),(14,17))))),(((((53,(54,56)),((52,(55,57)),(49,(50,(48,47))))),(41,(28,(29,(30,(36,((31,(33,(32,(35,34)))),(39,(38,37))))))))),(42,(43,(46,(45,(51,44)))))),(58,40))))))),(25,26))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(4,(5,((9,(10,((23,((25,26),(24,22))),(11,(27,((12,((13,((17,14),(19,(18,(21,20))))),(15,16))),((58,40),((((53,((52,(55,57)),(49,(50,(48,47))))),(56,54)),(41,(28,(29,(30,((36,(31,(32,(33,(35,34))))),(39,(38,37)))))))),(42,(43,(46,(45,(44,51))))))))))))),(7,(6,8))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((23,((25,26),(24,22))),(11,(27,((12,((13,((19,(18,(20,21))),(14,17))),(16,15))),((58,40),(((41,(28,(29,(30,((36,(31,(32,(33,(34,35))))),(39,(38,37))))))),((53,(56,54)),((49,(50,(47,48))),(52,(57,55))))),(42,(43,(46,(45,(51,44)))))))))))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(4,(5,((9,(10,(24,(((22,23),(11,(27,((12,((13,((19,(18,(21,20))),(17,14))),(15,16))),((58,40),((((53,((52,(57,55)),(49,(50,(47,48))))),(56,54)),(41,(28,(29,(30,(36,((31,(33,(32,(35,34)))),(39,(38,37))))))))),(42,(43,(46,(45,(44,51))))))))))),(26,25))))),(7,(6,8))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(4,(5,((9,(10,(((23,(24,22)),(11,(27,((12,((13,((19,(18,(21,20))),(17,14))),(15,16))),((40,58),((42,(43,((46,45),(51,44)))),(((53,(56,54)),((52,(57,55)),(49,(50,(47,48))))),(41,(28,(29,(30,((36,(31,(32,(33,(34,35))))),(39,(38,37)))))))))))))),(26,25)))),(7,(6,8))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(4,(5,((9,(10,((24,((23,22),(11,(27,((12,((13,((19,(18,(20,21))),(14,17))),(16,15))),((58,40),((((53,((52,(55,57)),(49,(50,(47,48))))),(54,56)),(41,(28,(29,(30,(36,((31,(33,(32,(35,34)))),(39,(37,38))))))))),(42,(43,(46,(45,(51,44)))))))))))),(25,26)))),(7,(8,6))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(4,(5,((7,(8,6)),(9,(10,((23,((22,24),(11,(27,((12,((16,15),(13,((19,(18,(21,20))),(14,17))))),((58,40),((((53,((52,(55,57)),(49,(50,(48,47))))),(54,56)),(41,(28,(29,(30,((36,(31,(33,(32,(35,34))))),(39,(37,38)))))))),(42,(43,(46,(45,(44,51)))))))))))),(25,26))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,(((23,(22,24)),(11,(27,((12,((13,((19,(18,(20,21))),(14,17))),(16,15))),((58,40),((((53,(56,54)),((49,(50,(47,48))),(52,(57,55)))),(41,(28,(29,(30,((36,(31,(32,(33,(34,35))))),(39,(38,37)))))))),(42,(43,(46,(45,(51,44))))))))))),(25,26))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,(24,((23,(22,(11,(27,((12,((13,((19,(18,(21,20))),(17,14))),(15,16))),((58,40),((42,(43,(46,(45,(44,51))))),(((53,((52,(57,55)),(49,(50,(48,47))))),(56,54)),(41,(28,(29,(30,((36,(31,(33,(32,(35,34))))),(39,(38,37))))))))))))))),(26,25)))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((26,25),(23,((24,22),(11,(27,(((40,58),((((53,(54,56)),((52,(55,57)),(49,(50,(47,48))))),(41,(28,(29,(30,((39,(38,37)),(36,(31,(32,(33,(35,34))))))))))),(42,(43,((46,45),(44,51)))))),(12,((13,((17,14),(19,(18,(21,20))))),(15,16)))))))))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,(((23,(24,22)),(11,(27,((12,((13,((17,14),(19,(18,(20,21))))),(15,16))),((40,58),((((53,((52,(57,55)),(49,(50,(48,47))))),(56,54)),(41,(28,(29,(30,((36,(31,(33,(32,(34,35))))),(39,(37,38)))))))),(42,(43,(46,(45,(51,44))))))))))),(25,26))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(4,(5,((7,(8,6)),(9,(10,(24,(((22,23),(11,(27,(((((41,(28,(29,(30,((36,(31,(33,(32,(34,35))))),(39,(38,37))))))),((53,((52,(55,57)),(49,(50,(48,47))))),(54,56))),(42,(43,((45,46),(51,44))))),(40,58)),(12,((13,((19,(18,(20,21))),(14,17))),(16,15))))))),(25,26)))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(4,(5,((9,(10,(24,((23,(22,(11,(27,((12,((13,((19,(18,(21,20))),(17,14))),(15,16))),((40,58),((42,(43,((45,46),(51,44)))),(((53,(54,56)),((52,(55,57)),(49,(50,(47,48))))),(41,(28,(29,(30,((36,(31,(33,(32,(35,34))))),(39,(38,37))))))))))))))),(26,25))))),(7,(6,8))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(4,(5,((9,(10,(24,(((22,23),(11,(27,((12,((13,((19,(18,(20,21))),(14,17))),(16,15))),(((((53,((52,(55,57)),(49,(50,(47,48))))),(56,54)),(41,(28,(29,(30,((36,(31,(32,(33,(34,35))))),(39,(37,38)))))))),(42,(43,((46,45),(51,44))))),(40,58)))))),(25,26))))),(7,(8,6))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(4,(5,((7,(8,6)),(9,(10,(24,(((23,22),(11,(27,((12,((16,15),(13,((19,(18,(21,20))),(14,17))))),((58,40),((((53,((52,(55,57)),(49,(50,(48,47))))),(54,56)),(41,(28,(29,(30,((36,(31,(33,(32,(35,34))))),(39,(37,38)))))))),(42,(43,(46,(45,(44,51))))))))))),(25,26)))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(4,(5,((9,(10,(((23,(26,25)),(22,24)),(11,(27,((12,((15,16),(13,((19,(18,(21,20))),(17,14))))),((40,58),((((53,(56,54)),((52,(57,55)),(49,(50,(47,48))))),(41,(28,(29,(30,((36,(31,(32,(33,(35,34))))),(39,(37,38)))))))),(42,(43,(46,(45,(44,51))))))))))))),(7,(8,6))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(4,(5,((9,(10,((23,((22,24),(11,(27,((12,((13,((19,(18,(21,20))),(17,14))),(15,16))),((40,58),((42,(43,((46,45),(51,44)))),(((53,((52,(55,57)),(49,(50,(47,48))))),(54,56)),(41,(28,(29,(30,(36,((31,(33,(32,(34,35)))),(39,(38,37)))))))))))))))),(26,25)))),(7,(8,6))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(4,(5,((9,(10,((23,((22,24),(26,25))),(11,(27,((12,((15,16),(13,((19,(18,(21,20))),(17,14))))),((40,58),((((53,((52,(57,55)),(49,(50,(47,48))))),(56,54)),(41,(28,(29,(30,((36,(31,(33,(32,(34,35))))),(39,(37,38)))))))),(42,(43,(46,(45,(51,44))))))))))))),(7,(6,8))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((24,((22,23),(11,(27,((12,((16,15),(13,((19,(18,(21,20))),(14,17))))),((58,40),((((53,((52,(55,57)),(49,(50,(48,47))))),(54,56)),(41,(28,(29,(30,((36,(31,(33,(32,(35,34))))),(39,(37,38)))))))),(42,(43,(46,(45,(44,51)))))))))))),(25,26))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(4,(5,((9,(10,((24,((23,22),(11,(27,((12,((15,16),(13,((19,(18,(21,20))),(17,14))))),((40,58),((((53,(56,54)),((52,(57,55)),(49,(50,(47,48))))),(41,(28,(29,(30,((36,(31,(32,(33,(35,34))))),(39,(37,38)))))))),(42,(43,(46,(45,(44,51)))))))))))),(26,25)))),(7,(8,6))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(4,(5,((7,(8,6)),(9,(10,(24,((23,(22,(11,(27,((12,((13,((14,17),(19,(18,(20,21))))),(16,15))),((58,40),((42,(43,(46,(45,(51,44))))),(((53,((52,(57,55)),(49,(50,(48,47))))),(54,56)),(41,(28,(29,(30,((36,(31,(32,(33,(35,34))))),(39,(38,37))))))))))))))),(26,25)))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(4,(5,((9,(10,(((23,(26,25)),(24,22)),(11,(27,((12,((15,16),(13,((19,(18,(21,20))),(17,14))))),((40,58),((((53,((49,(50,(47,48))),(52,(57,55)))),(54,56)),(41,(28,(29,(30,(36,((31,(33,(32,(35,34)))),(39,(37,38))))))))),(42,(43,((45,46),(44,51)))))))))))),(7,(6,8))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((24,((23,22),(11,(27,((12,((15,16),(13,((17,14),(19,(18,(20,21))))))),((40,58),(((41,(28,(29,(30,((36,(31,(32,(33,(34,35))))),(39,(37,38))))))),((53,((52,(55,57)),(49,(50,(47,48))))),(56,54))),(42,(43,((46,45),(51,44))))))))))),(25,26))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(4,(5,((7,(6,8)),(9,(10,((11,(27,((12,((15,16),(13,((19,(18,(20,21))),(17,14))))),((40,58),((((53,(56,54)),((52,(55,57)),(49,(50,(47,48))))),(41,(28,(29,(30,((36,(31,(33,(32,(34,35))))),(39,(37,38)))))))),(42,(43,(46,(45,(44,51)))))))))),(23,((26,25),(24,22))))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(4,(5,((7,(8,6)),(9,(10,(((23,(25,26)),(24,22)),(11,(27,((12,((13,((19,(18,(20,21))),(14,17))),(16,15))),((58,40),((42,(43,((45,46),(44,51)))),(((53,(56,54)),((52,(55,57)),(49,(50,(47,48))))),(41,(28,(29,(30,((36,(31,(32,(33,(34,35))))),(39,(38,37))))))))))))))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(4,(5,((9,(10,((24,((22,23),(11,(27,((12,((16,15),(13,((19,(18,(20,21))),(14,17))))),((58,40),((((53,((52,(57,55)),(49,(50,(48,47))))),(54,56)),(41,(28,(29,(30,((36,(31,(33,(32,(35,34))))),(39,(38,37)))))))),(42,(43,((45,46),(44,51))))))))))),(25,26)))),(7,(8,6))))))));
END;
