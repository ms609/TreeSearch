#NEXUS
begin data;
  dimensions ntax=35 nchar=50;
  format datatype=standard gap=- missing=? Interleave=no SYMBOLS= "012349";
  matrix
    Aysheaia                  0-000--0-000-0000000000000-000000000---0-00-000---
    Anomalocaris              0-000--00011-0000000000000-000000000---0-00-000---
    Hurdia                    0-000--00001-0000000000000-000000000---0-00-000---
    Isoxys                    1-00?--01000-10000????0000?000??0?00?-??0???000---
    Surusicaris               1-001--01001-000000000000030000?00000-100?????0???
    Canadaspis                1-1?0--?0000-10000100000001100000000?01000111103--
    Kunmingella               1-??1--01010-1000010??00005000??0101?1??010-1?0???
    Occacaris                 1-???--01010010?0010??0000?100??0000?0??0???1103--
    Fuxianhuia                2011?1000000-100001000110001010?000000?0000-11000-
    Jianfengia                2?0?10001000?000001???00000000??0??0?0??0???11020-
    Fortiforceps              2?0?100010000000001?1?10000000??0??0?0??001?11000-
    Yohoia                    2000100010000000001?1?100020101?0100????0010110110
    Leanchoilia_superlata     220?10011000101111111?101140001?010011110010110011
    Leanchoilia_persephone    200?100110001011011?1?10004000??0??0????0???110011
    Leanchoilia_illecebrosa   220?100110001011011?1?101140001?010011?1001011001?
    Oestokerkus               2?0?100?100010111?1?1?10?04000??0??0????0???1??0??
    Yawunik                   2100100110001011111?1?100030101?010011??0010110010
    Actaeus                   200?100?10001011011?10100040001?0100????00101100??
    Alalcomenaeus             210?100110001011011?1?100040001?010011??001011010-
    Oelandocaris              220120011?0010?10?11?1000050?01?01001?110???1?????
    Haikoucaris               210?10001000100100101010002000??0100????001?110???
    Offacolus                 2001400?0000200000101111005100??1110010??01111020-
    Dibasterium               200?400?0000200000101111004100??1110010??01111020-
    Weinbergina               2001401110002000001000110150101011100111?01111120-
    Eurypterida               20013011100020000010001100310010111001-0-00-11000-
    Olenoides                 200110100100-1000010101000200010010021111111101---
    Xandarella                200111100100-100001010100020011001001?11111111000-
    Naraoia                   200110000100-1000010101000000010010021111111101---
    Aglaspis                  200110100100-100001000100040001?0??0??-0-00-11020-
    Emeraldella               200120000100-100001010100030101?01102111011?11020-
    Martinssonia              220120000000-1000010110000510011010?1?0?????1103--
    Agnostus                  2001100?0000-100001111100050001001011111010-101---
    Rehbachiella              200120000000-10000101100001010110100210?010-1103--
    Cephalocarida             200120000000-100001011010001001101002101010-1103--
    Kiisortoqia               200110?00010-000001010100010001?0100?1??0???101-0-
  ;
END;

BEGIN TREES;
	TRANSLATE
		1	Aysheaia,
		2	Anomalocaris,
		3	Hurdia,
		4	Isoxys,
		5	Surusicaris,
		6	Canadaspis,
		7	Kunmingella,
		8	Occacaris,
		9	Fuxianhuia,
		10	Jianfengia,
		11	Fortiforceps,
		12	Yohoia,
		13	Leanchoilia_superlata,
		14	Leanchoilia_persephone,
		15	Leanchoilia_illecebrosa,
		16	Oestokerkus,
		17	Yawunik,
		18	Actaeus,
		19	Alalcomenaeus,
		20	Oelandocaris,
		21	Haikoucaris,
		22	Offacolus,
		23	Dibasterium,
		24	Weinbergina,
		25	Eurypterida,
		26	Olenoides,
		27	Xandarella,
		28	Naraoia,
		29	Aglaspis,
		30	Emeraldella,
		31	Martinssonia,
		32	Agnostus,
		33	Rehbachiella,
		34	Cephalocarida,
		35	Kiisortoqia
	;
	TREE * ambiguous = [&R] (1,((2,3),((11,((10,(4,5)),(((35,((32,(7,(33,(31,34)))),(30,(29,(27,(26,28)))))),((22,23),(24,25))),(12,(21,(19,((20,((13,15),(14,18))),(16,17)))))))),(9,(6,8)))));
	TREE * ambiguous = [&R] (1,((2,3),(4,((5,(10,(11,((35,(((32,(7,(33,(31,34)))),(30,(29,(27,(26,28))))),((22,23),(24,25)))),(12,(21,(19,((14,(18,(20,(13,15)))),(16,17))))))))),(8,(6,9))))));
	TREE * ambiguous = [&R] (1,((2,3),((4,(8,(6,9))),(5,(10,(11,((35,((((7,32),(33,(31,34))),(30,(29,(27,(26,28))))),((22,23),(24,25)))),(12,(21,(19,((18,(14,(20,(13,15)))),(16,17))))))))))));
	TREE * ambiguous = [&R] (1,((2,3),((4,(8,(6,9))),(5,(10,(11,((35,(((32,(7,(33,(31,34)))),(30,((26,28),(27,29)))),((22,23),(24,25)))),(12,(21,(19,(((20,(13,15)),(14,18)),(16,17))))))))))));
	TREE * ambiguous = [&R] (1,((2,3),((4,(8,(6,9))),(5,(10,(11,(((35,((32,(7,(33,(31,34)))),(30,(27,(29,(26,28)))))),((22,23),(24,25))),(12,(21,(19,(((13,15),(20,(14,18))),(16,17))))))))))));
	TREE * ambiguous = [&R] (1,((2,3),((11,((((35,((32,((4,7),(33,(31,34)))),(30,(29,(27,(26,28)))))),((22,23),(24,25))),(12,(21,(19,((20,((13,15),(14,18))),(16,17)))))),(5,10))),(9,(6,8)))));
	TREE * ambiguous = [&R] (1,((2,3),(4,((5,(10,(11,(((((7,32),(33,(31,34))),(30,((26,28),(27,29)))),(35,((22,23),(24,25)))),(12,(21,(19,((14,(18,(20,(13,15)))),(16,17))))))))),(8,(6,9))))));
	TREE * ambiguous = [&R] (1,((2,3),((11,((10,(4,5)),(((35,((32,(7,(33,(31,34)))),(30,((26,28),(27,29))))),((22,23),(24,25))),(12,(21,(19,(((20,(13,15)),(14,18)),(16,17)))))))),(9,(6,8)))));
	TREE * ambiguous = [&R] (1,((2,3),((11,((10,(4,5)),((35,((((7,32),(33,(31,34))),(30,(29,(27,(26,28))))),((22,23),(24,25)))),(12,(21,(19,((18,(14,(20,(13,15)))),(16,17)))))))),(9,(6,8)))));
	TREE * ambiguous = [&R] (1,((2,3),((11,((10,(4,5)),(((35,(((7,32),(33,(31,34))),(30,(27,(29,(26,28)))))),((22,23),(24,25))),(12,(21,(19,(((13,15),(20,(14,18))),(16,17)))))))),(9,(6,8)))));
	TREE * ambiguous = [&R] (1,((2,3),((11,(((35,(((32,((4,7),(33,(31,34)))),(30,(27,(29,(26,28))))),((22,23),(24,25)))),(12,(21,(19,(((20,(13,15)),(14,18)),(16,17)))))),(5,10))),(9,(6,8)))));
	TREE * ambiguous = [&R] (1,((2,3),((4,(8,(6,9))),(5,(10,(11,((35,(((32,(7,(33,(31,34)))),(30,(27,(29,(26,28))))),((22,23),(24,25)))),(12,(21,(19,((14,(18,(20,(13,15)))),(16,17))))))))))));
	TREE * ambiguous = [&R] (1,((2,3),((4,(8,(6,9))),(5,(10,(11,(((((7,32),(33,(31,34))),(30,(27,(29,(26,28))))),(35,((22,23),(24,25)))),(12,(21,(19,(((13,15),(20,(14,18))),(16,17))))))))))));
	TREE * ambiguous = [&R] (1,((2,3),(4,((5,(10,(11,((((32,(7,(33,(31,34)))),(30,((26,28),(27,29)))),(35,((22,23),(24,25)))),(12,(21,(19,(((20,(13,15)),(14,18)),(16,17))))))))),(8,(6,9))))));
	TREE * ambiguous = [&R] (1,((2,3),(4,((5,(10,(11,((35,(((32,(7,(33,(31,34)))),(30,(27,(29,(26,28))))),((22,23),(24,25)))),(12,(21,(19,(((13,15),(20,(14,18))),(16,17))))))))),(8,(6,9))))));
	TREE * ambiguous = [&R] (1,((2,3),(4,((5,(10,(11,(((((7,32),(33,(31,34))),(30,(27,(29,(26,28))))),(35,((22,23),(24,25)))),(12,(21,(19,((20,((13,15),(14,18))),(16,17))))))))),(8,(6,9))))));
	TREE * ambiguous = [&R] (1,((2,3),((11,((10,(4,5)),((35,(((32,(7,(33,(31,34)))),(30,(29,(27,(26,28))))),((22,23),(24,25)))),(12,(21,(19,((14,(18,(20,(13,15)))),(16,17)))))))),(9,(6,8)))));
	TREE * ambiguous = [&R] (1,((2,3),((4,(8,(6,9))),(5,(10,(11,((35,((((7,32),(33,(31,34))),(30,(27,(29,(26,28))))),((22,23),(24,25)))),(12,(21,(19,(((20,(13,15)),(14,18)),(16,17))))))))))));
	TREE * ambiguous = [&R] (1,((2,3),(4,((5,(10,(11,((35,((((7,32),(33,(31,34))),(30,(29,(27,(26,28))))),((22,23),(24,25)))),(12,(21,(19,(((20,(13,15)),(14,18)),(16,17))))))))),(8,(6,9))))));
	TREE * ambiguous = [&R] (1,((2,3),((11,(((35,(((32,((4,7),(33,(31,34)))),(30,(27,(29,(26,28))))),((22,23),(24,25)))),(12,(21,(19,((18,(14,(20,(13,15)))),(16,17)))))),(5,10))),(9,(6,8)))));
	TREE * ambiguous = [&R] (1,((2,3),((11,(((((4,7),(((30,(27,(29,(26,28)))),(33,(31,34))),(32,35))),(12,(21,(19,((14,(18,(20,(13,15)))),(16,17)))))),((22,23),(24,25))),(5,10))),(9,(6,8)))));
	TREE * ambiguous = [&R] (1,((2,3),((8,(4,(5,(10,(11,(((35,((32,(7,(33,(31,34)))),(30,((26,28),(27,29))))),((22,23),(24,25))),(12,(21,(19,(((13,15),(20,(14,18))),(16,17))))))))))),(6,9))));
	TREE * ambiguous = [&R] (1,((2,3),((8,(4,(5,(10,(11,((((32,(7,(33,(31,34)))),(30,(29,(27,(26,28))))),(35,((22,23),(24,25)))),(12,(21,(19,((14,(18,(20,(13,15)))),(16,17))))))))))),(6,9))));
	TREE * ambiguous = [&R] (1,((2,3),((11,(((((4,7),(((30,((26,28),(27,29))),(33,(31,34))),(32,35))),(12,(21,(19,(((13,15),(20,(14,18))),(16,17)))))),((22,23),(24,25))),(5,10))),(9,(6,8)))));
	TREE * ambiguous = [&R] (1,((2,3),((8,(4,(5,(10,(11,(((((7,(33,(31,34))),(32,35)),(30,(27,(29,(26,28))))),((22,23),(24,25))),(12,(21,(19,(((20,(13,15)),(14,18)),(16,17))))))))))),(6,9))));
	TREE * ambiguous = [&R] (1,((2,3),((4,(8,(6,9))),(5,(10,(11,(((((7,(33,(31,34))),(32,35)),(30,(29,(27,(26,28))))),((22,23),(24,25))),(12,(21,(19,((18,(14,(20,(13,15)))),(16,17))))))))))));
	TREE * ambiguous = [&R] (1,((2,3),((8,(4,(5,(10,(11,(((((7,(33,(31,34))),(32,35)),(30,(27,(29,(26,28))))),((22,23),(24,25))),(12,(21,(19,((18,(14,(20,(13,15)))),(16,17))))))))))),(6,9))));
	TREE * ambiguous = [&R] (1,((2,3),((8,(4,(5,(10,(11,(((((7,32),(33,(31,34))),(30,(27,(29,(26,28))))),(35,((22,23),(24,25)))),(12,(21,(19,((18,(14,(20,(13,15)))),(16,17))))))))))),(6,9))));
	TREE * ambiguous = [&R] (1,((2,3),((8,(4,(5,(10,(11,(((35,(((7,32),(33,(31,34))),(30,((26,28),(27,29))))),((22,23),(24,25))),(12,(21,(19,(((13,15),(20,(14,18))),(16,17))))))))))),(6,9))));
	TREE * ambiguous = [&R] (1,((2,3),((8,(4,(5,(10,(11,((35,(((32,(7,(33,(31,34)))),(30,(29,(27,(26,28))))),((22,23),(24,25)))),(12,(21,(19,(((20,(13,15)),(14,18)),(16,17))))))))))),(6,9))));
	TREE * ambiguous = [&R] (1,((2,3),((8,(4,(5,(10,(11,(((35,(((7,32),(33,(31,34))),(30,(27,(29,(26,28)))))),((22,23),(24,25))),(12,(21,(19,(((20,(13,15)),(14,18)),(16,17))))))))))),(6,9))));
	TREE * ambiguous = [&R] (1,((2,3),((11,((10,(4,5)),(((((7,(33,(31,34))),(32,35)),(30,(27,(29,(26,28))))),((22,23),(24,25))),(12,(21,(19,((18,(14,(20,(13,15)))),(16,17)))))))),(9,(6,8)))));
	TREE * ambiguous = [&R] (1,((2,3),((11,((10,(4,5)),(((35,(((7,32),(33,(31,34))),(30,((26,28),(27,29))))),((22,23),(24,25))),(12,(21,(19,(((20,(13,15)),(14,18)),(16,17)))))))),(9,(6,8)))));
	TREE * ambiguous = [&R] (1,((2,3),((11,(((((((4,7),(33,(31,34))),(32,35)),(30,((26,28),(27,29)))),((22,23),(24,25))),(12,(21,(19,((20,((13,15),(14,18))),(16,17)))))),(5,10))),(9,(6,8)))));
	TREE * ambiguous = [&R] (1,((2,3),((8,(4,(5,(10,(11,(((((7,(33,(31,34))),(32,35)),(30,(27,(29,(26,28))))),((22,23),(24,25))),(12,(21,(19,(((13,15),(20,(14,18))),(16,17))))))))))),(6,9))));
	TREE * ambiguous = [&R] (1,((2,3),((11,((10,(4,5)),(((((7,(33,(31,34))),(32,35)),(30,((26,28),(27,29)))),((22,23),(24,25))),(12,(21,(19,((20,((13,15),(14,18))),(16,17)))))))),(9,(6,8)))));
	TREE * ambiguous = [&R] (1,((2,3),((4,(8,(6,9))),(5,(10,(11,(((((7,(33,(31,34))),(32,35)),(30,(29,(27,(26,28))))),((22,23),(24,25))),(12,(21,(19,(((20,(13,15)),(14,18)),(16,17))))))))))));
	TREE * ambiguous = [&R] (1,((2,3),((11,((10,(4,5)),(((((7,(33,(31,34))),(32,35)),(30,((26,28),(27,29)))),((22,23),(24,25))),(12,(21,(19,(((20,(13,15)),(14,18)),(16,17)))))))),(9,(6,8)))));
	TREE * ambiguous = [&R] (1,((2,3),((11,(((((((4,7),(33,(31,34))),(32,35)),(30,(27,(29,(26,28))))),((22,23),(24,25))),(12,(21,(19,(((20,(13,15)),(14,18)),(16,17)))))),(5,10))),(9,(6,8)))));
	TREE * ambiguous = [&R] (1,((2,3),((11,(((((((4,7),(33,(31,34))),(32,35)),(30,(29,(27,(26,28))))),((22,23),(24,25))),(12,(21,(19,((18,(14,(20,(13,15)))),(16,17)))))),(5,10))),(9,(6,8)))));
	TREE * ambiguous = [&R] (1,((2,3),((11,(((((4,7),(((30,((26,28),(27,29))),(33,(31,34))),(32,35))),(12,(21,(19,(((20,(13,15)),(14,18)),(16,17)))))),((22,23),(24,25))),(5,10))),(9,(6,8)))));
	TREE * ambiguous = [&R] (1,((2,3),(4,((5,(10,(11,(((((7,(33,(31,34))),(32,35)),(30,((26,28),(27,29)))),((22,23),(24,25))),(12,(21,(19,((18,(14,(20,(13,15)))),(16,17))))))))),(8,(6,9))))));
	TREE * ambiguous = [&R] (1,((2,3),(4,((5,(10,(11,(((((7,(33,(31,34))),(32,35)),(30,(29,(27,(26,28))))),((22,23),(24,25))),(12,(21,(19,(((13,15),(20,(14,18))),(16,17))))))))),(8,(6,9))))));
	TREE * ambiguous = [&R] (1,((2,3),(4,((5,(10,(11,(((((7,(33,(31,34))),(32,35)),(30,(29,(27,(26,28))))),((22,23),(24,25))),(12,(21,(19,(((20,(13,15)),(14,18)),(16,17))))))))),(8,(6,9))))));
	TREE * extraState = [&R] (1,(2,(3,(5,(4,(7,(8,(6,(9,(((((27,(12,((10,11),(21,(19,((14,(18,(20,(13,15)))),(16,17))))))),(30,(26,28))),(32,35)),(31,(33,34))),(29,(25,(24,(22,23))))))))))))));
	TREE * extraState = [&R] (1,(2,(3,(5,(4,((6,(9,((((((10,11),(12,(21,(19,(((20,(13,15)),(16,17)),(14,18)))))),(30,(27,(26,28)))),(32,35)),(31,(33,34))),(29,(25,(24,(22,23))))))),(7,8)))))));
	TREE * extraState = [&R] (1,(3,(2,(5,(4,(7,(8,(6,(9,((((((12,(10,11)),(21,(19,((20,(13,15)),((14,18),(16,17)))))),(27,(30,(26,28)))),(32,35)),(31,(33,34))),(29,(25,(24,(22,23))))))))))))));
	TREE * extraState = [&R] (1,(3,(2,(5,(4,((6,(9,(((32,((35,((12,((10,11),(21,(19,(((13,15),(20,(14,18))),(16,17)))))),(27,30))),(26,28))),(31,(33,34))),(29,(25,(24,(22,23))))))),(7,8)))))));
	TREE * extraState = [&R] (1,(3,(2,(5,(4,(7,(8,(6,(9,(((((27,((10,11),(12,(21,((19,((20,(13,15)),(14,18))),(16,17)))))),(30,(26,28))),(32,35)),(31,(33,34))),(29,(25,(24,(22,23))))))))))))));
	TREE * extraState = [&R] (1,(3,(2,(5,(4,(7,(8,(6,(9,((((((10,11),(12,(21,(19,((20,(13,15)),((14,18),(16,17))))))),(30,(27,(26,28)))),(32,35)),(31,(33,34))),(29,(25,(24,(22,23))))))))))))));
	TREE * extraState = [&R] (1,((2,3),(5,(4,(7,(8,(6,(9,((((12,((10,11),(21,(19,((20,((13,15),(14,18))),(16,17)))))),(27,(30,(35,(26,28))))),(32,(31,(33,34)))),(29,(25,(24,(22,23)))))))))))));
	TREE * extraState = [&R] (1,(2,(3,(5,(4,(7,(8,(6,(9,(((((27,(12,((10,11),(21,(19,((20,(13,15)),((14,18),(16,17)))))))),(30,(26,28))),(32,35)),(31,(33,34))),(29,(25,(24,(22,23))))))))))))));
	TREE * extraState = [&R] (1,(3,(2,(5,(4,(7,(8,(6,(9,((((((10,11),(12,(21,((19,(14,(18,(20,(13,15))))),(16,17))))),(27,(30,(26,28)))),(32,35)),(31,(33,34))),(29,(25,(24,(22,23))))))))))))));
	TREE * extraState = [&R] (1,((2,3),(5,(4,(7,(8,(6,(9,(((((30,((10,11),(12,(21,(19,((20,(13,15)),((14,18),(16,17)))))))),(27,(26,28))),(32,35)),(31,(33,34))),(29,(25,(24,(22,23)))))))))))));
	TREE * extraState = [&R] (1,((2,3),(5,(4,((6,(9,((((((10,11),(12,(21,(19,(((13,15),(20,(14,18))),(16,17)))))),(27,(30,(26,28)))),(32,35)),(31,(33,34))),(29,(25,(24,(22,23))))))),(7,8))))));
	TREE * extraState = [&R] (1,(3,(2,(5,(4,((6,(9,(((((10,11),(12,(21,((19,((20,(13,15)),(14,18))),(16,17))))),(27,(30,(35,(26,28))))),(32,(31,(33,34)))),(29,(25,(24,(22,23))))))),(7,8)))))));
	TREE * extraState = [&R] (1,(2,(3,(5,(4,((6,(9,(((((27,((10,11),(12,(21,(19,((18,(14,(20,(13,15)))),(16,17))))))),(30,(26,28))),(32,35)),(31,(33,34))),(29,(25,(24,(22,23))))))),(7,8)))))));
	TREE * extraState = [&R] (1,(2,(3,(5,(4,((6,(9,(((((10,11),(12,(21,(19,(((20,(13,15)),(14,18)),(16,17)))))),(27,(30,(35,(26,28))))),(32,(31,(33,34)))),(29,(25,(24,(22,23))))))),(7,8)))))));
	TREE * extraState = [&R] (1,((2,3),(5,(4,((6,(9,(((((10,11),(12,(21,(19,((20,(13,15)),((14,18),(16,17))))))),(27,(30,(35,(26,28))))),(32,(33,(31,34)))),(29,(25,(24,(22,23))))))),(7,8))))));
	TREE * extraState = [&R] (1,((2,3),(5,(4,((6,(9,((((((10,11),(12,(21,(19,(((13,15),(20,(14,18))),(16,17)))))),(30,(27,(26,28)))),(32,35)),(31,(33,34))),(29,(25,(24,(22,23))))))),(7,8))))));
	TREE * extraState = [&R] (1,((2,3),(5,(4,((6,(9,(((((12,(10,11)),(21,(19,((18,(14,(20,(13,15)))),(16,17))))),(27,(30,(35,(26,28))))),(32,(31,(33,34)))),(29,(25,(24,(22,23))))))),(7,8))))));
	TREE * extraState = [&R] (1,(2,(3,(5,(4,((6,(9,((((((10,11),(12,(21,((18,(14,(20,(13,15)))),(19,(16,17)))))),(27,(30,(26,28)))),(32,35)),(31,(33,34))),(29,(25,(24,(22,23))))))),(7,8)))))));
	TREE * extraState = [&R] (1,((2,3),(5,(4,(7,(8,(6,(9,(((32,((35,(((10,11),(12,(21,((19,((13,15),(20,(14,18)))),(16,17))))),(27,30))),(26,28))),(31,(33,34))),(29,(25,(24,(22,23)))))))))))));
	TREE * extraState = [&R] (1,(3,(2,(5,(4,((6,(9,(((32,((35,(((10,11),(12,(21,((19,(14,(18,(20,(13,15))))),(16,17))))),(27,30))),(26,28))),(31,(33,34))),(29,(25,(24,(22,23))))))),(7,8)))))));
	TREE * extraState = [&R] (1,((2,3),(5,(4,(7,(8,(6,(9,(((((10,11),(12,(21,((19,((20,(13,15)),(14,18))),(16,17))))),(27,(30,(35,(26,28))))),(32,(31,(33,34)))),(29,(25,(24,(22,23)))))))))))));
	TREE * extraState = [&R] (1,((2,3),(5,(4,((6,(9,((((((10,11),(12,(21,(((13,15),(20,(14,18))),(19,(16,17)))))),(27,(30,(26,28)))),(32,35)),(31,(33,34))),(29,(25,(24,(22,23))))))),(7,8))))));
	TREE * extraState = [&R] (1,(3,(2,(5,(4,(7,(8,(6,(9,(((32,((35,(((10,11),(12,(21,(19,((18,(14,(20,(13,15)))),(16,17)))))),(27,30))),(26,28))),(31,(33,34))),(29,(25,(24,(22,23))))))))))))));
	TREE * extraState = [&R] (1,(3,(2,(5,(4,((6,(9,(((((10,11),(12,(21,(((20,(13,15)),(14,18)),(19,(16,17)))))),(27,(30,(35,(26,28))))),(32,(31,(33,34)))),(29,(25,(24,(22,23))))))),(7,8)))))));
	TREE * extraState = [&R] (1,(2,(3,(5,(4,((6,(9,(((((10,11),(12,(21,(19,((20,((13,15),(14,18))),(16,17)))))),(27,(30,(35,(26,28))))),(32,(31,(33,34)))),(29,(25,(24,(22,23))))))),(7,8)))))));
	TREE * extraState = [&R] (1,(3,(2,(5,(4,(7,(8,(6,(9,(((((27,((12,(10,11)),(21,(19,((20,((13,15),(14,18))),(16,17)))))),(30,(26,28))),(32,35)),(31,(33,34))),(29,(25,(24,(22,23))))))))))))));
	TREE * extraState = [&R] (1,(3,(2,(5,(4,(7,(8,(6,(9,(((((10,11),(12,(21,((19,((20,(13,15)),(14,18))),(16,17))))),(27,(30,(35,(26,28))))),(32,(33,(31,34)))),(29,(25,(24,(22,23))))))))))))));
	TREE * extraState = [&R] (1,(2,(3,(5,(4,(7,(8,(6,(9,(((((10,11),(12,(21,(((20,(13,15)),(14,18)),(19,(16,17)))))),(27,(30,(35,(26,28))))),(32,(31,(33,34)))),(29,(25,(24,(22,23))))))))))))));
	TREE * extraState = [&R] (1,(2,(3,(5,(4,(7,(8,(6,(9,((((((10,11),(12,(21,(19,((18,(14,(20,(13,15)))),(16,17)))))),(30,(27,(26,28)))),(32,35)),(31,(33,34))),(29,(25,(24,(22,23))))))))))))));
	TREE * extraState = [&R] (1,(2,(3,(5,(4,(7,(8,(6,(9,(((((30,((10,11),(12,(21,(19,(((20,(13,15)),(14,18)),(16,17))))))),(27,(26,28))),(32,35)),(31,(33,34))),(29,(25,(24,(22,23))))))))))))));
	TREE * extraState = [&R] (1,(2,(3,(5,(4,((6,(9,((((((12,(10,11)),(21,(19,((14,(18,(20,(13,15)))),(16,17))))),(30,(27,(26,28)))),(32,35)),(31,(33,34))),(29,(25,(24,(22,23))))))),(7,8)))))));
	TREE * extraState = [&R] (1,(3,(2,(5,(4,((6,(9,((((((10,11),(12,(21,(19,(((20,(13,15)),(14,18)),(16,17)))))),(27,(30,(26,28)))),(32,35)),(31,(33,34))),(29,(25,(24,(22,23))))))),(7,8)))))));
	TREE * extraState = [&R] (1,((2,3),(5,(4,((6,(9,(((((10,11),(12,(21,(18,((14,(20,(13,15))),(19,(16,17))))))),(27,(30,(35,(26,28))))),(32,(31,(33,34)))),(29,(25,(24,(22,23))))))),(7,8))))));
	TREE * extraState = [&R] (1,(3,(2,(5,(4,(7,(8,(6,(9,(((((12,(10,11)),(21,(19,((14,(18,(20,(13,15)))),(16,17))))),(27,(30,(35,(26,28))))),(32,(31,(33,34)))),(29,(25,(24,(22,23))))))))))))));
	TREE * extraState = [&R] (1,(2,(3,(5,(4,((6,(9,((((12,((10,11),(21,(19,(((20,(13,15)),(16,17)),(14,18)))))),(27,(30,(35,(26,28))))),(32,(31,(33,34)))),(29,(25,(24,(22,23))))))),(7,8)))))));
	TREE * extraState = [&R] (1,(3,(2,(5,(4,(7,(8,(6,(9,(((32,((35,((12,((10,11),(21,(19,(((20,(13,15)),(14,18)),(16,17)))))),(27,30))),(26,28))),(31,(33,34))),(29,(25,(24,(22,23))))))))))))));
	TREE * extraState = [&R] (1,((2,3),(5,(4,(7,(8,(6,(9,(((32,((35,(((10,11),(12,(21,(19,(((13,15),(20,(14,18))),(16,17)))))),(27,30))),(26,28))),(31,(33,34))),(29,(25,(24,(22,23)))))))))))));
	TREE * extraState = [&R] (1,(3,(2,(5,(4,(7,(8,(6,(9,(((((10,11),(12,(21,(19,(((20,(13,15)),(14,18)),(16,17)))))),(27,(30,(35,(26,28))))),(32,(33,(31,34)))),(29,(25,(24,(22,23))))))))))))));
	TREE * extraState = [&R] (1,(2,(3,(5,(4,((6,(9,((((12,((10,11),(21,(19,((20,((13,15),(14,18))),(16,17)))))),(27,(30,(35,(26,28))))),(32,(33,(31,34)))),(29,(25,(24,(22,23))))))),(7,8)))))));
	TREE * extraState = [&R] (1,(2,(3,(5,(4,(7,(8,(6,(9,((((((10,11),(12,(21,((19,((13,15),(20,(14,18)))),(16,17))))),(27,(30,(26,28)))),(32,35)),(31,(33,34))),(29,(25,(24,(22,23))))))))))))));
	TREE * extraState = [&R] (1,(3,(2,(5,(4,(7,(8,(6,(9,((((((12,(10,11)),(21,(19,((14,(18,(20,(13,15)))),(16,17))))),(30,(27,(26,28)))),(32,35)),(31,(33,34))),(29,(25,(24,(22,23))))))))))))));
	TREE * extraState = [&R] (1,((2,3),(5,(4,(7,(8,(6,(9,(((((27,((10,11),(12,(21,(19,((14,(18,(20,(13,15)))),(16,17))))))),(30,(26,28))),(32,35)),(31,(33,34))),(29,(25,(24,(22,23)))))))))))));
	TREE * extraState = [&R] (1,(2,(3,(5,(4,(7,(8,(6,(9,((((((10,11),(12,(21,(18,((14,(20,(13,15))),(19,(16,17))))))),(30,(27,(26,28)))),(32,35)),(31,(33,34))),(29,(25,(24,(22,23))))))))))))));
	TREE * extraState = [&R] (1,(2,(3,(5,(4,(7,(8,(6,(9,(((32,((35,((12,((10,11),(21,(19,((14,(18,(20,(13,15)))),(16,17)))))),(27,30))),(26,28))),(31,(33,34))),(29,(25,(24,(22,23))))))))))))));
	TREE * extraState = [&R] (1,((2,3),(5,(4,(7,(8,(6,(9,(((32,((35,(((10,11),(12,(21,(((20,(13,15)),(14,18)),(19,(16,17)))))),(27,30))),(26,28))),(31,(33,34))),(29,(25,(24,(22,23)))))))))))));
	TREE * extraState = [&R] (1,((2,3),(5,(4,((6,(9,((((((10,11),(12,(21,((19,(18,(14,(20,(13,15))))),(16,17))))),(27,(30,(26,28)))),(32,35)),(31,(33,34))),(29,(25,(24,(22,23))))))),(7,8))))));
	TREE * extraState = [&R] (1,(2,(3,(5,(4,((6,(9,((((((12,(10,11)),(21,(19,((20,((13,15),(14,18))),(16,17))))),(30,(27,(26,28)))),(32,35)),(31,(33,34))),(29,(25,(24,(22,23))))))),(7,8)))))));
	TREE * extraState = [&R] (1,(3,(2,(5,(4,((6,(9,((((((10,11),(12,(21,(19,((14,(18,(20,(13,15)))),(16,17)))))),(30,(27,(26,28)))),(32,35)),(31,(33,34))),(29,(25,(24,(22,23))))))),(7,8)))))));
	TREE * extraState = [&R] (1,(3,(2,(5,(4,(7,(8,(6,(9,((((((10,11),(12,(21,(19,((20,((13,15),(14,18))),(16,17)))))),(30,(27,(26,28)))),(32,35)),(31,(33,34))),(29,(25,(24,(22,23))))))))))))));
	TREE * extraState = [&R] (1,(2,(3,(5,(4,(7,(8,(6,(9,(((((10,11),(12,(21,((20,((13,15),(14,18))),(19,(16,17)))))),(27,(30,(35,(26,28))))),(32,(31,(33,34)))),(29,(25,(24,(22,23))))))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(5,(4,(6,(8,(9,(11,(10,(((35,(((7,32),(33,(31,34))),(30,(29,(27,(26,28)))))),(12,(21,(19,(((20,(18,14)),(15,13)),(17,16)))))),((25,24),(22,23)))))))))))));
	TREE * inapplicable = [&R] (1,((5,(2,3)),(4,(8,((6,9),(10,(11,(((35,((32,(7,(31,(33,34)))),(30,(29,(27,(26,28)))))),(12,(21,(19,((17,16),(20,((18,14),(15,13)))))))),((24,25),(22,23))))))))));
	TREE * inapplicable = [&R] (1,((3,2),(5,(4,(8,((9,6),(10,(11,(((((32,35),(7,(33,(34,31)))),(30,(29,(27,(26,28))))),(12,(21,(19,((18,(14,(20,(15,13)))),(16,17)))))),((25,24),(23,22)))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(5,(4,(6,(8,(9,(11,(10,(((12,(21,(19,((18,(14,(20,(13,15)))),(16,17))))),(35,(((7,32),(31,(34,33))),(30,(27,(29,(28,26))))))),((24,25),(22,23)))))))))))));
	TREE * inapplicable = [&R] (1,(3,(2,(5,(4,(8,((9,6),(10,(11,(((35,((25,24),(23,22))),((30,((29,27),(28,26))),((7,32),(33,(34,31))))),(12,(21,(19,(((20,(14,18)),(13,15)),(16,17)))))))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(5,(4,(8,((6,9),(10,(11,(((35,((30,(27,(29,(28,26)))),(32,(7,(33,(31,34)))))),((23,22),(25,24))),(12,(21,(19,((16,17),((18,14),(20,(13,15)))))))))))))))));
	TREE * inapplicable = [&R] (1,((3,2),(4,(5,(10,((11,(9,(8,6))),(((35,((30,(29,(27,(28,26)))),((7,32),(31,(34,33))))),(12,(21,(19,((14,(18,(20,(15,13)))),(17,16)))))),(24,(25,(22,23))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(5,(4,(((10,(11,(((12,(21,(19,((17,16),((18,14),(20,(13,15))))))),(35,((27,(30,(28,26))),((32,7),(33,(31,34)))))),((25,24),(22,23))))),(6,8)),(29,9)))))));
	TREE * inapplicable = [&R] (1,((2,3),(5,(4,(((8,6),(10,(11,(((24,25),(23,22)),((12,(21,(19,((14,(18,(20,(15,13)))),(17,16))))),((27,(30,(35,(26,28)))),((32,7),(31,(34,33))))))))),(29,9))))));
	TREE * inapplicable = [&R] (1,((3,2),(5,(4,(6,(8,(9,(11,(10,((((30,((29,27),(26,28))),((35,32),(7,(33,(34,31))))),((24,25),(22,23))),(12,(21,(19,((16,17),((20,(15,13)),(18,14))))))))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(5,(4,(6,(8,(9,(11,(10,(((12,(21,(19,(((14,18),(20,(15,13))),(17,16))))),(((7,(31,(34,33))),(32,35)),(30,((27,29),(28,26))))),((25,24),(23,22)))))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(5,(4,(((10,(11,(((12,(21,(19,((16,17),(20,((14,18),(15,13))))))),(((7,(33,(34,31))),(30,(27,(26,28)))),(32,35))),((23,22),(25,24))))),(8,6)),(29,9)))))));
	TREE * inapplicable = [&R] (1,((5,(4,(6,(8,(9,(11,(10,(((12,(21,(19,((16,17),((20,(18,14)),(15,13)))))),((30,((29,27),(26,28))),((35,32),(7,(31,(33,34)))))),((24,25),(22,23)))))))))),(2,3)));
	TREE * inapplicable = [&R] (1,((5,(3,2)),(4,(6,(8,(9,(11,(10,(((35,((32,(7,(31,(34,33)))),(30,(29,(27,(26,28)))))),(12,(21,(19,((20,((14,18),(15,13))),(17,16)))))),((25,24),(23,22)))))))))));
	TREE * inapplicable = [&R] (1,((5,(3,2)),(4,(6,(8,(9,(11,(10,(((12,(21,(19,((18,(14,(20,(15,13)))),(16,17))))),(35,((30,(27,(29,(26,28)))),(32,(7,(33,(31,34))))))),((24,25),(23,22)))))))))));
	TREE * inapplicable = [&R] (1,((3,2),((4,5),(10,((11,(9,(8,6))),(((((7,(33,(31,34))),(32,35)),(30,((29,27),(28,26)))),(12,(21,(19,((20,((18,14),(15,13))),(17,16)))))),((25,24),(23,22))))))));
	TREE * inapplicable = [&R] (1,((5,(3,2)),(4,(6,(8,(9,(11,(10,(((((32,7),(33,(34,31))),((29,27),(30,(35,(26,28))))),(12,(21,(19,(((20,(18,14)),(15,13)),(16,17)))))),((25,24),(22,23)))))))))));
	TREE * inapplicable = [&R] (1,((5,(4,(8,((6,9),(10,(11,(((12,(21,(19,(((20,(14,18)),(13,15)),(16,17))))),(35,(((30,(28,26)),(27,29)),(32,(7,(33,(31,34))))))),((25,24),(22,23))))))))),(3,2)));
	TREE * inapplicable = [&R] (1,((2,3),(4,(5,(10,((11,(9,(8,6))),(((((7,(33,(31,34))),(32,35)),(30,(29,(27,(28,26))))),(12,(21,(19,(((20,(14,18)),(13,15)),(16,17)))))),(24,(25,(23,22))))))))));
	TREE * inapplicable = [&R] (1,((3,2),(5,(4,(6,(8,(9,(11,(10,((((32,(7,(33,(31,34)))),((27,29),(30,(35,(28,26))))),(12,(21,(19,((18,(14,(20,(13,15)))),(16,17)))))),((24,25),(22,23))))))))))));
	TREE * inapplicable = [&R] (1,((5,(4,(8,((9,6),(10,(11,(((((32,35),(7,(31,(34,33)))),((29,27),(30,(26,28)))),(12,(21,(19,((14,(18,(20,(15,13)))),(16,17)))))),((25,24),(23,22))))))))),(3,2)));
	TREE * inapplicable = [&R] (1,(3,(2,(5,(4,(((8,6),(10,(11,(((24,25),(23,22)),((12,(21,(19,((14,(18,(20,(15,13)))),(17,16))))),((27,(30,(35,(26,28)))),(32,(7,(33,(34,31)))))))))),(29,9)))))));
	TREE * inapplicable = [&R] (1,(3,(2,(5,(4,(6,(8,(9,(11,(10,(((12,(21,(19,((14,(18,(20,(15,13)))),(16,17))))),(35,((32,(7,(31,(34,33)))),((29,27),(30,(28,26)))))),((23,22),(25,24)))))))))))));
	TREE * inapplicable = [&R] (1,((2,3),(5,(4,(6,(8,(9,(11,(10,(((35,((25,24),(22,23))),((30,(27,(29,(26,28)))),((7,32),(33,(34,31))))),(12,(21,(19,(((14,18),(20,(13,15))),(17,16)))))))))))))));
	TREE * inapplicable = [&R] (1,(3,(2,(5,(4,(10,((11,(9,(8,6))),((((32,(7,(31,(34,33)))),((30,(35,(28,26))),(29,27))),(12,(21,(19,(((20,(13,15)),(14,18)),(16,17)))))),((25,24),(23,22))))))))));
	TREE * inapplicable = [&R] (1,(3,(2,(5,(4,(10,((11,(9,(8,6))),(((35,(((30,(26,28)),(29,27)),(32,(7,(31,(33,34)))))),(12,(21,(19,(((20,(13,15)),(14,18)),(17,16)))))),((25,24),(23,22))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(5,(4,(8,((9,6),(10,(11,((((30,((28,26),(29,27))),((32,35),(7,(33,(34,31))))),(12,(21,(19,((16,17),(14,(18,(20,(13,15))))))))),((22,23),(24,25))))))))))));
	TREE * inapplicable = [&R] (1,((5,(3,2)),(4,(6,(8,(9,(11,(10,(((35,((32,(7,(31,(33,34)))),(30,((29,27),(26,28))))),(12,(21,(19,(((20,(18,14)),(15,13)),(16,17)))))),((24,25),(23,22)))))))))));
	TREE * inapplicable = [&R] (1,((5,(3,2)),(4,(6,(8,(9,(11,(10,(((12,(21,(19,((20,((18,14),(13,15))),(16,17))))),(35,((30,((27,29),(26,28))),(32,(7,(31,(34,33))))))),((24,25),(22,23)))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(5,(4,(8,((6,9),(10,(11,(((12,(21,(19,((16,17),(14,(18,(20,(15,13)))))))),(35,((30,(29,(27,(26,28)))),((32,7),(33,(34,31)))))),((23,22),(25,24))))))))))));
	TREE * inapplicable = [&R] (1,((5,(2,3)),(4,(8,((9,6),(10,(11,((35,(((30,(27,(29,(28,26)))),((32,7),(33,(31,34)))),((24,25),(23,22)))),(12,(21,(19,((17,16),((20,(13,15)),(14,18))))))))))))));
	TREE * inapplicable = [&R] (1,((3,2),(5,(4,(10,((11,(9,(8,6))),(((35,((30,(27,(29,(26,28)))),(32,(7,(33,(31,34)))))),(12,(21,(19,((17,16),((20,(18,14)),(13,15))))))),(24,(25,(23,22))))))))));
	TREE * inapplicable = [&R] (1,((2,3),(4,(5,(10,((11,(9,(6,8))),(((35,((30,(29,(27,(26,28)))),((32,7),(31,(34,33))))),(12,(21,(19,((16,17),((20,(14,18)),(15,13))))))),(24,(25,(23,22))))))))));
	TREE * inapplicable = [&R] (1,(3,(2,(5,(4,(10,((11,(9,(8,6))),(((12,(21,(19,((17,16),((20,(15,13)),(14,18)))))),(((7,(31,(34,33))),(35,32)),((30,(26,28)),(27,29)))),((25,24),(23,22))))))))));
	TREE * inapplicable = [&R] (1,((3,2),(5,(4,(6,(8,(9,(11,(10,(((35,((24,25),(22,23))),((32,(7,(33,(31,34)))),(30,((29,27),(28,26))))),(12,(21,(19,((18,(14,(20,(15,13)))),(16,17)))))))))))))));
	TREE * inapplicable = [&R] (1,((3,2),(5,(4,(((10,(11,(((35,(((7,32),(33,(34,31))),(30,(27,(26,28))))),(12,(21,(19,((18,(14,(20,(15,13)))),(16,17)))))),((25,24),(22,23))))),(8,6)),(9,29))))));
	TREE * inapplicable = [&R] (1,((5,(3,2)),(4,(6,(8,(9,(11,(10,(((((7,(33,(34,31))),(32,35)),(30,(27,(29,(26,28))))),(12,(21,(19,((16,17),(20,((15,13),(14,18)))))))),((25,24),(23,22)))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(5,(4,(6,(8,(9,(11,(10,(((35,((25,24),(23,22))),(((7,32),(33,(34,31))),(30,(27,(29,(28,26)))))),(12,(21,(19,((18,(14,(20,(15,13)))),(16,17))))))))))))))));
	TREE * inapplicable = [&R] (1,((3,2),(5,(4,(8,((6,9),(10,(11,(((35,((30,((27,29),(28,26))),(32,(7,(33,(34,31)))))),((25,24),(22,23))),(12,(21,(19,(((20,(18,14)),(13,15)),(16,17))))))))))))));
	TREE * inapplicable = [&R] (1,(3,(2,(5,(4,(((8,6),(10,(11,(((12,(21,(19,((16,17),((20,(18,14)),(13,15)))))),(((7,(33,(31,34))),(35,32)),(30,(27,(26,28))))),((23,22),(25,24)))))),(29,9)))))));
	TREE * inapplicable = [&R] (1,(3,(2,(5,(4,(6,(8,(9,(11,(10,((35,(((23,22),(24,25)),((30,((27,29),(26,28))),(32,(7,(33,(34,31))))))),(12,(21,(19,((16,17),((20,(14,18)),(15,13)))))))))))))))));
	TREE * inapplicable = [&R] (1,((2,3),(5,(4,(6,(8,(9,(11,(10,(((35,((30,(29,(27,(26,28)))),(32,(7,(33,(31,34)))))),(12,(21,(19,((18,(14,(20,(15,13)))),(16,17)))))),((24,25),(23,22))))))))))));
	TREE * inapplicable = [&R] (1,(3,(2,(5,(4,(10,((11,(9,(6,8))),(((35,((30,((29,27),(28,26))),(32,(7,(33,(31,34)))))),(12,(21,(19,((17,16),(14,(18,(20,(13,15))))))))),((25,24),(22,23))))))))));
	TREE * inapplicable = [&R] (1,((2,3),(4,(5,(10,((11,(9,(8,6))),(((((7,(33,(34,31))),(32,35)),(30,(29,(27,(26,28))))),(12,(21,(19,((20,((18,14),(15,13))),(17,16)))))),((25,24),(23,22)))))))));
	TREE * inapplicable = [&R] (1,((3,2),((5,4),(10,((11,(9,(6,8))),(((35,((30,((29,27),(26,28))),((7,32),(33,(31,34))))),((25,24),(22,23))),(12,(21,(19,(((20,(15,13)),(14,18)),(17,16)))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(5,(4,(8,((6,9),(10,(11,(((12,(21,(19,((14,(18,(20,(13,15)))),(16,17))))),((22,23),(24,25))),((30,(27,(29,(28,26)))),((32,35),(7,(33,(34,31)))))))))))))));
	TREE * inapplicable = [&R] (1,((5,(4,(6,(8,(9,(11,(10,((((23,22),(24,25)),(35,(((32,7),(33,(31,34))),(30,((27,29),(28,26)))))),(12,(21,(19,(((20,(13,15)),(18,14)),(16,17))))))))))))),(3,2)));
	TREE * inapplicable = [&R] (1,(3,(2,(5,(4,(6,(8,(9,(11,(10,(((35,((32,(7,(31,(33,34)))),(30,(29,(27,(28,26)))))),(12,(21,(19,((20,((18,14),(15,13))),(17,16)))))),((22,23),(25,24)))))))))))));
	TREE * inapplicable = [&R] (1,(3,(2,(5,(4,(8,((6,9),(10,(11,(((12,(21,(19,(((20,(13,15)),(18,14)),(17,16))))),(((30,(35,(28,26))),(27,29)),(32,(7,(31,(34,33)))))),((22,23),(25,24))))))))))));
	TREE * inapplicable = [&R] (1,(2,(3,(5,(4,(10,((11,(9,(6,8))),(((((7,(31,(34,33))),(35,32)),(30,(29,(27,(26,28))))),(12,(21,(19,((14,(18,(20,(15,13)))),(16,17)))))),((25,24),(23,22))))))))));
END;
