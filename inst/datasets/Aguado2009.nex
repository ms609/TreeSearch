#NEXUS
begin data;
  dimensions ntax=76 nchar=107;
  format datatype=standard gap=- missing=? Interleave=no SYMBOLS= "0123456789";
  MATRIX
    Chrysopetalum_maculata            101000000001000001221000000000010101000000020000001110???100000-00-00101111001000-0-000100--0000---000-0000
    Synelmis_albini                   000000000001100001022010100001010100000000000000001100100000000-00-10000000001100-0-000000--0000---000-0000
    Gyptis_rosea                      000000000011000001021012000000020001000200000022000010002100000-00-?0110000001000-0-000000--0000---000-0000
    Neanthes_virens                   1000000000010000010-1010000000020000000000000000001100000000000-00-00010000001000-0-000100--001100-000-0000
    Sphaerodoropsis_anae              0000000011000000010220000000000001110000001-000000--00130000000-00-0010111100110????000000--0000---000-0000
    Alcyonosyllis_phili               100000000001000001001000100100010010000000000000000011000100000-00-1000?1?1000101010001011000010111110-0001
    Amblyosyllis_speciosa             110101100001000001033200101100112311000000000122003310002100000-00-00101111001101110120010--101000-00120100
    Anguillosyllis_capensis           000000000000000001022002100200000210000200000100000010000?00011?01?0010000000110111000?000--00???????????00
    Anoplosyllis_edentulus            000000000001000101011000100100010110000100000000001010000102010100-0010?1?1001101111000000--0000---00120100
    Astreptosyllis_acrassiseta        0000000000010000010?1000100100010110000101000001101010???10201011110110?0?0011101110001000--00???????????00
    Basidiosyllis_fusigera            1000000000010000010110001001000100110000000010000000?0???1010???0??001010100011011000010110100?????????0000
    Bollandia_antipathicola           000000000011000000---0010-0000020010000000000000001110100100000-00-100000000001011?012?000--0000---00????01
    Brachysyllis_infuscata            010101100011000001033002100000010311000000000100003310000100000-00-0010111100110101000101100011000-00????00
    Branchiosyllis_oculata            100000000001000001011100100100011011000000000011000010001100000-00-00100000000101010001011000010111100-0001
    Brania_pusilla                    00000000000100000121100010010001011010000002000000111002000211010110010?1?110110101000101100001000-00111100
    Brevicirrosyllis_weissmani        0000000000010000010000001001000100100000000000000111?0000?0201100100010101000111101000101100001000-000-0000
    Cicese_sphaerosylliphormis        00000000100101001121100010020001011000000002000000111002000101010100010111100110111000101110001000-00100100
    Clavisyllis_alternata             001000000001000001400000101100110011000000041000000011???100000-00-000011110011011100010110000???????????00
    Dentatisyllis_mortoni             000000000001000001001100100100011011000000000011000010001101011001000111111001101010001011001000---00141200
    Dioplosyllis_cirrosa              000000000011000001033002100100010311000200000100003310100100000-00-001011110011010100010110001???????????00
    Epigamia_alexandri                100000000011000001000001101200110010010-00000000011110000100010200-00001212001101110121010--101100-00130101
    Erinaceusyllis_serratosetosa      00000000100101001121100010020000011000000002000000111002000101010110011000000110111000101110001000-00100100
    Eurysyllis_tuberculata            001000000101000001311103110100011110000010030011001110131101000-01100000000001101110001011001010111100-0000
    Eusyllis_blomstrandi              00000000001100000100120010000001201000000000002000001000010201110100010101200110101000101100011000-000-0010
    Exogone_naidina                   00000000000101000112200010020000021000000001000000221001000201010100011121200110101000101100001000-00111100
    Haplosyllides_floridana           000000000001100001000000100100010011000000000000000010000102000-00-10001010000101010001011000010111100-0001
    Haplosyllis_spongicola            000000000001000001001100100100011010000000000011000010001102000-00-10001010000101010001011000010111100-0001
    Imajimaea_zonata                  100000000001000001000001101200110010010-00000000011110100100010200-00001212001101110121010--101010??0??0?01
    Inermosyllis_balearica            000000000001000001011100100100011111000000000011000110001101011001000101010001101010001000--00???????????00
    Karroonsyllis_exogoneformis       0000000000010000010011021002000011100000000000110011101011021111010001011110011010100010110000???????????00
    Lamellisyllis_comans              00100000000100000140000010010011001100000004100000001114010001100110010101000110111000?0110?00???????????00
    Levidorum_hartmanae               000000000001000000---001100000000-10010-001-000000--00--0000000-00-10001212001101010120010--101010??0??0?00
    Megasyllis_corruscans             100000000001000001011200100100012011000000000022000011002100011001000101010001101010001011000010111110-0000
    Miscellania_dentata               0000000000010000012110001000000101100000000000000011101000010101011001000000011011100010110001???????????00
    Murrindisyllis_kooromundrola      0000100000111000010310001002100101100000000001000013100000000101011?0000000001101011010000--00???????????00
    Myrianida_prolifera               000000000011000001000001101200110010010-00000000011110000100010200-00001212001101110121010--101010000130101
    Neopetitia_amphophthalma          000000000001100001200000100000010011000200000000011110000000010000-00101111001101110001011000000---00???200
    Nooralia_bulgannabouyanga         000000000001000001000000100100010010001000000000011110000001010100-0010?0?0001101010001000--001000-00100100
    Nuchalosyllis_lamellicornis       101000010001000001000100101100111011000000000011000011001100000-00-00000000001101010001011000010111100-0000
    Nudisyllis_pulligera              000000000001000001000000100000010010000000000000000010000101011000?0010110000110101100?01100001000-000-1100
    Odontosyllis_fulgurans            000000000011001001011000100100010010001000000000001110000101011001000101110001101011001010--011000-000-0000
    Opisthodonta_morena               000000000001000001000000100000010010000000000000000010000102000-00-0011101200110101000101101001000-000-0000
    Opisthosyllis_brunnea             000000000001001001000100100100011011000000000011000010001102111101100101100001101010001011010010111100-0000
    Pachyprocerastea_hydrozoicola     000000000001000001000001101200110010010-000000000?1110000100010200-?000121200110111012?010--101010000????01
    Palposyllis_prosostoma            0000000010000000010010021001100100100000010000000111100001000111010000000000011010100000110000???????????00
    Paraehlersia_ferrugina            0000000000110000010012001001000120110000000000200000100021010110010001110120011010100010110000100--000-0010
    Paraexogone_hebes                 000000000001000001122000100200000210000000010000002210010002010001000101111001101010001011000000---00141100
    Parahaplosyllis__brevicirra       001000000001000001011103100000011110000000000011001110???100011000-10001111000101010120011001010111110-0000
    Paraopisthosyllis_alternocirra    10000000100100000141100010110001011100000004100000111114010201110110010?1000011011100110110100???????????00
    Parapionosyllis_minuta            00000000000100000121100010010000011010000002000000111002000211010110010?1?110110101000101100001000-00111100
    Paraproceraea_tamana              000000000001000001000001101200110010010-00000000011110???100010200-0000121200110111012?010--10???????????00
    Paraprocerastea_crocantinae       000000000001000001000001101200?10010010-00000000011110100100010200-1000121200010111012?010--10???????????01
    Parasphaerosyllis_indica          000000000001000001000100100100011010000000000011000010001100011101000101010001101010001011000010111100-0000
    Perkinsyllis_augeneri             0000000000110000010000001001000100100000000000000000100001020111010001111110011010100010110000???????11?100
    Pionosyllis_enigmatica            00000000000100000100000010010001001100100000000000001000010001100100010111100110101000101100001000-000-0000
    Plakosyllis_brevipes              001000000001000001311103110000011110000010030011001110131100011101100000000001101110001011000010111100-0000
    Planicirrata_proceraeae           000000000001000001???001101200110010010-000000000?1110???100010200-0000121200010111012?010--101010??0??0?00
    Proceraea_picta                   100000000001000001000001101200110010010-00000000011110100100010200-00001212001101110121010--101010000130101
    Procerastea_halleziana            000000000001000001000001101200110010010-001-00000?--00100000010200-?000121200010111012?010--101010000130101
    Proshaerosyllis_xarifae           00000000100101000121100010020000011000000002000000111012000101010110010000000110111001001111001000-00100100
    Psammosyllis_wui                  0000000000010000010110001002000101110000000000000010100001020110010000011110011011100000110100???????????00
    Rhopalosyllis_hamulifera          0000000010010000010111001011000111110000000000110011101011010111010?0001?1?00010111001?011000010111100-0000
    Salvatoria_clavata                00000000000100000121100010020001011000000002000000111012000101000100010111100110111001001110001000-00100100
    Sphaerosyllis_hystrix             00000000100101000121100010020000011010000002000000111012000201010110010?10000110101000101100001000-00111100
    Streptodontha_pterochaeta         000000000001000001001000100100010010000000000000000010???112011100-0010121200110101000?01101001000-000-0000
    Streptospinigera_heterosetosa     000000000001000001001000100100010110000101000001101010000112010110-01110000001101110001000--00???????????00
    Streptosyllis_websteri            000000000001000101001000100101010110000101000001101010000112010110-01101010011101111011000--001000-000-0000
    Syllides_japonicus                000000000001000101001000100101010110000100000001101010000101010000-00101010001101111000000--001000-00110100
    Syllis_prolifera                  000000000001000001001100100100011010000000000011000010001102111001000101111001101010001011000010111100-0000
    Synmerosyllis_lamelligera         100010000001000001000200100000012010000000000020010010???10101100100011101200110101000101100001000-000-0010
    Tetrapalpia_dorsoaciculata        000000000001000001000100100000011011000000000011000010???10201110110000000000010101000?011010010111100-0000
    Trypanoseta_ohma                  000000000001000001001100100100011011000000000011000010001102000-010100010100011010100010110010???????????0?
    Trypanosyllis_aeolis              101000001001000001000100100000011011000010000011000010001100000-00-00101111001101010001010--1010111110-0000
    Virchowia_clavata                 000000000001000001000001101200110010010-00001000001111100100010200-0000121200110111012?010--101010000????01
    Westheidesyllis_gesae             000000000011000001000000100100010011000200000000000010000?01011100-000011110011110100010110000?????????0000
    Xenosyllis_scabra                 001000011001000001011103110000011110000010000011001110101100000-010001011?100110111000?000--00???????????00
    ;
END;

BEGIN TAXA;
	DIMENSIONS NTAX = 76;
	TAXLABELS
		Chrysopetalum_maculata
		Synelmis_albini
		Gyptis_rosea
		Neanthes_virens
		Sphaerodoropsis_anae
		Alcyonosyllis_phili
		Amblyosyllis_speciosa
		Anguillosyllis_capensis
		Anoplosyllis_edentulus
		Astreptosyllis_acrassiseta
		Basidiosyllis_fusigera
		Bollandia_antipathicola
		Brachysyllis_infuscata
		Branchiosyllis_oculata
		Brania_pusilla
		Brevicirrosyllis_weissmani
		Cicese_sphaerosylliphormis
		Clavisyllis_alternata
		Dentatisyllis_mortoni
		Dioplosyllis_cirrosa
		Epigamia_alexandri
		Erinaceusyllis_serratosetosa
		Eurysyllis_tuberculata
		Eusyllis_blomstrandi
		Exogone_naidina
		Haplosyllides_floridana
		Haplosyllis_spongicola
		Imajimaea_zonata
		Inermosyllis_balearica
		Karroonsyllis_exogoneformis
		Lamellisyllis_comans
		Levidorum_hartmanae
		Megasyllis_corruscans
		Miscellania_dentata
		Murrindisyllis_kooromundrola
		Myrianida_prolifera
		Neopetitia_amphophthalma
		Nooralia_bulgannabouyanga
		Nuchalosyllis_lamellicornis
		Nudisyllis_pulligera
		Odontosyllis_fulgurans
		Opisthodonta_morena
		Opisthosyllis_brunnea
		Pachyprocerastea_hydrozoicola
		Palposyllis_prosostoma
		Paraehlersia_ferrugina
		Paraexogone_hebes
		Parahaplosyllis__brevicirra
		Paraopisthosyllis_alternocirra
		Parapionosyllis_minuta
		Paraproceraea_tamana
		Paraprocerastea_crocantinae
		Parasphaerosyllis_indica
		Perkinsyllis_augeneri
		Pionosyllis_enigmatica
		Plakosyllis_brevipes
		Planicirrata_proceraeae
		Proceraea_picta
		Procerastea_halleziana
		Proshaerosyllis_xarifae
		Psammosyllis_wui
		Rhopalosyllis_hamulifera
		Salvatoria_clavata
		Sphaerosyllis_hystrix
		Streptodontha_pterochaeta
		Streptospinigera_heterosetosa
		Streptosyllis_websteri
		Syllides_japonicus
		Syllis_prolifera
		Synmerosyllis_lamelligera
		Tetrapalpia_dorsoaciculata
		Trypanoseta_ohma
		Trypanosyllis_aeolis
		Virchowia_clavata
		Westheidesyllis_gesae
		Xenosyllis_scabra
	;
END;
BEGIN TREES;
	TRANSLATE
		1	Chrysopetalum_maculata,
		2	Synelmis_albini,
		3	Gyptis_rosea,
		4	Neanthes_virens,
		5	Sphaerodoropsis_anae,
		6	Alcyonosyllis_phili,
		7	Amblyosyllis_speciosa,
		8	Anguillosyllis_capensis,
		9	Anoplosyllis_edentulus,
		10	Astreptosyllis_acrassiseta,
		11	Basidiosyllis_fusigera,
		12	Bollandia_antipathicola,
		13	Brachysyllis_infuscata,
		14	Branchiosyllis_oculata,
		15	Brania_pusilla,
		16	Brevicirrosyllis_weissmani,
		17	Cicese_sphaerosylliphormis,
		18	Clavisyllis_alternata,
		19	Dentatisyllis_mortoni,
		20	Dioplosyllis_cirrosa,
		21	Epigamia_alexandri,
		22	Erinaceusyllis_serratosetosa,
		23	Eurysyllis_tuberculata,
		24	Eusyllis_blomstrandi,
		25	Exogone_naidina,
		26	Haplosyllides_floridana,
		27	Haplosyllis_spongicola,
		28	Imajimaea_zonata,
		29	Inermosyllis_balearica,
		30	Karroonsyllis_exogoneformis,
		31	Lamellisyllis_comans,
		32	Levidorum_hartmanae,
		33	Megasyllis_corruscans,
		34	Miscellania_dentata,
		35	Murrindisyllis_kooromundrola,
		36	Myrianida_prolifera,
		37	Neopetitia_amphophthalma,
		38	Nooralia_bulgannabouyanga,
		39	Nuchalosyllis_lamellicornis,
		40	Nudisyllis_pulligera,
		41	Odontosyllis_fulgurans,
		42	Opisthodonta_morena,
		43	Opisthosyllis_brunnea,
		44	Pachyprocerastea_hydrozoicola,
		45	Palposyllis_prosostoma,
		46	Paraehlersia_ferrugina,
		47	Paraexogone_hebes,
		48	Parahaplosyllis__brevicirra,
		49	Paraopisthosyllis_alternocirra,
		50	Parapionosyllis_minuta,
		51	Paraproceraea_tamana,
		52	Paraprocerastea_crocantinae,
		53	Parasphaerosyllis_indica,
		54	Perkinsyllis_augeneri,
		55	Pionosyllis_enigmatica,
		56	Plakosyllis_brevipes,
		57	Planicirrata_proceraeae,
		58	Proceraea_picta,
		59	Procerastea_halleziana,
		60	Proshaerosyllis_xarifae,
		61	Psammosyllis_wui,
		62	Rhopalosyllis_hamulifera,
		63	Salvatoria_clavata,
		64	Sphaerosyllis_hystrix,
		65	Streptodontha_pterochaeta,
		66	Streptospinigera_heterosetosa,
		67	Streptosyllis_websteri,
		68	Syllides_japonicus,
		69	Syllis_prolifera,
		70	Synmerosyllis_lamelligera,
		71	Tetrapalpia_dorsoaciculata,
		72	Trypanoseta_ohma,
		73	Trypanosyllis_aeolis,
		74	Virchowia_clavata,
		75	Westheidesyllis_gesae,
		76	Xenosyllis_scabra
	;
	TREE * ambiguous = [&R] (1,(5,((2,((((37,((45,((40,(55,(16,(((33,((53,(72,(27,(6,26)))),(69,(((14,(39,73)),(43,71)),(19,(29,(62,(30,(48,(76,(23,56))))))))))),(24,(46,70))),((41,(61,(11,(49,(18,31))))),(42,65)))))),(54,(75,(20,(7,13)))))),(38,(32,(((44,(21,36)),((28,58),(74,(52,59)))),(51,57)))))),(34,(((64,(15,50)),(25,47)),(63,(17,(22,60)))))),(9,(68,(67,(10,66))))),(8,35))),(12,(3,4)))));
	TREE * ambiguous = [&R] (1,(5,((2,((((37,((45,((40,(55,(16,(((33,((53,(72,(27,(6,26)))),(69,(((73,(14,39)),(43,71)),(19,(29,(62,(30,(48,(76,(23,56))))))))))),(24,(46,70))),((41,(61,(11,(49,(18,31))))),(42,65)))))),(54,(75,(20,(7,13)))))),(38,(32,(51,((44,(21,36)),(74,((28,58),(59,(52,57)))))))))),(34,(((64,(15,50)),(25,47)),(63,(17,(22,60)))))),(9,(68,(67,(10,66))))),(8,35))),(12,(3,4)))));
	TREE * ambiguous = [&R] (1,(5,((2,((((37,(38,((45,((40,(55,(16,(((33,(53,((72,(27,(6,26))),(69,(((14,(39,73)),(43,71)),(19,(29,(62,(30,(48,(76,(23,56)))))))))))),(24,(46,70))),((41,(61,(11,(49,(18,31))))),(42,65)))))),(54,(75,(20,(7,13)))))),(32,(51,(57,((44,(21,36)),(74,((28,58),(52,59)))))))))),(34,(((64,(15,50)),(25,47)),(63,(17,(22,60)))))),(9,(68,(67,(10,66))))),(8,35))),(12,(3,4)))));
	TREE * ambiguous = [&R] (1,(5,((2,((((37,(38,((45,((40,(55,(16,(((33,(53,((72,(27,(6,26))),(69,(((73,(14,39)),(43,71)),(19,(29,(62,(30,(48,(76,(23,56)))))))))))),(24,(46,70))),((41,(61,(11,(49,(18,31))))),(42,65)))))),(54,(75,(20,(7,13)))))),(32,(51,((44,(21,36)),((28,58),(74,(59,(52,57)))))))))),(34,(((64,(15,50)),(25,47)),(63,(17,(22,60)))))),(9,(68,(67,(10,66))))),(8,35))),(12,(3,4)))));
	TREE * ambiguous = [&R] (1,(5,((2,((((37,((45,((40,(55,(16,(((33,((72,(27,(6,26))),((69,((53,(73,(14,39))),(43,71))),(19,(29,(62,(30,(48,(76,(23,56)))))))))),(24,(46,70))),((41,(61,(11,(49,(18,31))))),(42,65)))))),(54,(75,(20,(7,13)))))),(38,(32,(51,(44,((21,36),((74,(28,58)),(52,(57,59)))))))))),(34,(((64,(15,50)),(25,47)),(63,(17,(22,60)))))),(9,(68,(67,(10,66))))),(8,35))),(12,(3,4)))));
	TREE * ambiguous = [&R] (1,(5,((2,((((37,(38,(((40,(55,(16,(((33,((72,(27,(6,26))),(53,(69,(((14,(39,73)),(43,71)),(19,(29,(62,(30,(48,(76,(23,56)))))))))))),(24,(46,70))),((41,(61,(11,(49,(18,31))))),(42,65)))))),(54,(75,(20,(7,13))))),(45,(32,(51,(57,((44,(21,36)),((28,58),(74,(52,59))))))))))),(34,(((64,(15,50)),(25,47)),(63,(17,(22,60)))))),(9,(68,(67,(10,66))))),(8,35))),(12,(3,4)))));
	TREE * ambiguous = [&R] (1,(5,((2,((((37,(38,(((40,(55,(16,(((33,((53,(72,(27,(6,26)))),(69,(((73,(14,39)),(43,71)),(19,(29,(62,(30,(48,(76,(23,56))))))))))),(24,(46,70))),((41,(61,(11,(49,(18,31))))),(42,65)))))),(54,(75,(20,(7,13))))),(45,(32,(57,(51,((21,36),(44,((28,58),(74,(52,59)))))))))))),(34,(((64,(15,50)),(25,47)),(63,(17,(22,60)))))),(9,(68,(67,(10,66))))),(8,35))),(12,(3,4)))));
	TREE * ambiguous = [&R] (1,(5,((2,((((37,(38,(((40,(55,(16,(((33,((72,(27,(6,26))),((69,((53,(73,(14,39))),(43,71))),(19,(29,(62,(30,(48,(76,(23,56)))))))))),(24,(46,70))),((41,(61,(11,(49,(18,31))))),(42,65)))))),(54,(75,(20,(7,13))))),(45,(32,((44,((21,36),((74,(28,58)),(52,59)))),(51,57))))))),(34,(((64,(15,50)),(25,47)),(63,(17,(22,60)))))),(9,(68,(67,(10,66))))),(8,35))),(12,(3,4)))));
	TREE * ambiguous = [&R] (1,(5,((2,((((37,(38,(((40,(55,(16,(((33,((72,(27,(6,26))),((69,((53,(73,(14,39))),(43,71))),(19,(29,(62,(30,(48,(76,(23,56)))))))))),(24,(46,70))),((41,(61,(11,(49,(18,31))))),(42,65)))))),(54,(75,(20,(7,13))))),(45,(32,(51,((44,(21,36)),((74,(28,58)),(52,(57,59)))))))))),(34,(((64,(15,50)),(25,47)),(63,(17,(22,60)))))),(9,(68,(67,(10,66))))),(8,35))),(12,(3,4)))));
	TREE * ambiguous = [&R] (1,(5,((2,((((37,(38,((45,((40,(55,(16,(((33,(53,((72,(27,(6,26))),(69,(((14,(39,73)),(43,71)),(19,(29,(62,(30,(48,(76,(23,56)))))))))))),(24,(46,70))),((41,(61,(11,(49,(18,31))))),(42,65)))))),(54,(75,(20,(7,13)))))),(32,(51,((44,(21,36)),(74,((28,58),(57,(52,59)))))))))),(34,(((64,(15,50)),(25,47)),(63,(17,(22,60)))))),(9,(68,(67,(10,66))))),(8,35))),(12,(3,4)))));
	TREE * ambiguous = [&R] (1,(5,((2,((((37,(38,((45,((40,(55,(16,(((33,((72,(27,(6,26))),(((53,(73,(14,39))),(43,71)),(69,(19,(29,(62,(30,(48,(76,(23,56))))))))))),(24,(46,70))),((41,(61,(11,(49,(18,31))))),(42,65)))))),(54,(75,(20,(7,13)))))),(32,(51,((21,36),(44,((74,(28,58)),(52,(57,59)))))))))),(34,(((64,(15,50)),(25,47)),(63,(17,(22,60)))))),(9,(68,(67,(10,66))))),(8,35))),(12,(3,4)))));
	TREE * ambiguous = [&R] (1,(5,((2,((((37,((45,((40,(55,(16,(((33,((53,(72,(27,(6,26)))),(69,((43,(71,(14,(39,73)))),(19,(29,(62,(30,(48,(76,(23,56))))))))))),(24,(46,70))),((41,(61,(11,(49,(18,31))))),(42,65)))))),(54,(75,(20,(7,13)))))),(38,(32,(51,((21,36),(44,(74,((28,58),(59,(52,57))))))))))),(34,(((64,(15,50)),(25,47)),(63,(17,(22,60)))))),(9,(68,(67,(10,66))))),(8,35))),(12,(3,4)))));
	TREE * ambiguous = [&R] (1,(5,((2,((((37,(38,((45,((40,(55,(16,(((33,((53,(72,(27,(6,26)))),(69,((43,(71,(14,(39,73)))),(19,(29,(62,(30,(48,(76,(23,56))))))))))),(24,(46,70))),((41,(61,(11,(49,(18,31))))),(42,65)))))),(54,(75,(20,(7,13)))))),(32,(51,((21,36),(44,((28,58),(74,(57,(52,59))))))))))),(34,(((64,(15,50)),(25,47)),(63,(17,(22,60)))))),(9,(68,(67,(10,66))))),(8,35))),(12,(3,4)))));
	TREE * ambiguous = [&R] (1,(5,((2,((((37,((45,((40,(55,(16,(((33,((72,(27,(6,26))),(((53,(73,(14,39))),(43,71)),(69,(19,(29,(62,(30,(48,(76,(23,56))))))))))),(24,(46,70))),((41,(61,(11,(49,(18,31))))),(42,65)))))),(54,(75,(20,(7,13)))))),(38,(32,(51,(57,(44,((21,36),((28,58),(74,(52,59))))))))))),(34,(((64,(15,50)),(25,47)),(63,(17,(22,60)))))),(9,(68,(67,(10,66))))),(8,35))),(12,(3,4)))));
	TREE * ambiguous = [&R] (1,(5,((2,((((37,(38,((45,((40,(55,(16,(((33,((72,(27,(6,26))),(((53,(73,(14,39))),(43,71)),(69,(19,(29,(62,(30,(48,(76,(23,56))))))))))),(24,(46,70))),((41,(61,(11,(49,(18,31))))),(42,65)))))),(54,(75,(20,(7,13)))))),(32,(57,(51,((44,(21,36)),(74,((28,58),(52,59)))))))))),(34,(((64,(15,50)),(25,47)),(63,(17,(22,60)))))),(9,(68,(67,(10,66))))),(8,35))),(12,(3,4)))));
	TREE * ambiguous = [&R] (1,(5,((2,((((37,((45,((40,(55,(16,(((33,((72,(27,(6,26))),(53,(69,(((73,(14,39)),(43,71)),(19,(29,(62,(30,(48,(76,(23,56)))))))))))),(24,(46,70))),((41,(61,(11,(49,(18,31))))),(42,65)))))),(54,(75,(20,(7,13)))))),(38,(32,(((21,36),(44,((74,(28,58)),(52,59)))),(51,57)))))),(34,(((64,(15,50)),(25,47)),(63,(17,(22,60)))))),(9,(68,(67,(10,66))))),(8,35))),(12,(3,4)))));
	TREE * ambiguous = [&R] (1,(5,((2,((((37,(38,(((40,(55,(16,(((33,((72,(27,(6,26))),(53,(69,(((73,(14,39)),(43,71)),(19,(29,(62,(30,(48,(76,(23,56)))))))))))),(24,(46,70))),((41,(61,(11,(49,(18,31))))),(42,65)))))),(54,(75,(20,(7,13))))),(45,(32,(51,((44,(21,36)),(74,((28,58),(52,(57,59))))))))))),(34,(((64,(15,50)),(25,47)),(63,(17,(22,60)))))),(9,(68,(67,(10,66))))),(8,35))),(12,(3,4)))));
	TREE * ambiguous = [&R] (1,(5,((2,((((37,((45,((40,(55,(16,(((33,(53,((72,(27,(6,26))),(69,(((14,(39,73)),(43,71)),(19,(29,(62,(30,(48,(76,(23,56)))))))))))),(24,(46,70))),((41,(61,(11,(49,(18,31))))),(42,65)))))),(54,(75,(20,(7,13)))))),(38,(32,(51,(44,((21,36),(74,((28,58),(59,(52,57))))))))))),(34,(((64,(15,50)),(25,47)),(63,(17,(22,60)))))),(9,(68,(67,(10,66))))),(8,35))),(12,(3,4)))));
	TREE * ambiguous = [&R] (1,(5,((2,((((37,(38,(((40,(55,(16,(((33,(53,((72,(27,(6,26))),(69,((43,(71,(14,(39,73)))),(19,(29,(62,(30,(48,(76,(23,56)))))))))))),(24,(46,70))),((41,(61,(11,(49,(18,31))))),(42,65)))))),(54,(75,(20,(7,13))))),(45,(32,(51,(44,((21,36),((74,(28,58)),(52,(57,59))))))))))),(34,(((64,(15,50)),(25,47)),(63,(17,(22,60)))))),(9,(68,(67,(10,66))))),(8,35))),(12,(3,4)))));
	TREE * ambiguous = [&R] (1,(5,((2,((((37,(38,(((40,(55,(16,(((33,((72,(27,(6,26))),(53,(69,(((14,(39,73)),(43,71)),(19,(29,(62,(30,(48,(76,(23,56)))))))))))),(24,(46,70))),((41,(61,(11,(49,(18,31))))),(42,65)))))),(54,(75,(20,(7,13))))),(45,(32,(51,(44,((21,36),((74,(28,58)),(59,(52,57))))))))))),(34,(((64,(15,50)),(25,47)),(63,(17,(22,60)))))),(9,(68,(67,(10,66))))),(8,35))),(12,(3,4)))));
	TREE * ambiguous = [&R] (1,(5,((2,((((37,(38,((45,((40,(55,(16,(((33,((53,(72,(27,(6,26)))),(69,((43,(71,(14,(39,73)))),(19,(29,(62,(30,(48,(76,(23,56))))))))))),(24,(46,70))),((41,(61,(11,(49,(18,31))))),(42,65)))))),(54,(75,(20,(7,13)))))),(32,(57,(51,((21,36),(44,((74,(28,58)),(52,59)))))))))),(34,(((64,(15,50)),(25,47)),(63,(17,(22,60)))))),(9,(68,(67,(10,66))))),(8,35))),(12,(3,4)))));
	TREE * ambiguous = [&R] (1,(5,((2,((((37,(38,((45,((40,(55,(16,(((33,(53,((72,(27,(6,26))),(69,(((73,(14,39)),(43,71)),(19,(29,(62,(30,(48,(76,(23,56)))))))))))),(24,(46,70))),((41,(61,(11,(49,(18,31))))),(42,65)))))),(54,(75,(20,(7,13)))))),(32,(((44,(21,36)),((74,(28,58)),(52,59))),(51,57)))))),(34,(((64,(15,50)),(25,47)),(63,(17,(22,60)))))),(9,(68,(67,(10,66))))),(8,35))),(12,(3,4)))));
	TREE * ambiguous = [&R] (1,(5,((2,((((37,((45,((40,(55,(16,(((33,(53,((72,(27,(6,26))),(69,((43,(71,(14,(39,73)))),(19,(29,(62,(30,(48,(76,(23,56)))))))))))),(24,(46,70))),((41,(61,(11,(49,(18,31))))),(42,65)))))),(54,(75,(20,(7,13)))))),(38,(32,(57,(51,(44,((21,36),(74,((28,58),(52,59))))))))))),(34,(((64,(15,50)),(25,47)),(63,(17,(22,60)))))),(9,(68,(67,(10,66))))),(8,35))),(12,(3,4)))));
	TREE * ambiguous = [&R] (1,(5,((2,((((37,(38,(((40,(55,(16,(((33,(53,((72,(27,(6,26))),(69,((43,(71,(14,(39,73)))),(19,(29,(62,(30,(48,(76,(23,56)))))))))))),(24,(46,70))),((41,(61,(11,(49,(18,31))))),(42,65)))))),(54,(75,(20,(7,13))))),(45,(32,(51,(57,((21,36),(44,((74,(28,58)),(52,59))))))))))),(34,(((64,(15,50)),(25,47)),(63,(17,(22,60)))))),(9,(68,(67,(10,66))))),(8,35))),(12,(3,4)))));
	TREE * extraState = [&R] (1,(5,((2,(3,4)),(12,(((38,((37,((40,(75,(55,((19,((29,((33,((14,(27,(72,(6,26)))),(39,73))),(53,(43,71)))),(69,(30,(62,(48,(76,(23,56)))))))),((61,(11,(31,49))),((41,(16,45)),(54,((24,(46,70)),(42,65))))))))),(18,(7,(13,20))))),(51,(21,(36,(44,((74,(28,58)),(57,(52,(32,59)))))))))),(9,(68,(67,(10,66))))),((8,35),(34,((63,(17,((64,(15,50)),(25,47)))),(22,60)))))))));
	TREE * extraState = [&R] (1,(5,((2,(3,4)),(12,(((38,((37,((54,(75,((55,(((19,((29,((33,((14,(72,(27,(6,26)))),(39,73))),(53,(43,71)))),(69,(30,(62,(48,(76,(23,56)))))))),((41,(16,45)),(40,(24,(46,70))))),(61,(11,(49,(18,31)))))),(42,65)))),(20,(7,13)))),(51,(21,(44,(36,((74,(28,58)),(57,(52,(32,59)))))))))),(9,(68,(67,(10,66))))),((8,35),(34,((17,(63,((64,(15,50)),(25,47)))),(22,60)))))))));
	TREE * extraState = [&R] (1,(5,((2,(3,4)),(12,(((38,((37,((40,(75,(55,((19,((29,((33,((14,(72,(27,(6,26)))),(39,73))),(53,(43,71)))),(69,(30,(62,(48,(76,(23,56)))))))),((61,(11,(31,49))),(((54,(((64,(15,50)),(25,47)),(17,(63,(34,(22,60)))))),((24,(46,70)),(42,65))),(41,(16,45)))))))),(18,(20,(7,13))))),(51,(21,(36,(44,(((28,58),(74,(32,59))),(52,57)))))))),(9,(68,(67,(10,66))))),(8,35))))));
	TREE * extraState = [&R] (1,(5,((2,(3,4)),(12,(((38,((37,((40,(75,(55,((19,((29,((33,((14,(72,(27,(6,26)))),(39,73))),(53,(43,71)))),(69,(30,(62,(48,(76,(23,56)))))))),((61,(11,(49,(18,31)))),(((54,(((64,(15,50)),(25,47)),(17,(63,(34,(22,60)))))),((24,(46,70)),(42,65))),(41,(16,45)))))))),(20,(7,13)))),(51,(21,(((28,58),((74,(32,59)),(52,57))),(36,44)))))),(9,(68,(67,(10,66))))),(8,35))))));
	TREE * extraState = [&R] (1,(5,((2,(3,4)),(12,(((38,((37,((75,(54,(55,((19,(((72,((27,(6,26)),(73,(14,39)))),((29,33),(53,(43,71)))),(69,(30,(62,(48,(76,(23,56)))))))),((61,(11,(49,(18,31)))),(((16,45),((24,(46,70)),(42,65))),(40,41))))))),(20,(7,13)))),(51,(21,(36,(44,((74,(28,58)),(57,(52,(32,59)))))))))),(9,(68,(67,(10,66))))),((8,35),(34,((((64,(15,50)),(25,47)),(17,63)),(22,60)))))))));
	TREE * extraState = [&R] (1,(5,((2,(3,4)),(12,(((38,((37,((75,(54,(40,(55,((19,((29,((33,((14,(27,(72,(6,26)))),(39,73))),(53,(43,71)))),(69,(30,(62,(48,(76,(23,56)))))))),((61,(11,(49,(18,31)))),(((41,(16,45)),(42,65)),(24,(46,70))))))))),(20,(7,13)))),(51,(21,(44,(36,((28,58),((74,(32,59)),(52,57))))))))),(9,(68,(67,(10,66))))),((8,35),(34,((((64,(15,50)),(25,47)),(17,63)),(22,60)))))))));
	TREE * extraState = [&R] (1,(5,((2,(3,4)),(12,(((38,((37,((75,(54,(55,(((19,(((29,(33,(14,((72,(27,(6,26))),(39,73))))),(53,(43,71))),(69,(30,(62,(48,(76,(23,56)))))))),(((16,45),((24,(46,70)),(42,65))),(40,41))),(61,(11,(49,(18,31)))))))),(20,(7,13)))),(51,(21,((((28,58),(52,57)),(74,(32,59))),(36,44)))))),(9,(68,(67,(10,66))))),((8,35),(34,((((64,(15,50)),(25,47)),(17,63)),(22,60)))))))));
	TREE * extraState = [&R] (1,(5,((2,(3,4)),(12,(((38,((37,((40,(75,(55,((19,((29,((33,((14,(72,(27,(6,26)))),(39,73))),(53,(43,71)))),(69,(30,(62,(48,(76,(23,56)))))))),(((((11,(31,49)),(42,65)),(24,(46,70))),(54,(61,(((64,(15,50)),(25,47)),(17,(63,(34,(22,60)))))))),(41,(16,45))))))),(18,(20,(7,13))))),(51,(21,((((28,58),(74,(32,59))),(52,57)),(36,44)))))),(68,(10,(66,67)))),(9,(8,35)))))));
	TREE * extraState = [&R] (1,(5,((2,(3,4)),(12,(9,(((38,((37,((40,(75,(55,((19,((29,((33,((14,(27,(72,(6,26)))),(39,73))),(53,(43,71)))),(69,(30,(62,(48,(76,(23,56)))))))),((61,(11,(31,49))),(((54,(((64,(15,50)),(25,47)),(17,(63,(34,(22,60)))))),((24,(46,70)),(42,65))),(41,(16,45)))))))),(18,(7,(13,20))))),(51,(21,(44,(36,(((28,58),(52,57)),(74,(32,59))))))))),(68,(10,(66,67)))),(8,35)))))));
	TREE * extraState = [&R] (1,(5,((2,(3,4)),(12,(((38,((37,((75,(54,(55,((19,((((72,((14,(27,(6,26))),(39,73))),(53,(43,71))),(29,33)),(69,(30,(62,(48,(76,(23,56)))))))),((61,(11,(49,(18,31)))),((41,(16,45)),(40,((24,(46,70)),(42,65))))))))),(20,(7,13)))),(51,(21,((((28,58),(74,(32,59))),(52,57)),(36,44)))))),(9,(68,(67,(10,66))))),((8,35),(34,((((64,(15,50)),(25,47)),(17,63)),(22,60)))))))));
	TREE * extraState = [&R] (1,(5,((2,(3,4)),(12,(((38,((37,((75,(54,(55,(((19,(((((14,((6,26),(27,72))),(39,73)),(53,(43,71))),(29,33)),(69,(30,(62,(48,(76,(23,56)))))))),(61,(11,(49,(18,31))))),((41,(16,45)),(40,((24,(46,70)),(42,65)))))))),(20,(7,13)))),(51,(21,(44,(36,((28,58),(74,(57,(52,(32,59))))))))))),(9,(68,(67,(10,66))))),((8,35),(34,((63,(17,((64,(15,50)),(25,47)))),(22,60)))))))));
	TREE * extraState = [&R] (1,(5,((2,(3,4)),(12,(((38,((37,((75,(54,(55,((19,((((53,((14,(72,(27,(6,26)))),(39,73))),(43,71)),(29,33)),(69,(30,(62,(48,(76,(23,56)))))))),((61,(11,(49,(18,31)))),((41,(16,45)),(40,((24,(46,70)),(42,65))))))))),(20,(7,13)))),(51,(21,(((74,(28,58)),(57,(52,(32,59)))),(36,44)))))),(9,(68,(67,(10,66))))),((8,35),(34,((((64,(15,50)),(25,47)),(17,63)),(22,60)))))))));
	TREE * extraState = [&R] (1,(5,((2,(3,4)),(12,(((38,((37,((40,(75,(55,((19,((29,((33,((14,(72,(27,(6,26)))),(39,73))),(53,(43,71)))),(69,(30,(62,(48,(76,(23,56)))))))),((61,(11,(31,49))),(((54,(((64,(15,50)),(25,47)),(17,(63,(34,(22,60)))))),((24,(46,70)),(42,65))),(41,(16,45)))))))),(18,(20,(7,13))))),(51,(21,(((28,58),(74,(57,(52,(32,59))))),(36,44)))))),(68,(66,(10,67)))),(9,(8,35)))))));
	TREE * extraState = [&R] (1,(5,((2,(3,4)),(12,(((38,((37,((40,(75,(55,((19,((29,((33,((14,(27,(72,(6,26)))),(39,73))),(53,(43,71)))),(69,(30,(62,(48,(76,(23,56)))))))),(((((11,(31,49)),(42,65)),(24,(46,70))),(54,(61,(((64,(15,50)),(25,47)),(17,(63,(34,(22,60)))))))),(41,(16,45))))))),(18,(7,(13,20))))),(51,(21,(36,(44,(74,((28,58),(57,(52,(32,59))))))))))),(9,(68,(67,(10,66))))),(8,35))))));
	TREE * extraState = [&R] (1,(5,((2,(3,4)),(12,(((38,((37,((40,(75,(55,((19,((29,((33,((14,((6,26),(27,72))),(39,73))),(53,(43,71)))),(69,(30,(62,(48,(76,(23,56)))))))),((61,(11,(31,49))),((41,(16,45)),(54,((24,(46,70)),(42,65))))))))),(18,(20,(7,13))))),(51,(21,(((74,(28,58)),(57,(52,(32,59)))),(36,44)))))),(9,(68,(67,(10,66))))),((8,35),(34,((63,(17,((64,(15,50)),(25,47)))),(22,60)))))))));
	TREE * extraState = [&R] (1,(5,((2,(3,4)),(12,(((38,((37,((75,(54,(55,(((19,(((72,((27,(6,26)),(14,(39,73)))),((29,33),(53,(43,71)))),(69,(30,(62,(48,(76,(23,56)))))))),(61,(11,(49,(18,31))))),(((16,45),((24,(46,70)),(42,65))),(40,41)))))),(20,(7,13)))),(51,(21,(((74,(28,58)),(57,(52,(32,59)))),(36,44)))))),(9,(68,(67,(10,66))))),((8,35),(34,((17,(63,((64,(15,50)),(25,47)))),(22,60)))))))));
	TREE * extraState = [&R] (1,(5,((2,(3,4)),(12,(((38,((37,((40,(75,(55,((19,((29,((33,((14,(27,(72,(6,26)))),(39,73))),(53,(43,71)))),(69,(30,(62,(48,(76,(23,56)))))))),(((((11,(31,49)),(42,65)),(24,(46,70))),(54,(61,(((64,(15,50)),(25,47)),(17,(63,(34,(22,60)))))))),(41,(16,45))))))),(18,(7,(13,20))))),(51,(21,(44,(36,(((28,58),(74,(32,59))),(52,57)))))))),(68,(66,(10,67)))),(9,(8,35)))))));
	TREE * extraState = [&R] (1,(5,((2,(3,4)),(12,(((38,((37,((75,(54,(55,(((19,(((((14,((6,26),(27,72))),(39,73)),(53,(43,71))),(29,33)),(69,(30,(62,(48,(76,(23,56)))))))),((41,(16,45)),(40,((24,(46,70)),(42,65))))),(61,(11,(49,(18,31)))))))),(20,(7,13)))),(51,(21,(44,(36,(((28,58),(52,57)),(74,(32,59))))))))),(9,(68,(67,(10,66))))),((8,35),(34,((((64,(15,50)),(25,47)),(17,63)),(22,60)))))))));
	TREE * extraState = [&R] (1,(5,((2,(3,4)),(12,(((38,((37,(((40,(75,(55,((19,((29,((33,((14,((6,26),(27,72))),(39,73))),(53,(43,71)))),(69,(30,(62,(48,(76,(23,56)))))))),(((54,((61,(11,49)),(((64,(15,50)),(25,47)),(17,(63,(34,(22,60))))))),((24,(46,70)),(42,65))),(41,(16,45))))))),(20,(7,13))),(18,31))),(51,(21,(36,(44,(((28,58),(52,57)),(74,(32,59))))))))),(9,(68,(67,(10,66))))),(8,35))))));
	TREE * extraState = [&R] (1,(5,((2,(3,4)),(12,(((38,((37,((75,(54,(55,(((19,((((72,((6,26),(27,(14,(39,73))))),(53,(43,71))),(29,33)),(69,(30,(62,(48,(76,(23,56)))))))),(((16,45),((24,(46,70)),(42,65))),(40,41))),(61,(11,(49,(18,31)))))))),(20,(7,13)))),(51,(21,(((28,58),((74,(32,59)),(52,57))),(36,44)))))),(9,(68,(67,(10,66))))),((8,35),(34,((63,(17,((64,(15,50)),(25,47)))),(22,60)))))))));
	TREE * extraState = [&R] (1,(5,((2,(3,4)),(12,(((38,((37,((75,(54,(55,((19,(((((72,(27,(6,26))),(14,(39,73))),(29,33)),(53,(43,71))),(69,(30,(62,(48,(76,(23,56)))))))),((61,(11,(49,(18,31)))),((41,(16,45)),(40,((24,(46,70)),(42,65))))))))),(20,(7,13)))),(51,(21,(((28,58),(74,(57,(52,(32,59))))),(36,44)))))),(9,(68,(67,(10,66))))),((8,35),(34,((63,(17,((64,(15,50)),(25,47)))),(22,60)))))))));
	TREE * extraState = [&R] (1,(5,((2,(3,4)),(12,(((38,((37,((54,(75,((55,(((19,((29,((33,((14,((6,26),(27,72))),(39,73))),(53,(43,71)))),(69,(30,(62,(48,(76,(23,56)))))))),((41,(16,45)),(40,(24,(46,70))))),(61,(11,(49,(18,31)))))),(42,65)))),(20,(7,13)))),(51,(21,(36,(44,((28,58),((74,(32,59)),(52,57))))))))),(9,(68,(67,(10,66))))),((8,35),(34,((((64,(15,50)),(25,47)),(17,63)),(22,60)))))))));
	TREE * extraState = [&R] (1,(5,((2,(3,4)),(12,(((38,((37,((54,(75,((55,(((19,((29,((33,((14,((6,26),(27,72))),(39,73))),(53,(43,71)))),(69,(30,(62,(48,(76,(23,56)))))))),((41,(16,45)),(40,(70,(24,46))))),(61,(11,(49,(18,31)))))),(42,65)))),(20,(7,13)))),(51,(21,(((74,(28,58)),(57,(52,(32,59)))),(36,44)))))),(9,(68,(67,(10,66))))),((8,35),(34,((17,(63,((64,(15,50)),(25,47)))),(22,60)))))))));
	TREE * extraState = [&R] (1,(5,((2,(3,4)),(12,(((38,((37,((40,(75,(55,((19,((29,((33,((14,(27,(72,(6,26)))),(39,73))),(53,(43,71)))),(69,(30,(62,(48,(76,(23,56)))))))),(((((11,(31,49)),(42,65)),(24,(46,70))),(54,(61,(((64,(15,50)),(25,47)),(17,(63,(34,(22,60)))))))),(41,(16,45))))))),(18,(20,(7,13))))),(51,(21,(36,(44,(((28,58),(74,(32,59))),(52,57)))))))),(9,(68,(67,(10,66))))),(8,35))))));
	TREE * extraState = [&R] (1,(5,((2,(3,4)),(12,(9,(((38,((37,((40,(75,(55,((19,((29,((33,((14,((6,26),(27,72))),(39,73))),(53,(43,71)))),(69,(30,(62,(48,(76,(23,56)))))))),((61,(11,(31,49))),(((54,(((64,(15,50)),(25,47)),(17,(63,(34,(22,60)))))),((24,(46,70)),(42,65))),(41,(16,45)))))))),(18,(20,(7,13))))),(51,(21,(((28,58),((74,(32,59)),(52,57))),(36,44)))))),(68,(66,(10,67)))),(8,35)))))));
	TREE * extraState = [&R] (1,(5,((2,(3,4)),(12,(((38,((37,((75,(54,(55,(((19,(((72,((14,(27,(6,26))),(39,73))),((29,33),(53,(43,71)))),(69,(30,(62,(48,(76,(23,56)))))))),(((16,45),((24,(46,70)),(42,65))),(40,41))),(61,(11,(49,(18,31)))))))),(20,(7,13)))),(51,(21,(36,(44,((28,58),(74,(57,(52,(32,59))))))))))),(9,(68,(67,(10,66))))),((8,35),(34,((17,(63,((64,(15,50)),(25,47)))),(22,60)))))))));
	TREE * extraState = [&R] (1,(5,((2,(3,4)),(12,(((38,((37,((75,(54,((55,((19,((29,((33,((14,(72,(27,(6,26)))),(39,73))),(53,(43,71)))),(69,(30,(62,(48,(76,(23,56)))))))),(61,(11,(49,(18,31)))))),((41,(16,45)),(40,((70,(24,46)),(42,65))))))),(20,(7,13)))),(51,(21,((((28,58),(74,(32,59))),(52,57)),(36,44)))))),(9,(68,(67,(10,66))))),((8,35),(34,((17,(63,((64,(15,50)),(25,47)))),(22,60)))))))));
	TREE * extraState = [&R] (1,(5,((2,(3,4)),(12,(9,(((38,((37,((40,(75,(55,((19,((29,((33,((14,(27,(72,(6,26)))),(39,73))),(53,(43,71)))),(69,(30,(62,(48,(76,(23,56)))))))),((61,(11,(49,(18,31)))),(((54,(((64,(15,50)),(25,47)),(17,(63,(34,(22,60)))))),((24,(46,70)),(42,65))),(41,(16,45)))))))),(20,(7,13)))),(51,(21,(36,(44,((28,58),(74,(57,(52,(32,59))))))))))),(68,(10,(66,67)))),(8,35)))))));
	TREE * extraState = [&R] (1,(5,((2,(3,4)),(12,(((38,((37,((40,(75,(55,((19,((29,((33,((14,((6,26),(27,72))),(39,73))),(53,(43,71)))),(69,(30,(62,(48,(76,(23,56)))))))),((61,(11,(31,49))),((41,(16,45)),(54,((24,(46,70)),(42,65))))))))),(18,(20,(7,13))))),(51,(21,(44,(36,(((28,58),(52,57)),(74,(32,59))))))))),(9,(68,(67,(10,66))))),((8,35),(34,((17,(63,((64,(15,50)),(25,47)))),(22,60)))))))));
	TREE * extraState = [&R] (1,(5,((2,(3,4)),(12,(((38,((37,((40,(75,(55,((19,((29,((33,((14,(72,(27,(6,26)))),(39,73))),(53,(43,71)))),(69,(30,(62,(48,(76,(23,56)))))))),((61,(11,(49,(18,31)))),(((54,(((64,(15,50)),(25,47)),(17,(63,(34,(22,60)))))),((24,(46,70)),(42,65))),(41,(16,45)))))))),(20,(7,13)))),(51,(21,(36,(44,(((28,58),(52,57)),(74,(32,59))))))))),(68,(10,(66,67)))),(9,(8,35)))))));
	TREE * extraState = [&R] (1,(5,((2,(3,4)),(12,(((38,((37,((75,(54,(55,(((19,((29,((33,((14,((6,26),(27,72))),(39,73))),(53,(43,71)))),(69,(30,(62,(48,(76,(23,56)))))))),(61,(11,(49,(18,31))))),((41,(16,45)),(40,((70,(24,46)),(42,65)))))))),(20,(7,13)))),(51,(21,(44,(36,(74,((28,58),(57,(52,(32,59))))))))))),(9,(68,(67,(10,66))))),((8,35),(34,((17,(63,((64,(15,50)),(25,47)))),(22,60)))))))));
	TREE * extraState = [&R] (1,(5,((2,(3,4)),(12,(((38,((37,(((40,(75,(55,((19,((29,((33,((14,(27,(72,(6,26)))),(39,73))),(53,(43,71)))),(69,(30,(62,(48,(76,(23,56)))))))),(((54,((61,(11,49)),(((64,(15,50)),(25,47)),(17,(63,(34,(22,60))))))),((24,(46,70)),(42,65))),(41,(16,45))))))),(20,(7,13))),(18,31))),(51,(21,(36,(44,((74,(28,58)),(57,(52,(32,59)))))))))),(9,(68,(67,(10,66))))),(8,35))))));
	TREE * extraState = [&R] (1,(5,((2,(3,4)),(12,((9,((38,((37,((40,(75,(55,((19,((29,((33,((14,(72,(27,(6,26)))),(39,73))),(53,(43,71)))),(69,(30,(62,(48,(76,(23,56)))))))),((61,(11,(31,49))),(((54,(((64,(15,50)),(25,47)),(17,(63,(34,(22,60)))))),((24,(46,70)),(42,65))),(41,(16,45)))))))),(18,(7,(13,20))))),(51,(21,(((28,58),((74,(32,59)),(52,57))),(36,44)))))),(68,(66,(10,67))))),(8,35))))));
	TREE * extraState = [&R] (1,(5,((2,(3,4)),(12,(((38,((37,((75,(54,(55,((19,((((72,((6,26),(27,(14,(39,73))))),(53,(43,71))),(29,33)),(69,(30,(62,(48,(76,(23,56)))))))),((61,(11,(49,(18,31)))),((41,(16,45)),(40,((24,(46,70)),(42,65))))))))),(20,(7,13)))),(51,(21,(36,(44,((74,(28,58)),(57,(52,(32,59)))))))))),(9,(68,(67,(10,66))))),((8,35),(34,((63,(17,((64,(15,50)),(25,47)))),(22,60)))))))));
	TREE * extraState = [&R] (1,(5,((2,(3,4)),(12,((9,((38,((37,(((40,(75,(55,((19,((29,((33,((14,(27,(72,(6,26)))),(39,73))),(53,(43,71)))),(69,(30,(62,(48,(76,(23,56)))))))),(((54,((61,(11,49)),(((64,(15,50)),(25,47)),(17,(63,(34,(22,60))))))),((24,(46,70)),(42,65))),(41,(16,45))))))),(20,(7,13))),(18,31))),(51,(21,(((28,58),(74,(57,(52,(32,59))))),(36,44)))))),(68,(66,(10,67))))),(8,35))))));
	TREE * extraState = [&R] (1,(5,((2,(3,4)),(12,(((38,((37,((40,(75,(55,((19,((29,((33,((14,(72,(27,(6,26)))),(39,73))),(53,(43,71)))),(69,(30,(62,(48,(76,(23,56)))))))),((61,(11,(31,49))),(((54,(((64,(15,50)),(25,47)),(17,(63,(34,(22,60)))))),((24,(46,70)),(42,65))),(41,(16,45)))))))),(18,(20,(7,13))))),(51,(21,((74,((28,58),(57,(52,(32,59))))),(36,44)))))),(68,(10,(66,67)))),(9,(8,35)))))));
	TREE * extraState = [&R] (1,(5,((2,(3,4)),(12,(((38,((37,((75,(54,(55,(((19,((((53,((14,(72,(27,(6,26)))),(39,73))),(43,71)),(29,33)),(69,(30,(62,(48,(76,(23,56)))))))),(((16,45),((24,(46,70)),(42,65))),(40,41))),(61,(11,(49,(18,31)))))))),(20,(7,13)))),(51,(21,(44,(36,(((28,58),(52,57)),(74,(32,59))))))))),(9,(68,(67,(10,66))))),((8,35),(34,((17,(63,((64,(15,50)),(25,47)))),(22,60)))))))));
	TREE * extraState = [&R] (1,(5,((2,(3,4)),(12,(9,(((38,((37,((40,(75,(55,((19,((29,((33,((14,((6,26),(27,72))),(39,73))),(53,(43,71)))),(69,(30,(62,(48,(76,(23,56)))))))),(((((11,(31,49)),(42,65)),(24,(46,70))),(54,(61,(((64,(15,50)),(25,47)),(17,(63,(34,(22,60)))))))),(41,(16,45))))))),(18,(20,(7,13))))),(51,(21,(44,(36,((28,58),(74,(57,(52,(32,59))))))))))),(68,(10,(66,67)))),(8,35)))))));
	TREE * extraState = [&R] (1,(5,((2,(3,4)),(12,(((38,((37,((54,(75,((55,(((19,((29,((33,((14,((6,26),(27,72))),(39,73))),(53,(43,71)))),(69,(30,(62,(48,(76,(23,56)))))))),((41,(16,45)),(40,(70,(24,46))))),(61,(11,(49,(18,31)))))),(42,65)))),(20,(7,13)))),(51,(21,(44,(36,((28,58),((74,(32,59)),(52,57))))))))),(9,(68,(67,(10,66))))),((8,35),(34,((17,(63,((64,(15,50)),(25,47)))),(22,60)))))))));
	TREE * extraState = [&R] (1,(5,((2,(3,4)),(12,((9,((38,((37,((40,(75,(55,((19,((29,((33,((14,((6,26),(27,72))),(39,73))),(53,(43,71)))),(69,(30,(62,(48,(76,(23,56)))))))),(((((11,(31,49)),(42,65)),(24,(46,70))),(54,(61,(((64,(15,50)),(25,47)),(17,(63,(34,(22,60)))))))),(41,(16,45))))))),(18,(7,(13,20))))),(51,(21,(36,(44,(74,((28,58),(57,(52,(32,59))))))))))),(68,(66,(10,67))))),(8,35))))));
	TREE * extraState = [&R] (1,(5,((2,(3,4)),(12,(((38,((37,((75,(54,(55,(((19,((((72,(27,(6,26))),(14,(39,73))),((29,33),(53,(43,71)))),(69,(30,(62,(48,(76,(23,56)))))))),(((16,45),((24,(46,70)),(42,65))),(40,41))),(61,(11,(49,(18,31)))))))),(20,(7,13)))),(51,(21,(36,(44,((74,(28,58)),(57,(52,(32,59)))))))))),(9,(68,(67,(10,66))))),((8,35),(34,((17,(63,((64,(15,50)),(25,47)))),(22,60)))))))));
	TREE * extraState = [&R] (1,(5,((2,(3,4)),(12,(((38,((37,((75,(54,(55,(((19,((29,((33,((14,(72,(27,(6,26)))),(39,73))),(53,(43,71)))),(69,(30,(62,(48,(76,(23,56)))))))),((41,(16,45)),(40,((70,(24,46)),(42,65))))),(61,(11,(49,(18,31)))))))),(20,(7,13)))),(51,(21,(44,(36,(74,((28,58),(57,(52,(32,59))))))))))),(9,(68,(67,(10,66))))),((8,35),(34,((((64,(15,50)),(25,47)),(17,63)),(22,60)))))))));
	TREE * extraState = [&R] (1,(5,((2,(3,4)),(12,(((38,((37,((75,(54,(55,((19,((29,((33,((14,((6,26),(27,72))),(39,73))),(53,(43,71)))),(69,(30,(62,(48,(76,(23,56)))))))),((11,(61,(49,(18,31)))),((41,(16,45)),(40,((24,(46,70)),(42,65))))))))),(20,(7,13)))),(51,(21,(((28,58),((74,(32,59)),(52,57))),(36,44)))))),(9,(68,(67,(10,66))))),((8,35),(34,((((64,(15,50)),(25,47)),(17,63)),(22,60)))))))));
	TREE * extraState = [&R] (1,(5,((2,(3,4)),(12,(((38,((37,((75,(54,(55,(((19,((((72,((14,(27,(6,26))),(39,73))),(53,(43,71))),(29,33)),(69,(30,(62,(48,(76,(23,56)))))))),(61,(11,(49,(18,31))))),(((16,45),((24,(46,70)),(42,65))),(40,41)))))),(20,(7,13)))),(51,(21,(44,(36,(((28,58),(74,(32,59))),(52,57)))))))),(9,(68,(67,(10,66))))),((8,35),(34,((17,(63,((64,(15,50)),(25,47)))),(22,60)))))))));
	TREE * extraState = [&R] (1,(5,((2,(3,4)),(12,(((38,((37,((75,(54,(55,((19,((29,((33,((14,((6,26),(27,72))),(39,73))),(53,(43,71)))),(69,(30,(62,(48,(76,(23,56)))))))),((11,(61,(49,(18,31)))),((41,(16,45)),(40,((70,(24,46)),(42,65))))))))),(20,(7,13)))),(51,(21,(36,(44,(((28,58),(52,57)),(74,(32,59))))))))),(9,(68,(67,(10,66))))),((8,35),(34,((63,(17,((64,(15,50)),(25,47)))),(22,60)))))))));
	TREE * extraState = [&R] (1,(5,((2,(3,4)),(12,(((38,((37,((75,(54,(55,(((19,(((((14,(72,(27,(6,26)))),(39,73)),(53,(43,71))),(29,33)),(69,(30,(62,(48,(76,(23,56)))))))),(61,(11,(49,(18,31))))),(((16,45),((24,(46,70)),(42,65))),(40,41)))))),(20,(7,13)))),(51,(21,(36,(44,(((28,58),(74,(32,59))),(52,57)))))))),(9,(68,(67,(10,66))))),((8,35),(34,((17,(63,((64,(15,50)),(25,47)))),(22,60)))))))));
	TREE * extraState = [&R] (1,(5,((2,(3,4)),(12,(((38,((37,((40,(75,(55,((19,((29,((33,((14,(27,(72,(6,26)))),(39,73))),(53,(43,71)))),(69,(30,(62,(48,(76,(23,56)))))))),(((((11,(31,49)),(42,65)),(24,(46,70))),(54,(61,(((64,(15,50)),(25,47)),(17,(63,(34,(22,60)))))))),(41,(16,45))))))),(18,(20,(7,13))))),(51,(21,(36,(44,(74,((28,58),(57,(52,(32,59))))))))))),(9,(68,(67,(10,66))))),(8,35))))));
	TREE * extraState = [&R] (1,(5,((2,(3,4)),(12,(((38,((37,((75,(54,(55,(((19,((((14,(27,(72,(6,26)))),(39,73)),((29,33),(53,(43,71)))),(69,(30,(62,(48,(76,(23,56)))))))),(((16,45),((24,(46,70)),(42,65))),(40,41))),(61,(11,(49,(18,31)))))))),(20,(7,13)))),(51,(21,(36,(44,((28,58),(74,(57,(52,(32,59))))))))))),(9,(68,(67,(10,66))))),((8,35),(34,((17,(63,((64,(15,50)),(25,47)))),(22,60)))))))));
	TREE * extraState = [&R] (1,(5,((2,(3,4)),(12,(((38,((37,((75,(54,(40,(55,((19,((29,((33,((14,(27,(72,(6,26)))),(39,73))),(53,(43,71)))),(69,(30,(62,(48,(76,(23,56)))))))),((61,(11,(49,(18,31)))),((41,(16,45)),((24,(46,70)),(42,65))))))))),(20,(7,13)))),(51,(21,(36,(44,((28,58),(74,(57,(52,(32,59))))))))))),(9,(68,(67,(10,66))))),((8,35),(34,((17,(63,((64,(15,50)),(25,47)))),(22,60)))))))));
	TREE * extraState = [&R] (1,(5,((2,(3,4)),(12,(((38,((37,((40,(75,(55,((19,((29,((33,((14,(72,(27,(6,26)))),(39,73))),(53,(43,71)))),(69,(30,(62,(48,(76,(23,56)))))))),((61,(11,(49,(18,31)))),((41,(16,45)),(54,((24,(46,70)),(42,65))))))))),(20,(7,13)))),(51,(21,(36,(44,(((28,58),(74,(32,59))),(52,57)))))))),(9,(68,(67,(10,66))))),((8,35),(34,((63,(17,((64,(15,50)),(25,47)))),(22,60)))))))));
	TREE * inapplicable = [&R] (1,(5,(2,((3,4),(((34,((22,60),(17,(63,((((((65,42),(24,((46,70),(33,(((29,((72,(27,(26,6))),(14,(39,73)))),(19,(69,(30,(62,(48,(76,(56,23)))))))),(53,(43,71))))))),((55,(61,(11,(49,(31,18))))),(41,(16,45)))),(54,(40,(75,(37,(20,(13,7))))))),(9,(68,(67,(10,66))))),((47,25),(64,(50,15)))))))),(35,8)),(38,(12,(32,(51,(57,((74,((28,58),(44,(36,21)))),(59,52))))))))))));
END;
