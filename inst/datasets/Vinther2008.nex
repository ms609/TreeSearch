#NEXUS
begin data;
  dimensions ntax=23 nchar=57;
  format datatype=standard gap=- missing=? Interleave=no SYMBOLS= "0123456789";
  matrix 
    Nemertean         1010?10?0-0000000000000000000000000000-00-00-00000-0000-0
    Aphroditacea      111111110-111?010111111111111?10000000-00-00-00000-0000-0
    Eunicida          111111110-1111010111111011101010000000-00-00-00000-0000-0
    Canalipalpata     111111110-1110010111100000001000000000-00-00-00000-0000-0
    Chrysopetalidae   111111110-1111110111111111111010000000-00-00-00000-0000-0
    Scolecida         111111110-1111010111?00000001000000000-00-00-00000-0000-0
    Helicoradomenia   1110111111?000000000000000000001110001010000-00000-000?-0
    Chaetoderma       1110111111?000000000000000000001111001010000-00000-0001-0
    Lepidochitona     111001111110000000000000000000012210010110010000002010111
    Neopilina         ?1???11?100?00000000001000000001221000-00-0100000000001-0
    Terebratulina     100000000-1100000000000000000000000110-00-011001001000020
    Lingula           100000000-1100000000000000000000000110-00-012101001000020
    Plumulites        ??????????1?????011??????????????00000-00-011000103301010
    Turrilepas        ????????????????1?1?????????????????00-00-011000103301010
    Lepidocoleus      ????????????????1?1?????????????????00-00-011000113301010
    Canadia           ??????????1??01?011?101000000000000000-00-00-00000-0000-0
    Echinochiton      ??????????????0?000?000?000000?????00101?11100000020?0?1?
    Polysacos         ??????????????0?000?000?000000?????00101?1110000102210111
    Acaenoplax        ??????????????0?000?000?000000???110010100010000002000100
    Halkieria         ??????????????0?000?000?000000?????001011101??000010?000?
    Wiwaxia           ??????????1???0?000?000?000000010??0011?1?00-00000-0000-0
    Orthrozanclus     ??????????????0?000?000?000000?????001??1101???000000000?
    Odontogriphus     ??????????????0?000?000000000001021000-00-00-00000-0000-0
  ;
end;

BEGIN TAXA;
	DIMENSIONS NTAX = 23;
	TAXLABELS
		Nemertean
		Aphroditacea
		Eunicida
		Canalipalpata
		Chrysopetalidae
		Scolecida
		Helicoradomenia
		Chaetoderma
		Lepidochitona
		Neopilina
		Terebratulina
		Lingula
		Plumulites
		Turrilepas
		Lepidocoleus
		Canadia
		Echinochiton
		Polysacos
		Acaenoplax
		Halkieria
		Wiwaxia
		Orthrozanclus
		Odontogriphus
	;
END;
BEGIN TREES;
	TRANSLATE
		1	Nemertean,
		2	Aphroditacea,
		3	Eunicida,
		4	Canalipalpata,
		5	Chrysopetalidae,
		6	Scolecida,
		7	Helicoradomenia,
		8	Chaetoderma,
		9	Lepidochitona,
		10	Neopilina,
		11	Terebratulina,
		12	Lingula,
		13	Plumulites,
		14	Turrilepas,
		15	Lepidocoleus,
		16	Canadia,
		17	Echinochiton,
		18	Polysacos,
		19	Acaenoplax,
		20	Halkieria,
		21	Wiwaxia,
		22	Orthrozanclus,
		23	Odontogriphus
	;
	TREE * ambiguous = [&R] (1,((((6,(3,(2,5))),(16,(4,(13,(14,15))))),(23,(21,(20,(22,(10,((19,(7,8)),(9,(17,18))))))))),(11,12)));
	TREE * ambiguous = [&R] (1,(((6,((16,(3,(2,5))),(4,(13,(14,15))))),(23,(21,(20,(22,(10,((19,(7,8)),(9,(17,18))))))))),(11,12)));
	TREE * ambiguous = [&R] (1,(((((16,(3,(2,5))),(13,(14,15))),(4,6)),(23,(21,(20,(22,(10,((19,(7,8)),(9,(17,18))))))))),(11,12)));
	TREE * ambiguous = [&R] (1,(((6,(4,(16,(3,(5,(2,(13,(14,15)))))))),(23,(21,(20,(22,(10,((19,(7,8)),(9,(17,18))))))))),(11,12)));
	TREE * ambiguous = [&R] (1,(((16,(4,(6,(3,((2,5),(13,(14,15))))))),(23,(21,(20,(22,(10,((19,(7,8)),(9,(17,18))))))))),(11,12)));
	TREE * ambiguous = [&R] (1,(((6,(4,(16,(3,((2,5),(13,(14,15))))))),(23,(21,(20,(22,(10,((19,(7,8)),(9,(17,18))))))))),(11,12)));
	TREE * ambiguous = [&R] (1,((((16,((3,(2,5)),(13,(14,15)))),(4,6)),(23,(21,(20,(22,(10,((19,(7,8)),(9,(17,18))))))))),(11,12)));
	TREE * ambiguous = [&R] (1,(((4,(16,(6,(3,(5,(2,(13,(14,15)))))))),(23,(21,(20,(22,(10,((19,(7,8)),(9,(17,18))))))))),(11,12)));
	TREE * ambiguous = [&R] (1,(((16,(4,(6,((3,(2,5)),(13,(14,15)))))),(23,(21,(20,(22,(10,((19,(7,8)),(9,(17,18))))))))),(11,12)));
	TREE * ambiguous = [&R] (1,(((4,(16,((3,(2,5)),(6,(13,(14,15)))))),(23,(21,(20,(22,(10,((19,(7,8)),(9,(17,18))))))))),(11,12)));
	TREE * ambiguous = [&R] (1,((((16,((2,5),(3,(13,(14,15))))),(4,6)),(23,(21,(20,(22,(10,((19,(7,8)),(9,(17,18))))))))),(11,12)));
	TREE * ambiguous = [&R] (1,(((4,(16,(6,((2,5),(3,(13,(14,15))))))),(23,(21,(20,(22,(10,((19,(7,8)),(9,(17,18))))))))),(11,12)));
	TREE * ambiguous = [&R] (1,(((4,(6,((3,(2,5)),(16,(13,(14,15)))))),(23,(21,(20,(22,(10,((19,(7,8)),(9,(17,18))))))))),(11,12)));
	TREE * extraState = [&R] (1,(((16,(4,(6,(3,(2,5))))),((10,((7,8),(19,((9,(17,18)),(20,22))))),(21,23))),((11,12),(13,(14,15)))));
	TREE * extraState = [&R] (1,(((16,(4,(6,(3,(5,(2,(13,(14,15)))))))),(23,(21,(10,((7,8),(19,((9,(17,18)),(20,22)))))))),(11,12)));
	TREE * extraState = [&R] (1,(((16,(4,((3,(2,5)),(6,(13,(14,15)))))),(23,(21,(10,((7,8),(19,((9,(17,18)),(20,22)))))))),(11,12)));
	TREE * extraState = [&R] (1,(((16,(4,(6,(3,((2,5),(13,(14,15))))))),(21,(23,(10,((7,8),(19,((9,(17,18)),(20,22)))))))),(11,12)));
	TREE * extraState = [&R] (1,((((16,(4,(6,(3,(2,5))))),(13,(14,15))),(23,(21,(10,((7,8),(19,((9,(17,18)),(20,22)))))))),(11,12)));
	TREE * extraState = [&R] (1,(((16,(4,(6,((2,5),(3,(13,(14,15))))))),((10,((7,8),(19,((9,(17,18)),(20,22))))),(21,23))),(11,12)));
	TREE * extraState = [&R] (1,(((16,(4,(6,((3,(2,5)),(13,(14,15)))))),((10,((7,8),(19,((9,(17,18)),(20,22))))),(21,23))),(11,12)));
	TREE * extraState = [&R] (1,(((16,((4,(6,(3,(2,5)))),(13,(14,15)))),(21,(23,(10,((7,8),(19,((9,(17,18)),(20,22)))))))),(11,12)));
	TREE * extraState = [&R] (1,(((16,(4,((6,(3,(2,5))),(13,(14,15))))),((10,((7,8),(19,((9,(17,18)),(20,22))))),(21,23))),(11,12)));
	TREE * extraState = [&R] (1,(((16,((6,(3,(2,5))),(4,(13,(14,15))))),((10,((7,8),(19,((9,(17,18)),(20,22))))),(21,23))),(11,12)));
	TREE * inapplicable = [&R] (1,((((16,(4,(6,(3,(5,2))))),(13,(14,15))),((23,10),(22,(20,(21,((9,(17,18)),(19,(7,8)))))))),(12,11)));
	TREE * inapplicable = [&R] (1,((((10,23),((20,(22,21)),((9,(18,17)),(19,(7,8))))),((16,(4,(6,(3,(2,5))))),(13,(14,15)))),(11,12)));
	TREE * inapplicable = [&R] (1,((((23,10),((20,((9,(18,17)),(19,(8,7)))),(22,21))),((16,(4,(6,(3,(5,2))))),(13,(14,15)))),(12,11)));
	TREE * inapplicable = [&R] (1,(((10,(23,((22,((9,(17,18)),(19,(8,7)))),(21,20)))),((13,(15,14)),(16,(4,(6,(3,(2,5))))))),(12,11)));
	TREE * inapplicable = [&R] (1,(((10,(23,((22,(20,21)),((19,(8,7)),(9,(17,18)))))),((16,(4,(6,(3,(2,5))))),(13,(15,14)))),(12,11)));
	TREE * inapplicable = [&R] (1,(((23,(10,(22,(21,(20,((9,(17,18)),(19,(8,7)))))))),((16,(4,(6,(3,(2,5))))),(13,(15,14)))),(12,11)));
	TREE * inapplicable = [&R] (1,((((16,(4,(6,(3,(5,2))))),(13,(14,15))),(23,(10,(20,(22,(21,((9,(18,17)),(19,(8,7))))))))),(11,12)));
	TREE * inapplicable = [&R] (1,((((13,(14,15)),(16,(4,(6,(3,(2,5)))))),(23,(10,(((20,(22,21)),(9,(18,17))),(19,(7,8)))))),(11,12)));
	TREE * inapplicable = [&R] (1,((((16,(4,(6,(3,(2,5))))),(13,(15,14))),(23,(10,((20,(21,22)),((9,(17,18)),(19,(7,8))))))),(12,11)));
	TREE * inapplicable = [&R] (1,((((16,(4,(6,(3,(2,5))))),(13,(15,14))),(23,(10,(((22,(20,21)),(9,(18,17))),(19,(8,7)))))),(11,12)));
	TREE * inapplicable = [&R] (1,((((13,(14,15)),(16,(4,(6,(3,(5,2)))))),((23,10),(21,(22,(20,((9,(17,18)),(19,(8,7)))))))),(11,12)));
	TREE * inapplicable = [&R] (1,((((10,23),((22,((19,(8,7)),(9,(17,18)))),(20,21))),((16,(4,(6,(3,(5,2))))),(13,(15,14)))),(11,12)));
	TREE * inapplicable = [&R] (1,((((16,(4,(6,(3,(2,5))))),(13,(14,15))),((23,10),(21,(20,(22,((19,(8,7)),(9,(17,18)))))))),(11,12)));
	TREE * inapplicable = [&R] (1,((((13,(15,14)),(16,(4,(6,(3,(2,5)))))),(10,(23,(22,(21,(20,((9,(18,17)),(19,(7,8))))))))),(11,12)));
	TREE * inapplicable = [&R] (1,((11,12),(((13,(14,15)),(16,(4,(6,(3,(5,2)))))),((10,((22,20),((9,(17,18)),(19,(8,7))))),(23,21)))));
	TREE * inapplicable = [&R] (1,((((16,(4,(6,(3,(5,2))))),(13,(14,15))),((23,10),(22,((21,20),((19,(7,8)),(9,(17,18))))))),(12,11)));
	TREE * inapplicable = [&R] (1,((((16,(4,(6,(3,(5,2))))),(13,(14,15))),(23,(10,((22,(20,21)),((9,(18,17)),(19,(7,8))))))),(11,12)));
	TREE * inapplicable = [&R] (1,(((23,(10,(21,((22,20),((9,(18,17)),(19,(7,8))))))),((16,(4,(6,(3,(5,2))))),(13,(15,14)))),(11,12)));
	TREE * inapplicable = [&R] (1,((((13,(15,14)),(16,(4,(6,(3,(2,5)))))),((10,(((22,20),(9,(17,18))),(19,(7,8)))),(23,21))),(12,11)));
	TREE * inapplicable = [&R] (1,((((13,(15,14)),(16,(4,(6,(3,(5,2)))))),((10,23),(20,(22,(21,((9,(18,17)),(19,(7,8)))))))),(11,12)));
	TREE * inapplicable = [&R] (1,((((16,(4,(6,(3,(2,5))))),(13,(15,14))),(10,(23,(21,((22,20),((19,(7,8)),(9,(17,18)))))))),(11,12)));
	TREE * inapplicable = [&R] (1,((((16,(4,(6,(3,(5,2))))),(13,(14,15))),(10,(23,((20,(21,22)),((9,(18,17)),(19,(8,7))))))),(11,12)));
	TREE * inapplicable = [&R] (1,(((23,(10,(21,(20,(22,((19,(8,7)),(9,(17,18)))))))),((16,(4,(6,(3,(5,2))))),(13,(15,14)))),(11,12)));
	TREE * inapplicable = [&R] (1,((((16,(4,(6,(3,(2,5))))),(13,(15,14))),((10,23),(20,(21,(22,((19,(7,8)),(9,(17,18)))))))),(12,11)));
	TREE * inapplicable = [&R] (1,((((16,(4,(6,(3,(2,5))))),(13,(15,14))),(10,(23,(20,(21,(22,((19,(7,8)),(9,(17,18))))))))),(11,12)));
	TREE * inapplicable = [&R] (1,((((13,(15,14)),(16,(4,(6,(3,(5,2)))))),(10,(23,(21,(22,(20,((9,(18,17)),(19,(7,8))))))))),(11,12)));
	TREE * inapplicable = [&R] (1,((((16,(4,(6,(3,(2,5))))),(13,(15,14))),(10,(23,(20,(22,(21,((19,(7,8)),(9,(17,18))))))))),(11,12)));
	TREE * inapplicable = [&R] (1,(((10,(23,(22,(((19,(7,8)),(9,(18,17))),(20,21))))),((16,(4,(6,(3,(5,2))))),(13,(14,15)))),(11,12)));
	TREE * inapplicable = [&R] (1,((((16,(4,(6,(3,(2,5))))),(13,(15,14))),(23,(10,(21,(22,(20,((9,(17,18)),(19,(7,8))))))))),(12,11)));
	TREE * inapplicable = [&R] (1,((((16,(4,(6,(3,(2,5))))),(13,(15,14))),((10,23),((22,(20,21)),((9,(17,18)),(19,(7,8)))))),(12,11)));
	TREE * inapplicable = [&R] (1,((12,11),((10,(23,((21,(22,20)),((9,(18,17)),(19,(8,7)))))),((16,(4,(6,(3,(5,2))))),(13,(14,15))))));
	TREE * inapplicable = [&R] (1,((((10,(22,(20,((9,(18,17)),(19,(8,7)))))),(21,23)),((16,(4,(6,(3,(5,2))))),(13,(14,15)))),(11,12)));
	TREE * inapplicable = [&R] (1,((((16,(4,(6,(3,(2,5))))),(13,(15,14))),((23,10),((21,((19,(7,8)),(9,(17,18)))),(20,22)))),(12,11)));
	TREE * inapplicable = [&R] (1,(((23,(10,(22,(20,(21,((9,(18,17)),(19,(7,8)))))))),((16,(4,(6,(3,(5,2))))),(13,(14,15)))),(12,11)));
	TREE * inapplicable = [&R] (1,((((16,(4,(6,(3,(5,2))))),(13,(14,15))),(23,(10,(20,(21,(22,((9,(18,17)),(19,(7,8))))))))),(11,12)));
	TREE * inapplicable = [&R] (1,((((13,(15,14)),(16,(4,(6,(3,(5,2)))))),(23,(10,((22,((9,(18,17)),(19,(7,8)))),(20,21))))),(11,12)));
	TREE * inapplicable = [&R] (1,((((16,(4,(6,(3,(5,2))))),(13,(14,15))),((23,10),(20,((21,22),((9,(18,17)),(19,(8,7))))))),(11,12)));
	TREE * inapplicable = [&R] (1,((((16,(4,(6,(3,(5,2))))),(13,(14,15))),((10,23),(21,((20,22),((9,(18,17)),(19,(8,7))))))),(11,12)));
	TREE * inapplicable = [&R] (1,(((10,(23,((20,22),(21,((9,(17,18)),(19,(7,8))))))),((16,(4,(6,(3,(5,2))))),(13,(14,15)))),(12,11)));
	TREE * inapplicable = [&R] (1,((((16,(4,(6,(3,(2,5))))),(13,(15,14))),(10,(23,((21,22),(20,((19,(7,8)),(9,(17,18)))))))),(12,11)));
	TREE * inapplicable = [&R] (1,((((16,(4,(6,(3,(2,5))))),(13,(15,14))),(10,(23,(20,((22,21),((19,(7,8)),(9,(17,18)))))))),(12,11)));
	TREE * inapplicable = [&R] (1,(((23,(10,(((21,(22,20)),(9,(17,18))),(19,(8,7))))),((16,(4,(6,(3,(5,2))))),(13,(15,14)))),(12,11)));
	TREE * inapplicable = [&R] (1,(((23,(10,(22,((20,21),((9,(17,18)),(19,(8,7))))))),((16,(4,(6,(3,(2,5))))),(13,(14,15)))),(11,12)));
	TREE * inapplicable = [&R] (1,((((16,(4,(6,(3,(2,5))))),(13,(15,14))),(10,(23,(21,(20,(22,((19,(7,8)),(9,(17,18))))))))),(12,11)));
	TREE * inapplicable = [&R] (1,(((23,(10,((20,22),(21,((9,(18,17)),(19,(8,7))))))),((16,(4,(6,(3,(5,2))))),(13,(14,15)))),(11,12)));
	TREE * inapplicable = [&R] (1,((11,12),(((16,(4,(6,(3,(5,2))))),(13,(15,14))),((10,23),(22,(21,(20,((9,(17,18)),(19,(8,7))))))))));
	TREE * inapplicable = [&R] (1,((((13,(14,15)),(16,(4,(6,(3,(5,2)))))),(23,(10,(20,((21,22),((19,(8,7)),(9,(17,18)))))))),(11,12)));
	TREE * inapplicable = [&R] (1,((((16,(4,(6,(3,(5,2))))),(13,(15,14))),((21,23),(10,(20,(22,((19,(7,8)),(9,(18,17)))))))),(12,11)));
	TREE * inapplicable = [&R] (1,((((16,(4,(6,(3,(5,2))))),(13,(15,14))),(23,(10,((22,21),(20,((9,(18,17)),(19,(7,8)))))))),(11,12)));
	TREE * inapplicable = [&R] (1,((((16,(4,(6,(3,(5,2))))),(13,(15,14))),(23,(10,(((9,(17,18)),(19,(8,7))),(21,(22,20)))))),(12,11)));
END;
