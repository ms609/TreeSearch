#NEXUS
begin data;
  dimensions ntax=52 nchar=58;
  format datatype=standard gap=x missing=? Interleave=no;
  matrix
    Sipunculus_nudus                10000000110110100-001000100--00-0000--00000-000000000000--
    Antillesoma_antillarum          010001020--1010-0-001010000--00-0000--00001001110110000201
    Apionsoma_misakianum            010000100--0--0-0-0010000110000-0000-100000-00000100200???
    Apionsoma_murinae               010000?10--0--0-0-0010000110000-0000-000000-00000??0200???
    Apionsoma_pectinatum            010001110--1?10-0-0010001110000-0000-000000-00000000200201
    Aspidosiphon_albus              000001010--0--0-100010??000--00-0000--00000-10200-2020020?
    Aspidosiphon_elegans            010001020--0--0-100010200111110-0000-001000-10100-20200200
    Aspidosiphon_gosnoldi           0100010?0--0--0-100010000111110-0000-010000-10100-20?0020?
    Aspidosiphon_gracilis           0100010?0--0--0-100010??0111100-0000-010000-10100-2010020?
    Aspidosiphon_misakiensis        010001020--0--0-100010000111110-0000-000000-10100-2010020?
    Aspidosiphon_muelleri           010001010--0--0-101010000111110-0000-010000-10100-20100200
    Aspidosiphon_fischeri           010001000--1010-100010000111110-0000-010000-10200-20100200
    Aspidosiphon_laevis             0100010?0--1?10-10101??10111100-0000-000000-10200-20100200
    Aspidosiphon_parvulus           0100010?0--1010-100010000111110-0000-010000-10200-2010020?
    Aspidosiphon_steenstrupii       010001010--1010-100010000111110-0000-010000-10200-20100200
    Cloeosiphon_aspergillus         010001010--0--0-0-0111--0111010-0000-100000-10100-2010020?
    Golfingia_elongata              100000010--0--0-0-0011--110-000-0000-000000-00?0001000020?
    Golfingia_margaritacea          100000010--0--0-0-0011--100--00-0000--00000-00000010000210
    Golfingia_vulgaris              100000000--0--0-0-0011--110-000-0000-000000-00000010?00210
    Lithacrosiphon_cristatus        010000020--1010-111010000111010-0000-000000-10100-2010020?
    Nephasoma_diaphanes             100000010--0--0-0-001???110-100-0000-000000-10100-?0000???
    Nephasoma_flagriferum           100000010--0--0-0-001000100--00-0000--00000-10100-101012??
    Nephasoma_pellucidum            100000010--0--0-0-0011--110-100-0000-000000-10100-10000210
    Onchnesoma_steenstrupii         000010020--0--0-0-000----00--00-0000--00100-10201-20200200
    Phascolion_gerardi              100011020--0--0-0-000----10-100-0000-000100-021002201001--
    Phascolion_cryptum              100110020--0--0-0-000----00--00-0000--00000-10201-201101--
    Phascolion_psammophilum         100010020--0--0-0-000----00--00-0000-000000-02200220100200
    Phascolion_strombus             100011020--0--0-0-000----10-100-0000-000000-02200220110210
    Phascolopsis_gouldi             100000020--1110-0-001000100--00-0000--00000-000000100002??
    Phascolosoma_capitatum          010001010--0--0-0-0010000110000-0100-000000-00110?20100201
    Phascolosoma_agassizii          010001010--1?10-0-001000011000?011010000010-00000?10100201
    Phascolosoma_albolineatum       010001010--1110-0-0010000110001011010100010-00000110100201
    Phascolosoma_granulatum         010001010--1010-0-001000011100?001010000000-00010110100201
    Phascolosoma_nigrescens         010001010--1110-0-001000011100?001010000010-000001101002??
    Phascolosoma_noduliferum        010001010--1010-0-0010000111000-01010000010-000001101002??
    Phascolosoma_perlucens          010001010--1010-0-0010000110001011010000010-00000110100201
    Phascolosoma_scolops            010001010--1010-0-001000011000?011010000010-000101101002??
    Phascolosoma_stephensoni        010001010--1110-0-0010000111001111110000010-0000011010020?
    Phascolosoma_tumerae            010001010--1110-0-0010000111000-00011?00000-00000120100201
    Siphonosoma_cumanense           1000000210-101110-001001000--00-0000--00001000000000000???
    Siphonosoma_vastum              1000010010-101110-0010010110000-0000-000000-00000000000???
    Sipunculus_norvegicus           10000000110100100-001000100--00-0000--00000-000000000000--
    Sipunculus_phalloldes           10000000110110100-001000100--00-0000--00000-000000000000--
    Sipunculus_polymyotus           10000001110120100-001000100--00-0000--00000-000000000000--
    Themiste_lagenlformes           101000010--0--0-0-001021100--00-0000--00001010100-20000202
    Themiste_minor                  101000010--0--0-0-001010110-100-0000-000001010000-10000202
    Themiste_dyscrita               101000020--0--0-0-001010100--00-0000--00001110000-2000020?
    Themiste_hennahi                101000020--0--0-0-001021100--00-0000--00001110000-1000020?
    Themiste_pyroides               101000020--0--0-0-001020110-100-0000-000001110000-2000020?
    Thysanocardia_catherinae        110100000--0--0-0-001010100--00-0000--00001010100-20100200
    Thysanocardia_nigra             110100020--0--0-0-001010100--00-0000--00001010100-?0100200
    Xenosiphon_branchiatus          10000002111110100-001000100--00-0000--00000-00000001000???
 ;                                                                     
end;  

BEGIN CHARACTERS;
  CHARLABELS
    [1]   'Peripheral tentacles'
    [2]   'Nuchal tentacles'
    [3]   'Branched tentacles'
    [4]   'Tentacles along introvert'
    [5]   'Nephridia'
    [6]   'Nephridial attachment'
    [7]   'Nephridial shape'
    [8]   'Position of nephridiopores'
    [9]   'Coelomic extensions in body wall'
    [10]  'Type of coelomic extensions'
    [11]  'Orientation of coelomic canals'
    [12]  'Longitudinal musculature'
    [13]  'Number of longitudinal muscle bands'
    [14]  'Longitudinal muscle bands'
    [15]  'Circular musculature'
    [16]  'Circular muscle bands'
    [17]  'Dorsal shield'
    [18]  'Shape of dorsal shield'
    [19]  'Grooves in dorsal shield'
    [20]  'Pineapple shield'
    [21]  'Spindle muscle'
    [22]  'Anterior attachment of spindle muscle'
    [23]  'Level of attachment on body wall'
    [24]  'Anterior roots of spindle muscle'
    [25]  'Posterior attachment of spindle muscle'
    [26]  'Hooks on introvert in adults'
    [27]  'Hooks in rings'
    [28]  'Number of rings of hooks'
    [29]  'Hook arrangement'
    [30]  'Bidentate hooks'
    [31]  'Secondary tooth on hook'
    [32]  'Shape of secondary tooth'
    [33]  'Hook interior: Anterior clear triangle'
    [34]  'Hook interior: Clear streak'
    [35]  'Hook interior: Crescent-shaped space'
    [36]  'Posterior basal structures'
    [37]  'Posterior basal structure type'
    [38]  'Angle of hook'
    [39]  'Pyramidal hooks'
    [40]  'Conical hooks'
    [41]  'Location of anus'
    [42]  'Pigmented introvert bands'
    [43]  'Contractile vessel villi'
    [44]  'Type of contractile vessel villi'
    [45]  'Introvert retractor muscles in adult'
    [46]  'Fusion of dorsal retractors'
    [47]  'Fusion in ventral retractors'
    [48]  'Fusion of dorsal and ventral retractors'
    [49]  'Retractor column'
    [50]  'Origin of dorsal retractor muscles'
    [51]  'Origin of ventral retractor muscles'
    [52]  'Protractor muscle'
    [53]  'Ratio of introvert/trunk length'
    [54]  'Holdfast papillae with hardened borders'
    [55]  'Caudal appendage'
    [56]  'Nuchal organ'
    [57]  'Number of nuchal patches'
    [58]  'Shape of nuchal patch'
  ;
  STATELABELS
    1
      'absent'
      'present'
    ,
    2
      'absent'
      'present'
    ,
    3
      'absent'
      'present'
    ,
    4
      'absent'
      'present'
    ,
    5
      'paired'
      'single'
    ,
    6
      'mostly unattached'
      'at least 50% attached'
    ,
    7
      'unilobed'
      'bilobed'
    ,
    8
      'anterior to anus'
      'same level as anus'
      'posterior to anus'
    ,
    9
      'absent'
      'present'
    ,
    10
      'sacs'
      'canals'
    ,
    11
      'longitudinal'
      'in bands'
    ,
    12
      'distinct'
      'anastomosing'
    ,
    13
      'commonly < 25'
      '25-40'
      '> 40'
    ,
    14
      'distinct'
      'anastomosing'
    ,
    15
      'continuous sheet'
      'in bands'
    ,
    16
      'distinct'
      'anastomosing'
    ,
    17
      'absent'
      'present'
    ,
    18
      'flat'
      'cone-shaped'
    ,
    19
      'absent'
      'present'
    ,
    20
      'absent'
      'present'
    ,
    21
      'absent'
      'present'
    ,
    22
      'body wall'
      'on rectum'
    ,
    23
      'anterior to anus'
      'same level as anus'
      'posterior to anus'
    ,
    24
      'one'
      'two or more'
    ,
    25
      'posterior body wall'
      'within gut coil'
    ,
    26
      'absent'
      'present'
    ,
    27
      'absent'
      'present'
    ,
    28
      '< 50'
      '> 50'
    ,
    29
      'some scattered'
      'entirely in rows'
    ,
    30
      'absent'
      'present'
    ,
    31
      'absent'
      'present'
    ,
    32
      'blunt'
      'pointed'
    ,
    33
      'absent'
      'present'
    ,
    34
      'absent'
      'present'
    ,
    35
      'absent'
      'present'
    ,
    36
      'absent'
      'present'
    ,
    37
      'warts'
      'rootlets'
    ,
    38
      '< 90%'
      '> 90%'
    ,
    39
      'absent'
      'present'
    ,
    40
      'absent'
      'present'
    ,
    41
      'on anterior trunk'
      'on introvert'
    ,
    42
      'absent'
      'present'
    ,
    43
      'absent'
      '1 present'
    ,
    44
      'digitiform'
      'elongate tubules '
    ,
    45
      'two pairs'
      'less than two pairs'
    ,
    46
      'not fused (< 10%)'
      'partially fused'
      'completely fused'
    ,
    47
      'not fused (< 10%)'
      'partially fused'
      'completely fused'
    ,
    48
      'absent'
      'present'
    ,
    49
      'absent'
      'present'
    ,
    50
      'anterior 1/3 of body'
      'middle 1/3 of body'
      'posterior 1/3 of body'
    ,
    51
      'anterior 1/3 of body'
      'middle 1/3 of body'
      'posterior 1/3 of body'
    ,
    52
      'absent'
      'present'
    ,
    53
      '< 0.75'
      '0.75-2'
      '> 2'
    ,
    54
      'absent'
      'present'
    ,
    55
      'absent'
      'present'
    ,
    56
      'pit'
      'ciliated band'
      'patch or patches'
    ,
    57
      'one'
      'two'
    ,
    58
      'triangular'
      'bilobed'
      'multi-lobed'
  ;
END;

BEGIN TAXA;
	DIMENSIONS NTAX = 52;
	TAXLABELS
		Sipunculus_nudus
		Antillesoma_antillarum
		Apionsoma_misakianum
		Apionsoma_murinae
		Apionsoma_pectinatum
		Aspidosiphon_albus
		Aspidosiphon_elegans
		Aspidosiphon_gosnoldi
		Aspidosiphon_gracilis
		Aspidosiphon_misakiensis
		Aspidosiphon_muelleri
		Aspidosiphon_fischeri
		Aspidosiphon_laevis
		Aspidosiphon_parvulus
		Aspidosiphon_steenstrupii
		Cloeosiphon_aspergillus
		Golfingia_elongata
		Golfingia_margaritacea
		Golfingia_vulgaris
		Lithacrosiphon_cristatus
		Nephasoma_diaphanes
		Nephasoma_flagriferum
		Nephasoma_pellucidum
		Onchnesoma_steenstrupii
		Phascolion_gerardi
		Phascolion_cryptum
		Phascolion_psammophilum
		Phascolion_strombus
		Phascolopsis_gouldi
		Phascolosoma_capitatum
		Phascolosoma_agassizii
		Phascolosoma_albolineatum
		Phascolosoma_granulatum
		Phascolosoma_nigrescens
		Phascolosoma_noduliferum
		Phascolosoma_perlucens
		Phascolosoma_scolops
		Phascolosoma_stephensoni
		Phascolosoma_tumerae
		Siphonosoma_cumanense
		Siphonosoma_vastum
		Sipunculus_norvegicus
		Sipunculus_phalloldes
		Sipunculus_polymyotus
		Themiste_lagenlformes
		Themiste_minor
		Themiste_dyscrita
		Themiste_hennahi
		Themiste_pyroides
		Thysanocardia_catherinae
		Thysanocardia_nigra
		Xenosiphon_branchiatus
	;
END;
BEGIN TREES;
	TRANSLATE
		1	Sipunculus_nudus,
		2	Antillesoma_antillarum,
		3	Apionsoma_misakianum,
		4	Apionsoma_murinae,
		5	Apionsoma_pectinatum,
		6	Aspidosiphon_albus,
		7	Aspidosiphon_elegans,
		8	Aspidosiphon_gosnoldi,
		9	Aspidosiphon_gracilis,
		10	Aspidosiphon_misakiensis,
		11	Aspidosiphon_muelleri,
		12	Aspidosiphon_fischeri,
		13	Aspidosiphon_laevis,
		14	Aspidosiphon_parvulus,
		15	Aspidosiphon_steenstrupii,
		16	Cloeosiphon_aspergillus,
		17	Golfingia_elongata,
		18	Golfingia_margaritacea,
		19	Golfingia_vulgaris,
		20	Lithacrosiphon_cristatus,
		21	Nephasoma_diaphanes,
		22	Nephasoma_flagriferum,
		23	Nephasoma_pellucidum,
		24	Onchnesoma_steenstrupii,
		25	Phascolion_gerardi,
		26	Phascolion_cryptum,
		27	Phascolion_psammophilum,
		28	Phascolion_strombus,
		29	Phascolopsis_gouldi,
		30	Phascolosoma_capitatum,
		31	Phascolosoma_agassizii,
		32	Phascolosoma_albolineatum,
		33	Phascolosoma_granulatum,
		34	Phascolosoma_nigrescens,
		35	Phascolosoma_noduliferum,
		36	Phascolosoma_perlucens,
		37	Phascolosoma_scolops,
		38	Phascolosoma_stephensoni,
		39	Phascolosoma_tumerae,
		40	Siphonosoma_cumanense,
		41	Siphonosoma_vastum,
		42	Sipunculus_norvegicus,
		43	Sipunculus_phalloldes,
		44	Sipunculus_polymyotus,
		45	Themiste_lagenlformes,
		46	Themiste_minor,
		47	Themiste_dyscrita,
		48	Themiste_hennahi,
		49	Themiste_pyroides,
		50	Thysanocardia_catherinae,
		51	Thysanocardia_nigra,
		52	Xenosiphon_branchiatus
	;
	TREE * ambiguous = [&R] (1,((52,((29,(18,(17,(19,(23,(21,(22,((6,((30,((39,((2,33),(34,(35,(38,(32,(36,(31,37)))))))),(5,(3,4)))),(16,((10,(7,(13,20))),(8,(9,(11,(15,(12,14))))))))),(((24,26),(27,(25,28))),((45,(46,(47,(48,49)))),(50,51))))))))))),(40,41))),(42,(43,44))));
	TREE * ambiguous = [&R] (1,(42,(43,(52,(44,((29,((22,((6,((30,((39,((2,33),((38,(31,(32,(36,37)))),(34,35)))),(5,(3,4)))),(16,((10,(7,(13,20))),(8,(11,(9,(12,(14,15))))))))),((((24,26),(27,(25,28))),(50,51)),(45,(46,(47,(48,49))))))),(18,((17,19),(21,23))))),(40,41)))))));
	TREE * ambiguous = [&R] (1,((52,(29,(((39,((33,(2,(30,(16,(20,(13,((6,((7,10),(8,(9,11)))),(12,(14,15))))))))),((38,(32,(31,(36,37)))),(34,35)))),(5,(3,4))),((17,(18,19)),(((21,23),(22,(((24,26),(27,(25,28))),(50,51)))),(46,(45,(47,(48,49))))))))),(43,(42,(44,(40,41))))));
	TREE * ambiguous = [&R] (1,(43,((52,(29,((18,((22,((6,((30,((39,((35,(2,33)),(34,(38,(32,(37,(31,36))))))),(5,(3,4)))),(16,(((7,10),(13,20)),(9,((8,11),(12,(14,15)))))))),(((24,26),(27,(25,28))),((45,(46,(47,(48,49)))),(50,51))))),(21,23))),(17,19)))),(44,(42,(40,41))))));
	TREE * ambiguous = [&R] (1,(43,(44,((52,(29,(((39,((33,(2,(30,(16,(((6,(14,(12,15))),(11,(8,9))),(10,(7,(13,20)))))))),((38,(31,(32,(36,37)))),(34,35)))),(5,(3,4))),((17,(23,(21,(22,(((24,26),(27,(25,28))),(((45,46),(47,(48,49))),(50,51))))))),(18,19))))),(42,(40,41))))));
	TREE * ambiguous = [&R] (1,(43,((52,(44,(29,(18,(19,((17,(22,((6,((30,((39,((34,(35,(2,33))),(38,(32,(37,(31,36)))))),(5,(3,4)))),(16,((10,(7,(13,20))),((11,(8,9)),(15,(12,14))))))),(((24,26),(27,(25,28))),(((45,46),(47,(48,49))),(50,51)))))),(21,23))))))),(42,(40,41)))));
	TREE * ambiguous = [&R] (1,(43,(52,((44,(29,(((39,((33,(2,(30,(16,(6,((10,(7,(13,20))),((11,(8,9)),(15,(12,14))))))))),(34,(35,(38,(32,(36,(31,37)))))))),(5,(3,4))),((17,(18,19)),(23,(21,(22,(((24,26),(27,(25,28))),((45,(46,(47,(48,49)))),(50,51)))))))))),(42,(40,41))))));
	TREE * ambiguous = [&R] (1,(43,(((29,((5,((39,(34,((35,(33,(2,(30,(16,((9,(8,(11,(6,(15,(12,14)))))),(7,(10,(13,20))))))))),(38,(32,(31,(36,37))))))),(3,4))),((17,((21,23),((22,(((24,26),(27,(25,28))),(50,51))),(45,(46,(48,(47,49))))))),(18,19)))),(44,52)),(42,(40,41)))));
	TREE * ambiguous = [&R] (1,((44,(52,((29,(18,(17,(19,(21,(23,(22,(((6,((30,((39,((2,33),(34,(35,(38,((31,32),(36,37))))))),(5,(3,4)))),(16,(((7,10),(13,20)),(11,(9,(8,(12,(14,15))))))))),((24,26),(27,(25,28)))),((45,(46,(47,(48,49)))),(50,51)))))))))),(40,41)))),(42,43)));
	TREE * ambiguous = [&R] (1,(43,(42,(44,(52,((29,((5,((39,((35,(33,(2,(30,(16,((8,((6,(14,(12,15))),(9,11))),((7,10),(13,20)))))))),(34,(38,(32,(36,(31,37))))))),(3,4))),((17,((21,23),(22,(((24,26),(27,(25,28))),(((45,46),(47,(48,49))),(50,51)))))),(18,19)))),(40,41)))))));
	TREE * ambiguous = [&R] (1,(((44,((5,((39,((33,(2,(30,(16,(6,((10,(7,(13,20))),((11,(8,9)),(12,(14,15))))))))),(34,(35,(38,(32,(31,(36,37)))))))),(3,4))),(29,((17,(18,19)),((21,23),(22,(((24,26),(27,(25,28))),(((45,46),(47,(48,49))),(50,51))))))))),(42,(40,41))),(43,52)));
	TREE * ambiguous = [&R] (1,(52,(44,(43,(42,((29,(((22,((6,((30,((39,((2,33),(35,(34,(38,(31,(32,(36,37)))))))),(5,(3,4)))),(16,((7,(10,(13,20))),((11,(8,9)),(12,(14,15))))))),(((24,26),(27,(25,28))),((46,(47,(49,(45,48)))),(50,51))))),(21,23)),(18,(17,19)))),(40,41)))))));
	TREE * ambiguous = [&R] (1,((52,(29,(((39,((33,(2,(30,(16,(20,(13,((6,((7,10),(11,(8,9)))),(14,(12,15))))))))),(34,(35,(38,(32,(37,(31,36)))))))),(5,(3,4))),(17,(18,(19,(23,(21,(22,(((24,26),(27,(25,28))),(((45,46),(47,(48,49))),(50,51)))))))))))),(43,(42,(44,(40,41))))));
	TREE * ambiguous = [&R] (1,(43,((52,(29,((22,((6,((30,((39,((2,33),(34,(35,(38,((31,32),(36,37))))))),(5,(3,4)))),(16,((7,(10,(13,20))),((8,(9,11)),(14,(12,15))))))),((((24,26),(27,(25,28))),(50,51)),(45,(46,(47,(48,49))))))),(17,((18,19),(21,23)))))),(42,(44,(40,41))))));
	TREE * ambiguous = [&R] (1,(((44,((5,((39,((33,(2,(30,(16,(6,((10,(7,(13,20))),((9,(8,11)),(15,(12,14))))))))),(34,(35,(38,(31,(32,(36,37)))))))),(3,4))),(29,(17,(18,(19,(21,(23,(22,(((24,26),(27,(25,28))),((45,(46,(47,(48,49)))),(50,51)))))))))))),(42,(40,41))),(43,52)));
	TREE * ambiguous = [&R] (1,((44,(43,(52,(29,((22,((6,((30,((39,((2,33),(35,(34,(38,(32,(37,(31,36)))))))),(5,(3,4)))),(16,(((7,10),(13,20)),(8,(9,(11,(15,(12,14))))))))),(((24,26),(27,(25,28))),(((45,46),(47,(48,49))),(50,51))))),(18,(17,(19,(21,23))))))))),(42,(40,41))));
	TREE * ambiguous = [&R] (1,((52,((29,(((39,((33,(2,(30,(16,((9,(8,(11,(6,(14,(12,15)))))),(7,(10,(13,20)))))))),((38,(32,(36,(31,37)))),(34,35)))),(5,(3,4))),(17,(18,(19,(23,(21,(22,(((24,26),(27,(25,28))),((46,(47,(49,(45,48)))),(50,51))))))))))),(40,41))),(44,(42,43))));
	TREE * ambiguous = [&R] (1,(43,(44,(52,(42,((29,(18,(17,(19,(23,(21,(22,((6,((30,((39,((2,33),(35,(34,(38,(32,(31,(36,37)))))))),(5,(3,4)))),(16,(((7,10),(13,20)),((8,(9,11)),(14,(12,15))))))),(((24,26),(27,(25,28))),((46,(47,(49,(45,48)))),(50,51))))))))))),(40,41)))))));
	TREE * ambiguous = [&R] (1,((42,((29,((((22,((6,((30,((39,((2,33),(35,(34,(38,(32,(37,(31,36)))))))),(5,(3,4)))),(16,(((7,10),(13,20)),(9,(8,(11,(12,(14,15))))))))),(((24,26),(27,(25,28))),(50,51)))),(45,(46,(48,(47,49))))),(21,23)),(18,(17,19)))),(40,41))),(43,(44,52))));
	TREE * ambiguous = [&R] (1,(43,(42,(((29,(((39,((33,(2,(30,(16,(((6,((14,(12,15)),(13,20))),(7,10)),(9,(8,11))))))),(35,(34,(38,(32,(31,(36,37)))))))),(5,(3,4))),((17,(18,19)),(23,(21,(22,(((24,26),(27,(25,28))),((45,(46,(47,(48,49)))),(50,51))))))))),(40,41)),(44,52)))));
	TREE * ambiguous = [&R] (1,(43,((44,(29,(18,(17,(19,(21,(23,(22,((6,((30,((39,((2,33),(34,(35,(38,(31,(32,(36,37)))))))),(5,(3,4)))),(16,(((7,10),(13,20)),((11,(8,9)),(15,(12,14))))))),(((24,26),(27,(25,28))),((46,(47,(49,(45,48)))),(50,51)))))))))))),(52,(42,(40,41))))));
	TREE * ambiguous = [&R] (1,(43,(52,((44,(29,((5,((39,((33,(2,(30,(16,(20,(11,(((6,(13,(15,(12,14)))),(8,9)),(7,10)))))))),((38,(31,(32,(36,37)))),(34,35)))),(3,4))),((17,(18,19)),((23,(21,(22,(((24,26),(27,(25,28))),(50,51))))),(46,(45,(47,(48,49))))))))),(42,(40,41))))));
	TREE * ambiguous = [&R] (1,((43,(52,(44,((5,((39,((33,(2,(30,(16,((6,(13,(14,(12,15)))),((7,(10,20)),(11,(8,9)))))))),(35,(34,(38,((31,32),(36,37))))))),(3,4))),(29,((18,(19,(17,(21,23)))),((22,(((24,26),(27,(25,28))),(50,51))),((45,46),(48,(47,49)))))))))),(42,(40,41))));
	TREE * ambiguous = [&R] (1,((43,(44,(52,((5,((39,((33,(2,(30,(16,(((6,((14,(12,15)),(13,20))),(7,10)),(11,(8,9))))))),((38,(32,(36,(31,37)))),(34,35)))),(3,4))),(29,(17,((18,19),(21,(23,(22,(((24,26),(27,(25,28))),((45,(46,(47,(48,49)))),(50,51))))))))))))),(42,(40,41))));
	TREE * ambiguous = [&R] (1,(44,((52,((29,((5,((39,((33,(2,(30,(16,(20,(13,((6,((7,10),(11,(8,9)))),(12,(14,15))))))))),((38,(32,(37,(31,36)))),(34,35)))),(3,4))),((17,(18,19)),((21,(23,(22,(((24,26),(27,(25,28))),(50,51))))),(46,(49,(47,(45,48)))))))),(40,41))),(42,43))));
	TREE * ambiguous = [&R] (1,((52,(29,(((39,((33,(2,(30,(16,((6,(11,(8,(9,(15,(12,14)))))),(7,(10,(13,20)))))))),((38,(32,(37,(31,36)))),(34,35)))),(5,(3,4))),((17,(18,19)),((21,23),(22,(((24,26),(27,(25,28))),((45,(46,(47,(48,49)))),(50,51))))))))),(43,(42,(44,(40,41))))));
	TREE * ambiguous = [&R] (1,(42,(43,(52,(44,((29,((18,((22,((6,((30,((39,((2,33),((38,(32,(36,(31,37)))),(34,35)))),(5,(3,4)))),(16,(((7,10),(13,20)),(11,((8,9),(15,(12,14)))))))),(((24,26),(27,(25,28))),(((45,46),(47,(48,49))),(50,51))))),(21,23))),(17,19))),(40,41)))))));
	TREE * ambiguous = [&R] (1,(43,((52,((29,((5,((39,((33,(2,(30,(16,((9,((6,(12,(14,15))),(8,11))),(10,(7,(13,20)))))))),(34,(35,(38,(32,(37,(31,36)))))))),(3,4))),(17,(18,(19,(23,(21,((22,(((24,26),(27,(25,28))),(50,51))),(45,(46,(48,(47,49)))))))))))),(40,41))),(42,44))));
	TREE * ambiguous = [&R] (1,((43,((29,(18,(19,(17,(23,(21,(22,((6,((30,((39,((35,(2,33)),(34,(38,(32,(36,(31,37))))))),(5,(3,4)))),(16,((10,(7,(13,20))),(9,(8,(11,(12,(14,15))))))))),(((24,26),(27,(25,28))),((46,(47,(49,(45,48)))),(50,51))))))))))),(44,52))),(42,(40,41))));
	TREE * ambiguous = [&R] (1,((43,(52,(29,((5,((39,((33,(2,(30,(16,(6,(((7,10),(13,20)),((11,(8,9)),(12,(14,15))))))))),(34,(35,(38,((31,32),(36,37))))))),(3,4))),((17,(18,19)),((21,23),(22,(((24,26),(27,(25,28))),((45,(46,(47,(48,49)))),(50,51)))))))))),(44,(42,(40,41)))));
	TREE * ambiguous = [&R] (1,((52,(43,(44,((5,((39,((33,(2,(30,(16,(((6,(15,(12,14))),(11,(8,9))),((7,10),(13,20))))))),((38,(31,(32,(36,37)))),(34,35)))),(3,4))),(29,((17,(19,(18,(21,23)))),((22,(((24,26),(27,(25,28))),(50,51))),((45,46),(48,(47,49)))))))))),(42,(40,41))));
	TREE * ambiguous = [&R] (1,((52,((29,(((39,((35,(33,(2,(30,(16,(6,(((7,10),(13,20)),((9,(8,11)),(12,(14,15)))))))))),(34,(38,(32,(36,(31,37))))))),(5,(3,4))),((17,(18,19)),(23,(21,(22,(((24,26),(27,(25,28))),(((45,46),(47,(48,49))),(50,51))))))))),(40,41))),(43,(42,44))));
	TREE * ambiguous = [&R] (1,((52,(29,(18,(19,(17,(23,(21,(22,((6,((30,((39,((2,33),((38,(32,(36,(31,37)))),(34,35)))),(5,(3,4)))),(16,((10,(7,(13,20))),(11,(9,(8,(14,(12,15))))))))),((((24,26),(27,(25,28))),(50,51)),(45,(46,(47,(48,49)))))))))))))),(44,(43,(42,(40,41))))));
	TREE * ambiguous = [&R] (1,((42,(52,((29,(((39,((33,(2,(30,(16,(20,(11,(((6,(13,(15,(12,14)))),(7,10)),(8,9)))))))),(34,(35,(38,(32,(37,(31,36)))))))),(5,(3,4))),(17,(19,(18,((21,23),(22,(((24,26),(27,(25,28))),(((45,46),(47,(48,49))),(50,51)))))))))),(40,41)))),(43,44)));
	TREE * ambiguous = [&R] (1,((52,((29,((22,((6,((30,((39,((2,33),((38,(32,(31,(36,37)))),(34,35)))),(5,(3,4)))),(16,((7,(10,(13,20))),(11,((8,9),(14,(12,15)))))))),(((24,26),(27,(25,28))),((45,(46,(47,(48,49)))),(50,51))))),(18,(17,(19,(21,23)))))),(40,41))),(43,(42,44))));
	TREE * ambiguous = [&R] (1,((43,(52,(44,(29,(((39,((33,(2,(30,(16,(((6,(13,(14,(12,15)))),(11,(8,9))),(10,(7,20))))))),(34,(35,(38,((31,32),(36,37))))))),(5,(3,4))),((17,(21,(23,(22,(((24,26),(27,(25,28))),(((45,46),(47,(48,49))),(50,51))))))),(18,19))))))),(42,(40,41))));
	TREE * ambiguous = [&R] (1,(43,(42,(52,(44,((29,((22,((6,((30,((39,((2,33),(35,(34,(38,(31,(32,(36,37)))))))),(5,(3,4)))),(16,((7,(10,(13,20))),(9,((8,11),(12,(14,15)))))))),(((24,26),(27,(25,28))),((46,(47,(49,(45,48)))),(50,51))))),(17,(18,(19,(21,23)))))),(40,41)))))));
	TREE * ambiguous = [&R] (1,(44,((52,((29,((5,((39,((33,(2,(30,(16,(20,(13,((6,((7,10),(8,(9,11)))),(14,(12,15))))))))),(35,(34,(38,(32,(36,(31,37)))))))),(3,4))),((17,(18,19)),((21,23),(22,(((24,26),(27,(25,28))),(((45,46),(47,(48,49))),(50,51)))))))),(40,41))),(42,43))));
	TREE * ambiguous = [&R] (1,(((44,(29,((22,((6,((30,((39,((2,33),(35,(34,(38,(32,(37,(31,36)))))))),(5,(3,4)))),(16,(((7,10),(13,20)),(8,(11,(9,(14,(12,15))))))))),(((24,26),(27,(25,28))),(((45,46),(47,(48,49))),(50,51))))),(18,(19,(17,(21,23))))))),(43,52)),(42,(40,41))));
	TREE * ambiguous = [&R] (1,((44,(43,(52,(29,(((39,(34,((35,(33,(2,(30,(16,(((6,7),((9,(8,11)),(15,(12,14)))),(10,(13,20)))))))),(38,(32,(36,(31,37))))))),(5,(3,4))),(17,(19,(18,((21,23),(22,(((24,26),(27,(25,28))),((46,(47,(49,(45,48)))),(50,51))))))))))))),(42,(40,41))));
	TREE * ambiguous = [&R] (1,((44,(52,((5,((39,((35,(33,(2,(30,(16,((8,(11,(9,(6,(14,(12,15)))))),(10,(7,(13,20))))))))),(34,(38,(32,(31,(36,37))))))),(3,4))),(29,((17,(18,19)),((21,23),((22,(((24,26),(27,(25,28))),(50,51))),(45,(46,(48,(47,49))))))))))),(43,(42,(40,41)))));
	TREE * ambiguous = [&R] (1,((52,(29,((5,((39,((33,(2,(30,(16,(((6,(13,(12,(14,15)))),(8,(9,11))),(10,(7,20))))))),(35,(34,(38,((31,32),(36,37))))))),(3,4))),((17,(18,19)),((21,23),(22,(((24,26),(27,(25,28))),((46,(47,(49,(45,48)))),(50,51))))))))),(43,(42,(44,(40,41))))));
	TREE * ambiguous = [&R] (1,(43,(42,(44,(52,((29,((5,((39,((33,(2,(30,(16,((9,(11,(8,(6,(15,(12,14)))))),((7,10),(13,20))))))),(35,(34,(38,(32,(36,(31,37)))))))),(3,4))),((17,(18,19)),((21,23),(22,(((24,26),(27,(25,28))),((45,(46,(47,(48,49)))),(50,51)))))))),(40,41)))))));
	TREE * ambiguous = [&R] (1,((52,(29,((5,((39,((35,(33,(2,(30,(16,(20,(11,((6,(13,(12,(14,15)))),(7,(10,(8,9))))))))))),(34,(38,((31,32),(36,37)))))),(3,4))),(17,(18,(19,((21,23),(22,(((24,26),(27,(25,28))),((45,(46,(47,(48,49)))),(50,51))))))))))),(43,(42,(44,(40,41))))));
	TREE * ambiguous = [&R] (1,(42,(43,(52,(44,((29,((18,((22,(((6,((30,((39,((2,33),(35,(34,(38,(31,(32,(36,37)))))))),(5,(3,4)))),(16,(((7,10),(13,20)),(11,(9,(8,(14,(12,15))))))))),((24,26),(27,(25,28)))),((45,(46,(47,(48,49)))),(50,51)))),(21,23))),(17,19))),(40,41)))))));
	TREE * ambiguous = [&R] (1,(42,(43,(52,(44,((29,(((39,((33,(2,(30,(16,((9,(11,(8,(6,(12,(14,15)))))),(7,(10,(13,20)))))))),((38,(31,(32,(36,37)))),(34,35)))),(5,(3,4))),(17,((18,19),((21,23),(22,(((24,26),(27,(25,28))),((46,(47,(49,(45,48)))),(50,51))))))))),(40,41)))))));
	TREE * ambiguous = [&R] (1,(42,((52,((29,(((39,((34,(35,(33,(2,(30,(16,(20,((6,(13,(14,(12,15)))),((7,10),(9,(8,11))))))))))),(38,(32,(31,(36,37)))))),(5,(3,4))),((17,(18,19)),(21,(23,(22,(((24,26),(27,(25,28))),(((45,46),(47,(48,49))),(50,51))))))))),(40,41))),(43,44))));
	TREE * ambiguous = [&R] (1,((52,(29,(18,(17,(19,(((22,((6,((30,((39,((2,33),((38,(32,(37,(31,36)))),(34,35)))),(5,(3,4)))),(16,((10,(7,(13,20))),(9,(8,(11,(14,(12,15))))))))),(((24,26),(27,(25,28))),(50,51)))),(45,(46,(48,(47,49))))),(21,23))))))),(43,(44,(42,(40,41))))));
	TREE * ambiguous = [&R] (1,((43,(52,(44,(29,(((39,((33,(2,(30,(16,(20,(((6,(13,(12,(14,15)))),(8,(9,11))),(7,10))))))),(34,(35,(38,(32,(37,(31,36)))))))),(5,(3,4))),((17,(18,19)),((21,23),(22,(((24,26),(27,(25,28))),((46,(47,(49,(45,48)))),(50,51))))))))))),(42,(40,41))));
	TREE * ambiguous = [&R] (1,(43,(((29,((5,((39,((35,(33,(2,(30,(16,(20,(11,((6,(13,(15,(12,14)))),((7,10),(8,9)))))))))),(34,(38,(32,(37,(31,36))))))),(3,4))),(17,((18,19),(23,(21,(22,(((24,26),(27,(25,28))),((45,(46,(47,(48,49)))),(50,51)))))))))),(44,52)),(42,(40,41)))));
	TREE * extraState = [&R] (1,(43,(44,(52,(42,((2,(29,((22,((6,(((30,(5,(3,4))),(39,(33,(35,(34,(38,(32,(31,(36,37))))))))),(16,((7,10),((11,(8,9)),(20,(13,(12,(14,15))))))))),(((24,26),(27,(25,28))),((47,((45,48),(46,49))),(50,51))))),(18,(19,(17,(21,23))))))),(40,41)))))));
	TREE * extraState = [&R] (1,(52,(43,(44,(42,((2,(29,((22,((6,((30,((5,(3,4)),(39,(34,((38,(32,(36,(31,37)))),(33,35)))))),(16,((7,10),(11,((8,9),(15,(14,(12,(13,20)))))))))),(((24,26),(27,(25,28))),(((47,(45,48)),(46,49)),(50,51))))),(18,(19,(17,(21,23))))))),(40,41)))))));
	TREE * extraState = [&R] (1,(44,(43,(42,(52,((29,((22,((((2,(50,51)),(45,((46,49),(47,48)))),((24,26),(27,(25,28)))),(6,(((30,(5,(3,4))),(39,(33,(35,(34,(38,(32,(36,(31,37))))))))),(16,((7,10),((9,(8,11)),((15,(12,14)),(13,20))))))))),(18,(17,(19,(21,23)))))),(40,41)))))));
	TREE * extraState = [&R] (1,(44,(43,(42,(52,((29,((22,((((2,(45,(47,(48,(46,49))))),(50,51)),((24,26),(27,(25,28)))),(6,((30,((5,(3,4)),(39,(33,(34,(35,(38,(32,(37,(31,36)))))))))),(16,((7,10),(8,(9,(11,((12,(14,15)),(13,20))))))))))),(18,(19,(17,(21,23)))))),(40,41)))))));
	TREE * extraState = [&R] (1,(52,(43,(((29,(2,((22,((6,(((30,(5,(3,4))),(39,(33,((38,(32,(37,(31,36)))),(34,35))))),(16,(((7,10),(20,(13,(12,(14,15))))),(11,(8,9)))))),(((24,26),(27,(25,28))),((45,(47,(48,(46,49)))),(50,51))))),(18,((17,19),(21,23)))))),(40,41)),(42,44)))));
	TREE * extraState = [&R] (1,(42,((52,((29,((22,((((2,((47,(45,48)),(46,49))),(50,51)),((24,26),(27,(25,28)))),(6,(((30,(5,(3,4))),(39,(35,((38,((31,32),(36,37))),(33,34))))),(16,((7,10),(11,(8,(9,((15,(12,14)),(13,20))))))))))),(18,(19,(17,(21,23)))))),(40,41))),(43,44))));
	TREE * extraState = [&R] (1,(44,((52,((2,(29,((22,((6,(((30,(5,(3,4))),(39,(33,(35,(34,(38,(31,(32,(36,37))))))))),(16,(((7,10),((14,(12,15)),(13,20))),(9,(8,11)))))),(((24,26),(27,(25,28))),((45,(48,(47,(46,49)))),(50,51))))),(18,((17,19),(21,23)))))),(40,41))),(42,43))));
	TREE * extraState = [&R] (1,(43,(42,(((29,((((2,(50,51)),(45,(47,(48,(46,49))))),((22,(6,(((30,(5,(3,4))),(39,((38,(32,(36,(31,37)))),(34,(33,35))))),(16,((7,10),(11,(8,(9,(14,((12,15),(13,20))))))))))),((24,26),(27,(25,28))))),(18,((17,19),(21,23))))),(40,41)),(44,52)))));
	TREE * extraState = [&R] (1,(43,(52,(44,(42,((29,(2,(((((22,(6,(((30,(5,(3,4))),(39,(33,(35,(34,(38,(32,(36,(31,37))))))))),(16,((7,10),(9,(8,(11,(20,(13,(12,(14,15)))))))))))),(50,51)),((24,26),(27,(25,28)))),((45,48),(47,(46,49)))),(18,(19,(17,(21,23))))))),(40,41)))))));
	TREE * extraState = [&R] (1,(44,(43,(42,(52,((29,((22,((((2,(47,((45,48),(46,49)))),(50,51)),((24,26),(27,(25,28)))),(6,((30,((5,(3,4)),(39,(35,((38,(32,(36,(31,37)))),(33,34)))))),(16,((7,10),(8,(9,(11,((15,(12,14)),(13,20))))))))))),(18,((17,19),(21,23))))),(40,41)))))));
	TREE * extraState = [&R] (1,(43,((52,((29,(2,((22,((6,((30,((5,(3,4)),(39,(34,((38,(31,(32,(36,37)))),(33,35)))))),(16,((7,(10,(20,(13,(14,(12,15)))))),(9,(8,11)))))),(((24,26),(27,(25,28))),(((47,(45,48)),(46,49)),(50,51))))),(18,(17,(19,(21,23))))))),(40,41))),(42,44))));
	TREE * extraState = [&R] (1,(44,((52,((29,((22,((((2,(45,((46,49),(47,48)))),(50,51)),((24,26),(27,(25,28)))),(6,(((30,(5,(3,4))),(39,(35,(34,(38,(32,(31,(36,(33,37))))))))),(16,(((7,10),((15,(12,14)),(13,20))),(9,(8,11)))))))),(18,((17,19),(21,23))))),(40,41))),(42,43))));
	TREE * extraState = [&R] (1,(52,(43,(44,(42,((29,(2,(((((22,(6,(((30,(5,(3,4))),(39,(35,(33,(34,(38,(32,(31,(36,37))))))))),(16,((7,10),(9,((8,11),((15,(12,14)),(13,20))))))))),(50,51)),((24,26),(27,(25,28)))),((45,48),(47,(46,49)))),(18,(19,(17,(21,23))))))),(40,41)))))));
	TREE * extraState = [&R] (1,(42,(43,(52,(44,((29,(2,((((22,(6,((30,((5,(3,4)),(39,(33,(35,(34,(38,(32,(37,(31,36)))))))))),(16,((7,10),(8,(9,(11,(20,(13,(15,(12,14)))))))))))),(((24,26),(27,(25,28))),(50,51))),((47,(45,48)),(46,49))),(18,(17,(19,(21,23))))))),(40,41)))))));
	TREE * extraState = [&R] (1,((52,((2,(29,((22,((6,((30,((5,(3,4)),(39,(33,(35,(34,(38,(32,(37,(31,36)))))))))),(16,((7,10),(11,(9,(8,(12,(15,(14,(13,20))))))))))),(((24,26),(27,(25,28))),(((47,(45,48)),(46,49)),(50,51))))),(18,(17,(19,(21,23))))))),(40,41))),(43,(42,44))));
	TREE * extraState = [&R] (1,(44,((42,(((2,29),((22,((6,((30,((5,(3,4)),(39,(35,(34,(33,(38,(32,(37,(31,36)))))))))),(16,((7,10),(11,(9,(8,(15,(12,(14,(13,20))))))))))),(((24,26),(27,(25,28))),((45,(48,(47,(46,49)))),(50,51))))),(18,(19,(17,(21,23)))))),(40,41))),(43,52))));
	TREE * extraState = [&R] (1,(43,((52,((29,((22,((((2,(45,((46,49),(47,48)))),(50,51)),((24,26),(27,(25,28)))),(6,((30,((5,(3,4)),(39,(35,((38,(31,(32,(36,37)))),(33,34)))))),(16,((7,10),((9,(8,11)),((15,(12,14)),(13,20))))))))),(18,(19,(17,(21,23)))))),(40,41))),(42,44))));
	TREE * extraState = [&R] (1,((52,((29,(2,(((((22,(6,(((30,(5,(3,4))),(39,(35,(34,(38,(32,((31,36),(33,37)))))))),(16,(((7,10),(9,(8,11))),((15,(12,14)),(13,20))))))),((24,26),(27,(25,28)))),(50,51)),((47,(45,48)),(46,49))),(18,(19,(17,(21,23))))))),(40,41))),(43,(42,44))));
	TREE * extraState = [&R] (1,(44,((52,((29,((22,((((2,(50,51)),((45,48),(47,(46,49)))),((24,26),(27,(25,28)))),(6,(((30,(5,(3,4))),(39,(35,(34,(38,((31,32),(36,(33,37)))))))),(16,((7,10),((11,(8,9)),(12,(14,(15,(13,20))))))))))),(18,(19,(17,(21,23)))))),(40,41))),(42,43))));
	TREE * extraState = [&R] (1,(43,(42,(((29,((((2,(50,51)),(47,((45,48),(46,49)))),((22,(6,((30,((5,(3,4)),(39,(33,(34,(35,(38,(32,(37,(31,36)))))))))),(16,(((7,10),(11,(8,9))),((15,(12,14)),(13,20))))))),((24,26),(27,(25,28))))),(18,((17,19),(21,23))))),(40,41)),(44,52)))));
	TREE * extraState = [&R] (1,(52,(43,(42,(44,(((2,29),((22,((6,(((30,(5,(3,4))),(39,(35,(34,(38,(32,((31,36),(33,37)))))))),(16,((7,10),(9,((8,11),(12,(14,(15,(13,20)))))))))),(((24,26),(27,(25,28))),((45,(48,(47,(46,49)))),(50,51))))),(18,((17,19),(21,23))))),(40,41)))))));
	TREE * extraState = [&R] (1,((42,((29,(2,((22,((6,((30,((5,(3,4)),(39,(35,(33,(34,(38,(32,(36,(31,37)))))))))),(16,((7,(10,(20,(13,(14,(12,15)))))),(9,(8,11)))))),(((24,26),(27,(25,28))),((45,(47,(48,(46,49)))),(50,51))))),(18,(17,(19,(21,23))))))),(40,41))),(43,(44,52))));
	TREE * extraState = [&R] (1,(42,(44,(43,(52,(((2,29),((22,((6,((30,((5,(3,4)),(39,(35,(34,(33,(38,(32,(37,(31,36)))))))))),(16,((7,10),(8,(11,(9,(15,(12,(14,(13,20))))))))))),(((24,26),(27,(25,28))),((45,(48,(47,(46,49)))),(50,51))))),(18,(19,(17,(21,23)))))),(40,41)))))));
	TREE * extraState = [&R] (1,(52,(43,(42,(44,((29,(2,(((((22,(6,((30,((5,(3,4)),(39,(33,(35,(34,(38,(32,(37,(31,36)))))))))),(16,((7,(10,(20,(13,(14,(12,15)))))),(8,(9,11))))))),((24,26),(27,(25,28)))),(50,51)),((47,(45,48)),(46,49))),(18,(19,(17,(21,23))))))),(40,41)))))));
	TREE * extraState = [&R] (1,(43,(42,(44,(52,((29,((22,((((2,(50,51)),(47,((45,48),(46,49)))),((24,26),(27,(25,28)))),(6,(((30,(5,(3,4))),(39,(35,(34,(38,(32,(31,(36,(33,37))))))))),(16,((7,10),(9,(11,(8,(14,((12,15),(13,20)))))))))))),(18,(19,(17,(21,23)))))),(40,41)))))));
	TREE * extraState = [&R] (1,(43,(42,(((29,((22,((((2,(45,((46,49),(47,48)))),(50,51)),((24,26),(27,(25,28)))),(6,(((30,(5,(3,4))),(39,(35,((38,(32,(37,(31,36)))),(33,34))))),(16,(((7,10),(8,(9,11))),((15,(12,14)),(13,20)))))))),(18,((17,19),(21,23))))),(40,41)),(44,52)))));
	TREE * extraState = [&R] (1,((52,((29,((((2,(50,51)),(45,(47,(48,(46,49))))),((22,(6,(((30,(5,(3,4))),(39,(35,((38,(32,(36,(31,37)))),(33,34))))),(16,((7,10),(8,((9,11),((15,(12,14)),(13,20))))))))),((24,26),(27,(25,28))))),(18,(19,(17,(21,23)))))),(40,41))),(43,(42,44))));
	TREE * extraState = [&R] (1,(43,(42,(((29,(2,((22,((6,((30,((5,(3,4)),(39,(35,((38,(32,(37,(31,36)))),(33,34)))))),(16,((7,(10,(20,(13,(15,(12,14)))))),(11,(8,9)))))),(((24,26),(27,(25,28))),((45,(48,(47,(46,49)))),(50,51))))),(18,(19,(17,(21,23))))))),(40,41)),(44,52)))));
	TREE * extraState = [&R] (1,(43,(44,(52,(42,((2,(29,((22,((6,(((30,(5,(3,4))),(39,(33,(35,(34,(38,(32,(36,(31,37))))))))),(16,((7,10),(9,(8,(11,(20,(13,(12,(14,15))))))))))),(((24,26),(27,(25,28))),(((47,(45,48)),(46,49)),(50,51))))),(18,((17,19),(21,23)))))),(40,41)))))));
	TREE * extraState = [&R] (1,(44,((52,((29,((22,((((2,(45,(47,(48,(46,49))))),(50,51)),((24,26),(27,(25,28)))),(6,(((30,(5,(3,4))),(39,(33,((38,(32,(37,(31,36)))),(34,35))))),(16,((7,10),(8,(9,(11,(20,(13,(12,(14,15))))))))))))),(18,((17,19),(21,23))))),(40,41))),(42,43))));
	TREE * extraState = [&R] (1,(43,(44,(42,(52,((29,((22,((((2,(45,(47,(48,(46,49))))),(50,51)),((24,26),(27,(25,28)))),(6,(((30,(5,(3,4))),(39,(33,(34,(35,(38,(31,(32,(36,37))))))))),(16,((7,10),(11,((8,9),(14,(12,(15,(13,20)))))))))))),(18,((17,19),(21,23))))),(40,41)))))));
	TREE * extraState = [&R] (1,(44,((52,((29,(2,(((((22,(6,((30,((5,(3,4)),(39,((38,(32,(37,(31,36)))),(34,(33,35)))))),(16,((7,10),((9,(8,11)),(14,(12,(15,(13,20)))))))))),(50,51)),((24,26),(27,(25,28)))),((47,(45,48)),(46,49))),(18,(19,(17,(21,23))))))),(40,41))),(42,43))));
	TREE * extraState = [&R] (1,((52,(((2,29),((22,((6,(((30,(5,(3,4))),(39,(33,(34,(35,(38,(32,(31,(36,37))))))))),(16,((7,10),(11,((8,9),(15,(12,(14,(13,20)))))))))),(((24,26),(27,(25,28))),(((45,48),(47,(46,49))),(50,51))))),(18,(17,(19,(21,23)))))),(40,41))),(44,(42,43))));
	TREE * extraState = [&R] (1,(42,((52,((29,(2,((((22,(6,((30,((5,(3,4)),(39,(35,(33,(34,(38,(32,(37,(31,36)))))))))),(16,((7,10),(9,(8,(11,(20,(13,(15,(12,14)))))))))))),(((24,26),(27,(25,28))),(50,51))),((45,48),(47,(46,49)))),(18,(19,(17,(21,23))))))),(40,41))),(43,44))));
	TREE * extraState = [&R] (1,(43,(42,(((29,(2,(((((22,(6,(((30,(5,(3,4))),(39,(34,((38,(31,(32,(36,37)))),(33,35))))),(16,((7,10),((9,(8,11)),(20,(13,(14,(12,15)))))))))),((24,26),(27,(25,28)))),(50,51)),(47,((45,48),(46,49)))),(18,((17,19),(21,23)))))),(40,41)),(44,52)))));
	TREE * extraState = [&R] (1,(43,(52,(42,(44,((2,(29,((22,((6,(((30,(5,(3,4))),(39,(34,((38,(31,(32,(36,37)))),(33,35))))),(16,(((7,10),(8,(9,11))),((14,(12,15)),(13,20)))))),(((24,26),(27,(25,28))),(((47,(45,48)),(46,49)),(50,51))))),(18,(17,(19,(21,23))))))),(40,41)))))));
	TREE * extraState = [&R] (1,(42,(43,(44,(52,(((2,29),((22,((6,((30,((5,(3,4)),(39,(35,(33,(34,(38,((31,32),(36,37))))))))),(16,((7,10),((8,(9,11)),(15,(14,(12,(13,20))))))))),(((24,26),(27,(25,28))),((45,((46,49),(47,48))),(50,51))))),(18,(17,(19,(21,23)))))),(40,41)))))));
	TREE * extraState = [&R] (1,((43,(52,(((2,29),((22,((6,(((30,(5,(3,4))),(39,(33,(35,(34,(38,(31,(32,(36,37))))))))),(16,((7,10),((9,(8,11)),(20,(13,(14,(12,15))))))))),(((24,26),(27,(25,28))),((45,(47,(48,(46,49)))),(50,51))))),(18,(19,(17,(21,23)))))),(40,41)))),(42,44)));
	TREE * extraState = [&R] (1,((52,((29,(2,(((((22,(6,((30,((5,(3,4)),(39,((34,(38,(32,(31,(36,37))))),(33,35))))),(16,((7,10),((8,9),(11,(15,(14,(12,(13,20))))))))))),((24,26),(27,(25,28)))),(50,51)),((47,(45,48)),(46,49))),(18,(17,(19,(21,23))))))),(40,41))),(43,(42,44))));
	TREE * extraState = [&R] (1,((((29,((22,((((2,((45,48),(47,(46,49)))),(50,51)),((24,26),(27,(25,28)))),(6,(((30,(5,(3,4))),(39,((38,(32,(36,(31,37)))),(34,(33,35))))),(16,((7,10),(11,(8,(9,(14,(12,(15,(13,20))))))))))))),(18,(19,(17,(21,23)))))),(40,41)),(44,52)),(42,43)));
	TREE * extraState = [&R] (1,(42,(43,(52,(44,((29,((22,((((2,(50,51)),(45,((46,49),(47,48)))),((24,26),(27,(25,28)))),(6,(((30,(5,(3,4))),(39,(34,((38,(32,(31,(36,37)))),(33,35))))),(16,(((7,10),(11,(8,9))),((14,(12,15)),(13,20)))))))),(18,(19,(17,(21,23)))))),(40,41)))))));
	TREE * extraState = [&R] (1,(42,((52,((29,((22,((((2,((47,(45,48)),(46,49))),(50,51)),((24,26),(27,(25,28)))),(6,((30,((5,(3,4)),(39,(33,(35,(34,(38,(32,(37,(31,36)))))))))),(16,((7,(10,(20,(13,(14,(12,15)))))),(8,(9,11)))))))),(18,(19,(17,(21,23)))))),(40,41))),(43,44))));
	TREE * extraState = [&R] (1,(43,(42,(((29,((22,((((2,((47,(45,48)),(46,49))),(50,51)),((24,26),(27,(25,28)))),(6,((30,((5,(3,4)),(39,((38,(32,(36,(31,37)))),(34,(33,35)))))),(16,((7,10),(9,(11,(8,(12,(15,(14,(13,20))))))))))))),(18,(19,(17,(21,23)))))),(40,41)),(44,52)))));
	TREE * extraState = [&R] (1,((((29,(2,(((((22,(6,(((30,(5,(3,4))),(39,(35,(34,(38,(31,(32,(36,(33,37))))))))),(16,((7,10),(9,(8,(11,(14,((12,15),(13,20))))))))))),((24,26),(27,(25,28)))),(50,51)),(47,((45,48),(46,49)))),(18,((17,19),(21,23)))))),(40,41)),(42,44)),(43,52)));
	TREE * extraState = [&R] (1,((52,((29,((22,((((2,(47,((45,48),(46,49)))),(50,51)),((24,26),(27,(25,28)))),(6,((30,((5,(3,4)),(39,(35,(34,(33,(38,(32,(36,(31,37)))))))))),(16,((7,10),((8,9),(11,(20,(13,(14,(12,15)))))))))))),(18,(17,(19,(21,23)))))),(40,41))),(42,(43,44))));
	TREE * extraState = [&R] (1,(44,(42,(43,(52,(((2,29),((22,((6,((30,((5,(3,4)),(39,(35,(34,(38,(32,(31,(36,(33,37)))))))))),(16,((7,10),(11,((8,9),((14,(12,15)),(13,20)))))))),(((24,26),(27,(25,28))),((45,(48,(47,(46,49)))),(50,51))))),(18,(19,(17,(21,23)))))),(40,41)))))));
	TREE * extraState = [&R] (1,((52,((29,(2,((22,((6,(((30,(5,(3,4))),(39,(34,((38,(32,(31,(36,37)))),(33,35))))),(16,((7,10),((8,9),(11,(20,(13,(12,(14,15)))))))))),(((24,26),(27,(25,28))),((45,((46,49),(47,48))),(50,51))))),(18,(19,(17,(21,23))))))),(40,41))),(44,(42,43))));
	TREE * extraState = [&R] (1,(42,(44,(43,(52,((29,(2,(((((22,(6,(((30,(5,(3,4))),(39,(35,(34,(38,(32,(36,(31,(33,37))))))))),(16,((7,10),(11,(9,(8,(14,(15,(12,(13,20)))))))))))),(50,51)),((24,26),(27,(25,28)))),(47,((45,48),(46,49)))),(18,(19,(17,(21,23))))))),(40,41)))))));
	TREE * extraState = [&R] (1,(42,(43,(52,(44,((29,((22,((((2,((45,48),(47,(46,49)))),(50,51)),((24,26),(27,(25,28)))),(6,((30,((5,(3,4)),(39,(33,(34,(35,(38,(31,(32,(36,37)))))))))),(16,(((7,10),(11,(20,(13,(15,(12,14)))))),(8,9))))))),(18,((17,19),(21,23))))),(40,41)))))));
	TREE * extraState = [&R] (1,(42,((52,((29,((((2,(50,51)),(45,(48,(47,(46,49))))),((22,(6,(((30,(5,(3,4))),(39,((34,(38,(31,(32,(36,37))))),(33,35)))),(16,((7,10),(8,(11,(9,(14,(15,(12,(13,20)))))))))))),((24,26),(27,(25,28))))),(18,(17,(19,(21,23)))))),(40,41))),(43,44))));
	TREE * inapplicable = [&R] (1,((44,43),(52,(42,(40,(41,(((5,(4,3)),(((16,(20,(((6,13),(15,(14,12))),((10,7),(8,(9,11)))))),(2,30)),(39,(33,(35,(34,(38,(31,(32,(36,37)))))))))),(29,((17,(19,18)),((21,22),(23,((46,(47,(49,(45,48)))),((50,51),((24,26),(27,(25,28))))))))))))))));
	TREE * inapplicable = [&R] (1,(43,(44,(42,(52,(29,(40,(41,((5,(4,3)),(2,(30,((39,(33,(35,(34,(38,(31,(32,(37,36)))))))),(16,(20,(((13,(6,((((46,(49,(47,(48,45)))),(50,51)),(22,(23,(21,(17,(18,19)))))),(25,(28,(27,(24,26))))))),(15,(12,14))),((7,10),(9,(11,8))))))))))))))))));
	TREE * inapplicable = [&R] (1,(44,((43,52),(42,(40,(41,((29,((21,(22,(23,(((51,50),(46,(49,(47,(45,48))))),((27,(28,25)),(24,26)))))),(17,(18,19)))),(5,((3,4),(((16,(20,(((13,6),(14,(12,15))),((8,(11,9)),(7,10))))),(2,30)),(39,(33,(35,(34,(38,((31,32),(37,36)))))))))))))))));
	TREE * inapplicable = [&R] (1,(42,(43,((52,44),(29,(40,(41,(5,(((30,2),((16,(20,((13,(14,(15,12))),(((6,((((46,(49,(47,(48,45)))),(51,50)),((28,(27,25)),(24,26))),(22,(21,(23,(18,(19,17))))))),(11,(8,9))),(7,10))))),(39,(33,(35,(34,(38,((32,31),(36,37))))))))),(4,3))))))))));
	TREE * inapplicable = [&R] (1,((43,(44,42)),(52,(29,(40,(41,(2,((30,((16,(20,((((8,11),(10,7)),(9,(6,((((46,(49,(47,(45,48)))),(50,51)),(25,(28,(27,(26,24))))),(22,(21,(23,(18,(17,19))))))))),(13,(15,(12,14)))))),(39,(33,(35,(34,(38,((31,32),(37,36))))))))),(5,(3,4))))))))));
	TREE * inapplicable = [&R] (1,(((44,42),(40,(41,((29,((17,(18,19)),((21,(23,(22,(((27,(25,28)),(24,26)),(50,51))))),(46,(49,(47,(48,45))))))),((5,(((16,(20,(((12,(15,14)),(13,6)),((8,(11,9)),(10,7))))),(39,(33,(35,(34,(38,(32,(37,(31,36))))))))),(30,2))),(4,3)))))),(43,52)));
	TREE * inapplicable = [&R] (1,((43,44),(52,(42,(40,(41,(((5,(4,3)),(2,(30,((16,(20,(((13,6),(14,(15,12))),((11,(9,8)),(10,7))))),(39,(33,(35,(34,(38,(32,(37,(31,36)))))))))))),(29,((17,(18,19)),((23,(22,21)),(((50,51),((27,(28,25)),(24,26))),(46,(47,(49,(45,48)))))))))))))));
	TREE * inapplicable = [&R] (1,(43,(44,(52,(42,(40,(41,((29,((17,((18,19),(23,21))),(22,(((51,50),(46,(49,(47,(48,45))))),((27,(25,28)),(24,26)))))),(5,((3,4),(((2,30),(16,(20,(((10,7),(11,(8,9))),((14,(15,12)),(6,13)))))),(39,(33,(35,(34,(38,(32,(37,(36,31)))))))))))))))))));
	TREE * inapplicable = [&R] (1,(43,(42,(44,(52,(29,(40,(41,((5,(4,3)),(((16,(20,((13,(12,(15,14))),(((11,(9,8)),(10,7)),(6,((((51,50),(46,(49,(47,(48,45))))),(25,(28,(27,(26,24))))),(22,((23,21),(18,(17,19)))))))))),(30,2)),(39,(33,(35,(34,(38,((31,32),(37,36)))))))))))))))));
	TREE * inapplicable = [&R] (1,(44,((52,43),(42,(40,(41,(((5,((30,2),((16,(20,(((10,7),(8,(9,11))),((13,6),(14,(15,12)))))),(39,(33,(35,(34,(38,(31,(32,(36,37))))))))))),(4,3)),(29,((17,(19,18)),(22,(21,(23,((((26,24),(27,(25,28))),(51,50)),(46,(49,(47,(48,45)))))))))))))))));
	TREE * inapplicable = [&R] (1,(52,(43,((44,42),(40,(41,(((5,(((16,(20,(((10,7),(11,(8,9))),((6,13),(12,(14,15)))))),(2,30)),(39,(33,(35,(34,(38,(32,(37,(36,31)))))))))),(4,3)),(29,((17,(19,18)),((21,(23,22)),(((50,51),((27,(28,25)),(24,26))),(46,(49,(47,(48,45)))))))))))))));
	TREE * inapplicable = [&R] (1,((43,42),(44,(52,(29,(40,(41,((2,(30,((16,(20,((((9,(6,((((46,(47,(49,(45,48)))),(50,51)),(25,(28,(27,(26,24))))),(22,(23,(21,(19,(17,18)))))))),(10,7)),(8,11)),(13,(12,(14,15)))))),(39,(33,(35,(34,(38,((31,32),(37,36)))))))))),(5,(3,4))))))))));
	TREE * inapplicable = [&R] (1,(43,(52,(42,(44,(40,(41,(((5,(3,4)),(2,(30,((16,(20,(((7,10),(11,(9,8))),((13,6),(12,(14,15)))))),(39,(33,(35,(34,(38,(32,(31,(36,37)))))))))))),(29,((17,(19,18)),(23,(21,(22,(((51,50),(46,(49,(47,(48,45))))),((28,(25,27)),(24,26))))))))))))))));
	TREE * inapplicable = [&R] (1,(44,((43,52),(42,(40,(41,(((5,(4,3)),(((16,(20,(((12,(15,14)),(6,13)),((10,7),(8,(9,11)))))),(2,30)),(39,(33,(35,(34,(38,((32,31),(36,37))))))))),(29,((17,(19,18)),(23,((22,21),((46,(47,(49,(45,48)))),(((24,26),(27,(28,25))),(50,51))))))))))))));
	TREE * inapplicable = [&R] (1,(52,(43,(42,(44,(40,(41,((5,((4,3),(((16,(20,(((14,(15,12)),(6,13)),((11,(8,9)),(7,10))))),(39,(33,(35,(34,(38,((31,32),(37,36)))))))),(30,2)))),(29,((17,(18,19)),((22,23),(21,((46,(49,(47,(45,48)))),(((26,24),(27,(25,28))),(51,50)))))))))))))));
	TREE * inapplicable = [&R] (1,(52,(43,((44,42),(40,(41,((29,((21,(22,(23,(((50,51),((24,26),(27,(28,25)))),(46,(47,(49,(48,45)))))))),(17,(18,19)))),((5,(((16,(20,(((7,10),(9,(8,11))),((12,(15,14)),(6,13))))),(2,30)),(39,(33,(35,(34,(38,(32,(37,(31,36)))))))))),(3,4)))))))));
	TREE * inapplicable = [&R] (1,((43,(44,52)),(42,(40,(41,(((5,(3,4)),(((16,(20,(((11,(9,8)),(10,7)),((6,13),(12,(14,15)))))),(30,2)),(39,(33,(35,(34,(38,((36,37),(31,32))))))))),(29,((17,(18,19)),((21,(23,(22,(((27,(25,28)),(24,26)),(51,50))))),(46,(47,(49,(48,45)))))))))))));
	TREE * inapplicable = [&R] (1,(52,(43,(42,(44,(40,((41,((5,(4,3)),((2,30),((39,(33,(35,(34,(38,(32,(31,(37,36)))))))),(16,(20,(((6,13),(14,(12,15))),((11,(8,9)),(7,10))))))))),(29,((17,(18,19)),(23,(22,(21,(((51,50),((27,(25,28)),(26,24))),(46,(49,(47,(48,45)))))))))))))))));
	TREE * inapplicable = [&R] (1,((43,44),(52,(42,(40,(41,((29,((17,(18,19)),((22,(21,23)),(((50,51),((27,(25,28)),(24,26))),(46,(45,(49,(48,47)))))))),(5,((((16,(20,(((13,6),(14,(12,15))),((10,7),(11,(8,9)))))),(2,30)),(39,(33,(35,(34,(38,(32,(37,(31,36))))))))),(4,3))))))))));
	TREE * inapplicable = [&R] (1,(43,(52,(42,(44,(40,((29,((17,(18,19)),(21,(22,(23,(((51,50),(46,(49,(47,(48,45))))),((24,26),(27,(25,28))))))))),(41,((5,(3,4)),(2,(30,((16,(20,(((13,6),(14,(12,15))),((7,10),(11,(8,9)))))),(39,(33,(35,(34,(38,((31,32),(36,37)))))))))))))))))));
	TREE * inapplicable = [&R] (1,(43,(44,(42,(52,(29,(40,(41,((5,(4,3)),((30,2),((39,(33,(35,(34,(38,(32,(31,(36,37)))))))),(16,(20,(((10,7),(9,(11,8))),((13,(6,(((22,(21,(23,(19,(17,18))))),((46,(49,(47,(45,48)))),(51,50))),((25,28),(27,(26,24)))))),(14,(15,12)))))))))))))))));
	TREE * inapplicable = [&R] (1,(44,(52,(43,(42,((41,40),((29,((17,(18,19)),((22,(((46,(49,(47,(45,48)))),(51,50)),((28,(25,27)),(24,26)))),(21,23)))),(5,((((16,(20,(((10,7),(9,(11,8))),((12,(14,15)),(6,13))))),(39,(33,(35,(34,(38,((31,32),(37,36)))))))),(2,30)),(3,4))))))))));
	TREE * inapplicable = [&R] (1,(44,((52,43),(42,(40,(41,(((5,(4,3)),(2,(30,((16,(20,(((13,6),(15,(14,12))),((10,7),(11,(8,9)))))),(39,(33,(35,(34,(38,(32,(37,(31,36)))))))))))),(29,((17,(18,19)),(22,(21,(23,(((50,51),((26,24),(27,(25,28)))),(46,(47,(49,(45,48)))))))))))))))));
	TREE * inapplicable = [&R] (1,(52,(43,(42,(44,((40,41),((29,((17,(19,18)),(22,(23,(21,(((51,50),((27,(28,25)),(26,24))),(46,(45,(49,(47,48)))))))))),(5,((3,4),(((16,(20,(((7,10),(8,(11,9))),((6,13),(15,(14,12)))))),(30,2)),(39,(33,(35,(34,(38,(32,(31,(37,36))))))))))))))))));
	TREE * inapplicable = [&R] (1,(52,(43,(42,(44,(40,(41,(((5,(((16,(20,(((15,(14,12)),(6,13)),((9,(8,11)),(10,7))))),(39,(33,(35,(34,(38,(31,(32,(37,36))))))))),(30,2))),(3,4)),(29,((17,(19,18)),(23,(22,(21,(((51,50),((24,26),(27,(25,28)))),(46,(49,(47,(48,45))))))))))))))))));
	TREE * inapplicable = [&R] (1,(44,(52,(43,(42,(40,(41,(((5,(4,3)),(((16,(20,(((13,6),(14,(12,15))),((7,10),(9,(11,8)))))),(2,30)),(39,(33,(35,(34,(38,(32,(31,(37,36)))))))))),(29,((17,(19,18)),(21,((23,22),(((51,50),((27,(25,28)),(24,26))),(46,(49,(47,(48,45)))))))))))))))));
	TREE * inapplicable = [&R] (1,((52,44),(43,(42,(40,(41,(((((16,(20,(((14,(15,12)),(13,6)),((10,7),(8,(9,11)))))),(39,(33,(35,(34,(38,((31,32),(37,36)))))))),(30,2)),(5,(3,4))),(29,((17,(19,18)),(23,((22,21),(((50,51),((27,(28,25)),(26,24))),(46,(47,(49,(48,45))))))))))))))));
	TREE * inapplicable = [&R] (1,((43,52),(44,(42,(40,(41,((5,((((2,30),(16,(20,(((13,6),(15,(12,14))),((7,10),(11,(9,8))))))),(39,(33,(35,(34,(38,((32,31),(37,36)))))))),(3,4))),(29,((17,(19,18)),(22,((21,23),(((51,50),((27,(25,28)),(24,26))),(46,(49,(47,(48,45))))))))))))))));
	TREE * inapplicable = [&R] (1,((44,(43,42)),(52,(29,(40,(41,(5,((((16,(20,((((6,((((46,(49,(47,(45,48)))),(50,51)),(25,(28,(27,(24,26))))),(22,((23,21),(18,(19,17)))))),(7,10)),(9,(11,8))),(13,(14,(15,12)))))),(2,30)),(39,(33,(35,(34,(38,(32,(31,(37,36))))))))),(3,4)))))))));
	TREE * inapplicable = [&R] (1,((52,43),(42,(44,(40,((41,((5,(4,3)),(((16,(20,(((10,7),(9,(11,8))),((6,13),(14,(12,15)))))),(39,(33,(35,(34,(38,(32,(31,(37,36))))))))),(2,30)))),(29,((17,(19,18)),((23,22),(21,((46,(49,(47,(45,48)))),((50,51),((24,26),(27,(25,28)))))))))))))));
	TREE * inapplicable = [&R] (1,((43,52),(42,(44,((40,41),((29,((17,(18,19)),(21,((23,22),(((50,51),((27,(28,25)),(26,24))),(46,(49,(47,(45,48))))))))),(5,((4,3),(((16,(20,(((7,10),(11,(9,8))),((13,6),(15,(12,14)))))),(39,(33,(35,(34,(38,(32,(36,(37,31))))))))),(30,2))))))))));
	TREE * inapplicable = [&R] (1,((52,43),(42,(44,(40,((41,((5,(4,3)),(((16,(20,(((10,7),(9,(11,8))),((6,13),(14,(15,12)))))),(39,(33,(35,(34,(38,((31,32),(37,36)))))))),(2,30)))),(29,((17,(19,18)),((23,22),(21,((46,(47,(49,(45,48)))),((50,51),((24,26),(27,(25,28)))))))))))))));
	TREE * inapplicable = [&R] (1,((43,(44,52)),(42,((40,41),((5,((3,4),(((16,(20,(((13,6),(12,(14,15))),((7,10),(8,(9,11)))))),(39,(33,(35,(34,(38,(32,(31,(37,36))))))))),(2,30)))),(29,((17,(18,19)),(23,(((45,(46,(49,(47,48)))),(((27,(25,28)),(24,26)),(51,50))),(22,21))))))))));
	TREE * inapplicable = [&R] (1,(52,(44,(43,(42,(40,(41,((29,((17,(19,18)),((21,(22,23)),(46,((49,(47,(48,45))),((50,51),((27,(28,25)),(24,26)))))))),((5,(4,3)),(2,(30,((16,(20,(((6,13),(15,(12,14))),((11,(8,9)),(7,10))))),(39,(33,(35,(34,(38,(32,(37,(31,36))))))))))))))))))));
	TREE * inapplicable = [&R] (1,(43,(44,(52,(42,(40,(41,(((5,(4,3)),(((16,(20,(((6,13),(15,(12,14))),((10,7),(9,(8,11)))))),(30,2)),(39,(33,(35,(34,(38,(31,(32,(36,37)))))))))),(29,((17,(19,18)),(((23,21),(22,(((27,(28,25)),(26,24)),(50,51)))),(46,(49,(47,(45,48)))))))))))))));
	TREE * inapplicable = [&R] (1,(52,(43,(42,(44,(40,((29,((17,(19,18)),(23,(21,(22,(((50,51),(46,(49,(47,(48,45))))),((27,(26,24)),(28,25)))))))),(41,((5,(4,3)),((2,30),((16,(20,(((6,13),(14,(15,12))),((10,7),(11,(9,8)))))),(39,(33,(35,(34,(38,((32,31),(37,36))))))))))))))))));
	TREE * inapplicable = [&R] (1,(43,(52,(42,(44,(40,((41,((5,(3,4)),(((16,(20,(((10,7),(8,(9,11))),((6,13),(15,(14,12)))))),(30,2)),(39,(33,(35,(34,(38,(32,(36,(31,37))))))))))),(29,((17,(19,18)),(23,(21,(22,(((50,51),(46,(49,(47,(48,45))))),((28,(25,27)),(26,24)))))))))))))));
	TREE * inapplicable = [&R] (1,((52,44),(43,(42,(40,(41,(((5,(4,3)),(((2,30),(16,(20,(((6,13),(15,(12,14))),((10,7),(8,(9,11))))))),(39,(33,(35,(34,(38,(32,(36,(31,37)))))))))),(29,((17,(19,18)),((23,(22,21)),(((46,(49,(47,(45,48)))),(50,51)),((24,26),(27,(28,25))))))))))))));
	TREE * inapplicable = [&R] (1,((44,(52,(29,(40,(41,(5,((3,4),(((16,(20,(((15,(12,14)),(13,(6,((((46,(49,(47,(45,48)))),(51,50)),(22,((21,23),(17,(19,18))))),(25,(28,(27,(26,24)))))))),((9,(8,11)),(10,7))))),(39,(33,(35,(34,(38,(31,(32,(37,36))))))))),(30,2))))))))),(43,42)));
	TREE * inapplicable = [&R] (1,(44,(43,(42,(52,(29,(40,(41,((5,(4,3)),(((16,(20,((13,(14,(15,12))),(((7,10),(9,(8,11))),(6,((((51,50),((26,24),(27,(25,28)))),(46,(49,(47,(45,48))))),(22,(21,(23,(17,(18,19))))))))))),(39,(33,(35,(34,(38,(32,(36,(31,37))))))))),(2,30)))))))))));
	TREE * inapplicable = [&R] (1,(52,(43,(44,(42,(40,(41,(((5,((39,(33,(35,(34,(38,(32,(36,(31,37)))))))),((16,(20,(((13,6),(15,(12,14))),((7,10),(8,(9,11)))))),(30,2)))),(4,3)),(29,((17,(19,18)),(23,(21,(22,(((50,51),(46,(49,(47,(45,48))))),((27,(26,24)),(25,28))))))))))))))));
	TREE * inapplicable = [&R] (1,((44,(52,43)),(42,(40,(41,((5,((4,3),(((16,(20,(((11,(8,9)),(10,7)),((6,13),(12,(15,14)))))),(2,30)),(39,(33,(35,(34,(38,(32,(31,(37,36))))))))))),(29,((17,(19,18)),((23,(((51,50),(46,(49,(47,(48,45))))),((26,24),(27,(25,28))))),(22,21))))))))));
	TREE * inapplicable = [&R] (1,(44,(43,(52,(42,(40,(41,(((5,(4,3)),(((16,(20,(((14,(15,12)),(13,6)),((7,10),(9,(8,11)))))),(39,(33,(35,(34,(38,(32,(37,(31,36))))))))),(30,2))),(29,((17,(18,19)),(((23,21),(22,((50,51),((24,26),(27,(25,28)))))),(46,(47,(49,(45,48)))))))))))))));
	TREE * inapplicable = [&R] (1,(43,(52,(42,(44,(40,(41,((29,((17,(19,18)),((23,(21,(22,(((26,24),(27,(25,28))),(51,50))))),(46,(47,(49,(45,48))))))),((5,(4,3)),(((16,(20,(((9,(11,8)),(10,7)),((14,(12,15)),(6,13))))),(39,(33,(35,(34,(38,(32,(37,(31,36))))))))),(30,2)))))))))));
	TREE * inapplicable = [&R] (1,((52,43),(42,(44,(40,(41,(((5,((39,(33,(35,(34,(38,(32,(31,(36,37)))))))),((16,(20,(((6,13),(12,(14,15))),((9,(11,8)),(10,7))))),(2,30)))),(4,3)),(29,((17,(18,19)),(22,(21,(23,(((50,51),((27,(25,28)),(24,26))),(46,(47,(49,(48,45)))))))))))))))));
	TREE * inapplicable = [&R] (1,(52,(43,(42,(44,((41,40),((5,((3,4),(((16,(20,(((14,(12,15)),(13,6)),((8,(11,9)),(10,7))))),(39,(33,(35,(34,(38,(31,(32,(37,36))))))))),(2,30)))),(29,((17,(18,19)),((21,(23,(22,((51,50),((26,24),(27,(28,25))))))),(46,(47,(49,(48,45))))))))))))));
	TREE * inapplicable = [&R] (1,(43,((44,42),(52,(29,(40,(41,(2,((5,(4,3)),(30,((16,(20,((((11,(8,9)),(7,10)),(6,((((51,50),(46,(47,(49,(45,48))))),(25,(28,(27,(26,24))))),(22,(21,(23,(17,(19,18)))))))),(13,(14,(15,12)))))),(39,(33,(35,(34,(38,(32,(36,(37,31)))))))))))))))))));
	TREE * inapplicable = [&R] (1,(43,(52,(44,(42,(40,(41,(((2,(30,((16,(20,(((13,6),(12,(14,15))),((10,7),(9,(11,8)))))),(39,(33,(35,(34,(38,((31,32),(37,36)))))))))),(5,(4,3))),(29,((17,(19,18)),((23,(22,21)),(46,(((51,50),((27,(25,28)),(26,24))),(49,(47,(45,48))))))))))))))));
	TREE * inapplicable = [&R] (1,(43,(44,(52,(42,(40,(41,(((5,(4,3)),(((16,(20,(((12,(14,15)),(6,13)),((10,7),(9,(8,11)))))),(39,(33,(35,(34,(38,((32,31),(37,36)))))))),(30,2))),(29,((17,(18,19)),(23,(22,(21,((((27,(28,25)),(26,24)),(50,51)),(46,(49,(47,(45,48))))))))))))))))));
	TREE * inapplicable = [&R] (1,((43,52),(44,(42,(40,(41,(((5,(3,4)),((2,30),((16,(20,(((13,6),(15,(12,14))),((7,10),(8,(9,11)))))),(39,(33,(35,(34,(38,(32,(37,(36,31))))))))))),(29,((17,(19,18)),(21,(23,(22,(((51,50),(46,(49,(47,(48,45))))),((28,(25,27)),(24,26)))))))))))))));
END;
