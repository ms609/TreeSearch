#NEXUS
BEGIN data;
  DIMENSIONS NTAX=61 NCHAR=165;
  FORMAT DATATYPE=Standard SYMBOLS= "01234569" MISSING=? GAP= -;
	MATRIX
    Amphisopus_annectans                  200002202400-202200002040023-520-30---02020302--222320220000022222030002002223033011-2330013300003-12000220023002302223402202020-330422200300000024223300220000222222
    Amphisopus_lintoni                    200002202400-202200000040023-520-30---02020322--2223202200000020?2040002032233033011-2330013300003-12020220023002302203302202020-330422200303000024223300220000222222
    Colubotelson_fontinalis               000002202300-223020023000324022-200-2203020202--222300222002003002020002005323033211-2000310300002023-1000000?20230200?002202222-33002023-000003024200300222000222222
    Colubotelson_joyneri                  002002222200-222020020000324022-200-220302020?--022320222002?03002020202003323?33211-2000310300002022020000022202302000002202222-33000023-000003024204000422220222222
    Colubotelson_searli                   002202222400-22?02002000032402?--00-220302020?--0??320??2?02?03002020?0???3332?33211-2000310000002022020000022221302000002202222-33002023-0000?3024204000222000222222
    Colubotelson_sp._1                    000002202400-222020023000324022-200-2203020202--222320222002003002020002003323033211-2000210300002022020000002202302200002202222-33000023-000003023200300222000222222
    Colubotelson_sp._2                    000002202400-220020022000324022-200-2203020202--02230022000200300202000200??23?33211-2000310300002022020000020202302200002202222-33000023-000003022200300422000222222
    Crenisopus_acinifer                   022222202400-202020002002425-----00-3300220---222223022000000022020000020?542302220232330013320323-13-10002200202300003002202222-330000202200003004223200222000222222
    Crenoicus_buntiae                     020002002300-22302000?000324020-300-3203020202--022300??0?02003000020002202220023211-2302013000002022020000002221302203002202222-33020022-402003022200200422000222222
    Crenoicus_harrisoni                   020002002300-22?02000?0?032402?--00-3?03020202--022300??0?02?030000200020?3222020211-2302313000002022020-00002221302203002202222-33020022-4020?3022200200222000222222
    Crenoicus_n.sp.                       020002002300-22302000?000324020-300-3203020202--02230022000200300202000-105423022211-2302313000002022020000002221-?2203002202222-33020022-402003022200200?22020222222
    Eophreatoicus_sp._4                   000002?02400-22222000?032423-402-00-222302?302--2223??220000002022040002035223022211-2300210000300002200000023002022223?00002222-300020202000000024023300222002222222
    Eophreatoicus_sp._6                   000002?02400-222220000032423-402-00-2223020302--222320220300002220040002035423?22211-230021000030220220000002300202220?000002222-300020202000000024023300222002222222
    Eremisopus_beei                       000002202300-202200020002423-420-00-0202020302--2003202200000022220200022353?3023211-2300213000303-13-10000023002222003002232020-300020202000000023203300222000222222
    Gariwerdeus_beehivensis               000202202300-22402002200032420--000-330?220---00222300220002003002020002003323033?11-2300013000003-13-10000002200302203002202222-33000023-200003023200300422220222222
    Gariwerdeus_ingletonensis             000202202300-22402002200032420--000-3300220---23222300220002003002020002033323033011-20300103000022022000000022003022030022022?2-33002023-000003225200300422220222222
    Gariwerdeus_turretensis               000202202300-22402002300032420--000-3300220---002223?0220002003002020002005423223211-2320010000002022020000002200302203002202222-33002023-000003232200300422220222222
    Hyperoedesipus_plumosus               ?2002222242202040222422-3-02-------2----020500--22232022000000200202000-2354230?3011-2330313300023-120200022032213000034?04020200332020002200002000023000422220222222
    Hypsimetopus_intrusor                 02002?????22020?022?0???0405------------0?0???---11?2022??0??0??000??00????????3?011-?3?0??????????????2--??0????30?????20?2?????3300?00???0?2?3?2??0?0002??0?0222222
    Kalliapseudes_obtusifrons             1-1112000-???00?022???003-?5-----0?-----0000?2---1102?????03-25?020??20????????-3?11-?330?133---0??????2--??0????3----1?-4-342?2-3320202----?--3--0020?00?22??0000020
    Mesacanthotelson_setosus              000002202300-222020020000025-----00-0003020202--222300222002?030?2020002005323233211-2030210300002022020000002200302233402202222-33002023-000003023200?00222000222222
    Mesacanthotelson_tasmaniae            000002202?00-22?022023000025-----00-0003020202--2??3?0??2?0??030020?000???5223?33211-20003103000000000200000032213022?3002202222-33002023-0000?3023200300222000222222
    Mesamphisopus_abbreviatus             000002002?00-222020000002405-----00---02?2?502022??3????0?000023??02200????233?33011-2??001?3?000???20200?002?20230?????02232020-3300?02020?00?00?4023300?22000222222
    Mesamphisopus_capensis                000002002400-222020000002405-----00---02?00502022223?2??0?00002322020000033223033211-222001200000202202000002320230200?002232020-330000202000000024023300222000222222
    Mesamphisopus_n.sp.                   020002002400-222020000002405-----00---0?020502--2??300??0?000023220200?-1-3?23?33211-2220012?0000??????0000023002302000002232020-330020?02000000024022300222000222222
    Metaphreatoicus_affinis               000002202300-222020022000324022-200-22030?0202--222320222002003002020002035323033211-2000210300003-13-10000002202302223002202222-33002023-000003024200300222000222222
    Metaphreatoicus_australis             000002202300-223020022000324022-200-220?020202--222300220002003002020002005323023211-2?00310300002002000000022200302022002202222-33002023-000003023200300222000222222
    Metaphreatoicus_lacustris             000002202300-222020023000324022-200-2203020202--222300220002003?020?0002005323023211-2000310300002002000000022200302023002202222-33002023-000003023200300222000222222
    Metaphreatoicus_magistri              000002202300-223020023000324022-200-2203020202--222300022002003002030002003323033211-20302103000020220200000?2200302022002202222-33000023-000003024200300?22000222222
    Metaphreatoicus_sp.                   000002202300-223020023000324022-200-2203020202--02?320??2?0?0030020200020?5323033211-200031030000202200000002?200302023402202222-33002023-0000?3023200300222000222222
    Naiopegia_xiphagrostis                000002202300-222020002000324020-000-2203220---22200300220002003002020002002223033011-2300013000003-13-10000002200302203002202222-33002023-000003224200300422220222222
    Neophreatoicus_assimilis              0?200300??00-20?0200??0?002??????00---0?020202---11322??0?220033??020??????????2?22032302????0??0??????0000??????3022??002?04222-3300?003-00?20302300?000?22??0222222
    Nichollsia_kashiense                  002020220422?2020222022-3-02-------2----020022---22?2022000002232204000-1-2233?33011-2300013000323-13-12--2203221300003422402222-3320202022002020400?4022422220222222
    Notamphisopus_dunedinensis            020002202?00-2?202002?000?24022-200-220?020?0?--2??3?0????0??03?0?02000-???????23211-030231300000??????00000022003020???022?222??33002003-2000?3024200200422220222222
    Notamphisopus_flavius                 020002202300-223020020000324030-200-220202020?--0223202200020030020?000-003323023211-0302313000003-13-1000000220030200?402222222-33002003-000003024200?00?22220222222
    Onchotelson_brevicaudatus             000002202300-222020033000325-----00-0002020022--2003?0223002003002020002005323233211-2030310300003-13-10000002221302223402202222-33000003-000000022200300222220222222
    Onchotelson_spatulatus                000002202300-223020033000325-----00-0002020002--20??2022300200300?020002005323233211-2030310300003-13-10000002221302203402202222-33000003-000000022200300222220222222
    Paramphisopus_palustris               202222222400-200020000020023-520-00-220?020302--220320220000002322040002035223033211-2300313300000022002--0023202322023303202000-330000200303000022023200222000222222
    Paraphreatoicus_relictus              000002202300-222020022000324022-200-2203020202--0223002220020030020?0002003323033211-203021030000200200000000220230222?0022?2222-33000023-0000?3023200300222000222222
    Peludo_paraliotus                     000002200400-225020022000423-0-2-02---00020302--200320220200002222020002033303233011-2300013000003-13-12--00230212022233000222?2-230320302000000040000300422220222222
    Phreatoicoides_gracilis               02002020242222020222022-3-05-------0----020502--2223202200000020020200022?54330330?2?2330013300023-1--12--2202221302003420402222-332020002300202000004?22402220222222
    Phreatoicoides_sp._A                  02002220042222220222232-3-05-------0----020502--022320????000020020?0002235323033011-2330013300023-12022--2202221302203?22402222-332020002300203000004322302220222222
    Phreatoicoides_sp._B                  02002320042202000222022-3-05-------0----020502--0223202200000020020300020353230330?232330013300223-12022--2202221302203?20402222-33202000230?203020000300222000222222
    Phreatoicoides_sp._Zeehan             022022222422020?0222002-0305------------020402---11320??0?02?022?202000???5403?2300202330013022323-12022--22022213020004?0402222-3320200023030?2000000002202220222222
    Phreatoicopsis_raffae                 200002200000-2020200032-2405-------2----000302--2223202002002040-204222022543302222032300303022323-13-12--2200002302203300000222-22002023-220020023003300222000222222
    Phreatoicopsis_terricola              200002200000-2020200032-2405-------2----000302--2223202002002040-20422202254330222203230030302232??????2--2203002302?03300000222-22002023-220020023003300222000222222
    Phreatoicus_orarii                    022203202?00-22202200?0?0425-----00-3203020202---11320??0?22?03002240???????23?23211-23020130000???????000??0?221302203002302222-33000023-00?0?3022200000222000222222
    Phreatoicus_typicus                   022203202200-222022000003-25-----00-3203020202--022320??0?22?032022400022?2220223211-2302013000003-13-10-00002221300203002202222-33002003-000003022004000222000222222
    Phreatomerus_latipes                  200002222400-202020002042?23-520-00-220?020302--222320220000002222040002030?23223211-2330313300003-12022--0023002222203202302000-330400200303000025003200222000222222
    Pilbarophreatoicus_n.sp.              20222020042202020222022-3-02-------2----020500---223202200000022?2040?0-1-332322200202330023300300020022--00032213000034224042?2-33200000230?203020023000422220222222
    Pilbarophreatoicus_platyarthricus     0?022?20?42202020222022-3-02-------2----020500---22320?????00022?20??00???5423?2?00202330????0?303-1???2--000322130?003?22404222-3320200????320302002?200422220222222
    Platypyga_subpetrae                   200002202400-222020003000420-----22-----020322--2223202200000022220200022?3223023211-2320010300?020020000?00230023022030022020302330020202200003022023200222000222222
    Protamphisopus_wianamattensis         0???0?00??00-20?0200??0?0?05-----30---000?000?--2???202??????????????????????????0???????0?????????????2--??2?0??32???????????????????????????230???0?300?22??2?2?22?
    Qld._nsp.1                            000022202400-203020000002405-----20-----023502--22230002000020232200300-03502303300022330013300023-13-1002?023202322200?20203222-332020202200203025023300022000222222
    Qld._nsp.2                            020022202400-203020000002420-----20-----023502--22230222?0?0??????00000-035?23023200223320133?0023-13-10022222221322200?20200222-330020202?00003025223300222000222222
    Spelaeogriphus_lepidops               1-1112000-???00?022???003-?5-----0?-----0000?2---1102?????00020?020??20????????33?11-?330?133-0-???????2--??0????3-0003?-4-340?0-3320202----?--3--0022?20?22??0000000
    Stenasellus_virei                     ?????200?4???00?02????003-?5-----0?-----0200?2--2??020????03-200020???????2????33211-?030?103---0??????2--000????3---03?04-042?2-332--02----?--3--0020300?22??0222222
    Synamphisopus_ambiguus                200002202000-222220002002420-----20-----000322--2223202203002040-202022023332322322?32030210000320020020002020002302203302200222-3300202023200000?4223300222000222222
    Synamphisopus_doegi                   200002202000-222220002002420-----20-----000302--2223202203002040-2000220233323023211-2320210300323-120200020200023022023022002?2-330020202320000023223300222000222222
    Tainisopus_fontinalis                 ?2200200?4???00?02????003-?5-----0?-----0000?2--2??220????000200020???????4????33211-?030?103---0??????2--000????3---03?04-200?0-00002030220?0?3--0022000?22??0222222
    Uramphisopus_pearsoni                 000002202400-222020020000325-----00-2004020202--222320222?02003002020002005423223211-2030210300002222220000002221302223402202222-33000023-000000023200300222000222222
  ;
END;

BEGIN TAXA;
	DIMENSIONS NTAX = 61;
	TAXLABELS
		Amphisopus_annectans
		Amphisopus_lintoni
		Colubotelson_fontinalis
		Colubotelson_joyneri
		Colubotelson_searli
		Colubotelson_sp._1
		Colubotelson_sp._2
		Crenisopus_acinifer
		Crenoicus_buntiae
		Crenoicus_harrisoni
		Crenoicus_n.sp.
		Eophreatoicus_sp._4
		Eophreatoicus_sp._6
		Eremisopus_beei
		Gariwerdeus_beehivensis
		Gariwerdeus_ingletonensis
		Gariwerdeus_turretensis
		Hyperoedesipus_plumosus
		Hypsimetopus_intrusor
		Kalliapseudes_obtusifrons
		Mesacanthotelson_setosus
		Mesacanthotelson_tasmaniae
		Mesamphisopus_abbreviatus
		Mesamphisopus_capensis
		Mesamphisopus_n.sp.
		Metaphreatoicus_affinis
		Metaphreatoicus_australis
		Metaphreatoicus_lacustris
		Metaphreatoicus_magistri
		Metaphreatoicus_sp.
		Naiopegia_xiphagrostis
		Neophreatoicus_assimilis
		Nichollsia_kashiense
		Notamphisopus_dunedinensis
		Notamphisopus_flavius
		Onchotelson_brevicaudatus
		Onchotelson_spatulatus
		Paramphisopus_palustris
		Paraphreatoicus_relictus
		Peludo_paraliotus
		Phreatoicoides_gracilis
		Phreatoicoides_sp._A
		Phreatoicoides_sp._B
		Phreatoicoides_sp._Zeehan
		Phreatoicopsis_raffae
		Phreatoicopsis_terricola
		Phreatoicus_orarii
		Phreatoicus_typicus
		Phreatomerus_latipes
		Pilbarophreatoicus_n.sp.
		Pilbarophreatoicus_platyarthricus
		Platypyga_subpetrae
		Protamphisopus_wianamattensis
		Qld._nsp.1
		Qld._nsp.2
		Spelaeogriphus_lepidops
		Stenasellus_virei
		Synamphisopus_ambiguus
		Synamphisopus_doegi
		Tainisopus_fontinalis
		Uramphisopus_pearsoni
	;
END;
BEGIN TREES;
	TRANSLATE
		1	Amphisopus_annectans,
		2	Amphisopus_lintoni,
		3	Colubotelson_fontinalis,
		4	Colubotelson_joyneri,
		5	Colubotelson_searli,
		6	Colubotelson_sp._1,
		7	Colubotelson_sp._2,
		8	Crenisopus_acinifer,
		9	Crenoicus_buntiae,
		10	Crenoicus_harrisoni,
		11	Crenoicus_n.sp.,
		12	Eophreatoicus_sp._4,
		13	Eophreatoicus_sp._6,
		14	Eremisopus_beei,
		15	Gariwerdeus_beehivensis,
		16	Gariwerdeus_ingletonensis,
		17	Gariwerdeus_turretensis,
		18	Hyperoedesipus_plumosus,
		19	Hypsimetopus_intrusor,
		20	Kalliapseudes_obtusifrons,
		21	Mesacanthotelson_setosus,
		22	Mesacanthotelson_tasmaniae,
		23	Mesamphisopus_abbreviatus,
		24	Mesamphisopus_capensis,
		25	Mesamphisopus_n.sp.,
		26	Metaphreatoicus_affinis,
		27	Metaphreatoicus_australis,
		28	Metaphreatoicus_lacustris,
		29	Metaphreatoicus_magistri,
		30	Metaphreatoicus_sp.,
		31	Naiopegia_xiphagrostis,
		32	Neophreatoicus_assimilis,
		33	Nichollsia_kashiense,
		34	Notamphisopus_dunedinensis,
		35	Notamphisopus_flavius,
		36	Onchotelson_brevicaudatus,
		37	Onchotelson_spatulatus,
		38	Paramphisopus_palustris,
		39	Paraphreatoicus_relictus,
		40	Peludo_paraliotus,
		41	Phreatoicoides_gracilis,
		42	Phreatoicoides_sp._A,
		43	Phreatoicoides_sp._B,
		44	Phreatoicoides_sp._Zeehan,
		45	Phreatoicopsis_raffae,
		46	Phreatoicopsis_terricola,
		47	Phreatoicus_orarii,
		48	Phreatoicus_typicus,
		49	Phreatomerus_latipes,
		50	Pilbarophreatoicus_n.sp.,
		51	Pilbarophreatoicus_platyarthricus,
		52	Platypyga_subpetrae,
		53	Protamphisopus_wianamattensis,
		54	Qld._nsp.1,
		55	Qld._nsp.2,
		56	Spelaeogriphus_lepidops,
		57	Stenasellus_virei,
		58	Synamphisopus_ambiguus,
		59	Synamphisopus_doegi,
		60	Tainisopus_fontinalis,
		61	Uramphisopus_pearsoni
	;
	TREE * ambiguous = [&R] (1,(2,((((40,((26,((39,(29,(3,((22,(21,(61,(36,37)))),(30,(27,28)))))),(6,(7,(4,5))))),((((9,(10,11)),(32,(47,48))),(34,35)),(31,(15,(16,17)))))),((((8,(((18,(33,(50,51))),(44,(41,(42,(19,43))))),((20,56),(57,60)))),(54,55)),((53,(45,46)),(58,59))),(14,(12,13)))),(52,(25,(23,24)))),(38,49))));
	TREE * ambiguous = [&R] (1,(2,((((40,((26,((39,((29,(3,(30,(27,28)))),((21,22),(61,(36,37))))),(6,(7,(4,5))))),((((11,(9,10)),(32,(47,48))),(34,35)),(31,(15,(16,17)))))),((((8,(((18,(33,(50,51))),(44,(41,(42,(19,43))))),((20,56),(57,60)))),(54,55)),((53,(45,46)),(58,59))),(14,(12,13)))),(52,(25,(23,24)))),(38,49))));
	TREE * ambiguous = [&R] (1,(2,((52,(((40,((26,((39,(29,(3,((22,(21,(61,(36,37)))),(30,(27,28)))))),(6,(7,(4,5))))),((((11,(9,10)),(32,(47,48))),(34,35)),(31,(15,(16,17)))))),((((8,(((18,(41,(44,(42,(19,43))))),(33,(50,51))),((20,56),(57,60)))),(54,55)),((53,(45,46)),(58,59))),(14,(12,13)))),(25,(23,24)))),(38,49))));
	TREE * ambiguous = [&R] (1,(2,((((40,((26,((39,(29,(3,((22,(21,(61,(36,37)))),(30,(27,28)))))),(6,(7,(4,5))))),((((11,(9,10)),(32,(47,48))),(34,35)),(31,(15,(16,17)))))),((((8,(((18,(44,(41,(42,(19,43))))),(33,(50,51))),((20,56),(57,60)))),(54,55)),((53,(45,46)),(58,59))),(14,(12,13)))),(52,(25,(23,24)))),(38,49))));
	TREE * ambiguous = [&R] (1,(2,((((40,((26,((39,((29,(3,(30,(27,28)))),((21,22),(61,(36,37))))),(6,(7,(4,5))))),((((9,(10,11)),(32,(47,48))),(34,35)),(31,(15,(16,17)))))),((((8,(((18,(41,(44,(42,(19,43))))),(33,(50,51))),((20,56),(57,60)))),(54,55)),((53,(45,46)),(58,59))),(14,(12,13)))),(52,(25,(23,24)))),(38,49))));
	TREE * ambiguous = [&R] (1,(2,((52,(((40,((26,((39,((29,(3,(30,(27,28)))),((21,22),(61,(36,37))))),(6,(7,(4,5))))),((((11,(9,10)),(32,(47,48))),(34,35)),(31,(15,(16,17)))))),((((8,(((18,(33,(50,51))),(44,(41,(42,(19,43))))),((20,56),(57,60)))),(54,55)),((53,(45,46)),(58,59))),(14,(12,13)))),(25,(23,24)))),(38,49))));
	TREE * ambiguous = [&R] (1,(2,((((40,((26,((39,(29,(3,((22,(21,(61,(36,37)))),(30,(27,28)))))),(6,(7,(4,5))))),((((11,(9,10)),(32,(47,48))),(34,35)),(31,(15,(16,17)))))),(((8,(((18,(44,(41,(42,(19,43))))),(33,(50,51))),((20,56),(57,60)))),(54,55)),((53,(45,46)),(58,59)))),((52,(14,(12,13))),(25,(23,24)))),(38,49))));
	TREE * ambiguous = [&R] (1,(2,((52,(((40,((26,((39,((29,(3,(30,(27,28)))),((21,22),(61,(36,37))))),(6,(7,(4,5))))),((((9,(10,11)),(32,(47,48))),(34,35)),(31,(15,(16,17)))))),((((8,(((18,(41,(44,(42,(19,43))))),(33,(50,51))),((20,56),(57,60)))),(54,55)),((53,(45,46)),(58,59))),(14,(12,13)))),(25,(23,24)))),(38,49))));
	TREE * ambiguous = [&R] (1,(2,((52,(((40,((26,((39,(29,(3,((22,(21,(61,(36,37)))),(30,(27,28)))))),(6,(7,(4,5))))),((((11,(9,10)),(32,(47,48))),(34,35)),(31,(15,(16,17)))))),((((8,(((18,(33,(50,51))),(44,(41,(42,(19,43))))),((20,56),(57,60)))),(54,55)),((53,(45,46)),(58,59))),(14,(12,13)))),(25,(23,24)))),(38,49))));
	TREE * ambiguous = [&R] (1,(2,((((40,((26,((39,((29,(3,(30,(27,28)))),((21,22),(61,(36,37))))),(6,(7,(4,5))))),((((11,(9,10)),(32,(47,48))),(34,35)),(31,(15,(16,17)))))),((((8,(((18,(41,(44,(42,(19,43))))),(33,(50,51))),((20,56),(57,60)))),(54,55)),((53,(45,46)),(58,59))),(14,(12,13)))),(52,(25,(23,24)))),(38,49))));
	TREE * ambiguous = [&R] (1,(2,((((40,((26,((39,(29,(3,((22,(21,(61,(36,37)))),(30,(27,28)))))),(6,(7,(4,5))))),((((11,(9,10)),(32,(47,48))),(34,35)),(31,(15,(16,17)))))),((((8,(((18,(41,(44,(42,(19,43))))),(33,(50,51))),((20,56),(57,60)))),(54,55)),((53,(45,46)),(58,59))),(14,(12,13)))),(52,(25,(23,24)))),(38,49))));
	TREE * ambiguous = [&R] (1,(2,((52,(((40,((26,((39,(29,(3,((22,(21,(61,(36,37)))),(30,(27,28)))))),(6,(7,(4,5))))),((((9,(10,11)),(32,(47,48))),(34,35)),(31,(15,(16,17)))))),((((8,(((18,(33,(50,51))),(44,(41,(42,(19,43))))),((20,56),(57,60)))),(54,55)),((53,(45,46)),(58,59))),(14,(12,13)))),(25,(23,24)))),(38,49))));
	TREE * ambiguous = [&R] (1,(2,((((40,((26,((39,((29,(3,(30,(27,28)))),((21,22),(61,(36,37))))),(6,(7,(4,5))))),((((9,(10,11)),(32,(47,48))),(34,35)),(31,(15,(16,17)))))),((((8,(((18,(33,(50,51))),(44,(41,(42,(19,43))))),((20,56),(57,60)))),(54,55)),((53,(45,46)),(58,59))),(14,(12,13)))),(52,(25,(23,24)))),(38,49))));
	TREE * ambiguous = [&R] (1,(2,((((40,((26,((39,(29,(3,((22,(21,(61,(36,37)))),(30,(27,28)))))),(6,(7,(4,5))))),((((11,(9,10)),(32,(47,48))),(34,35)),(31,(15,(16,17)))))),((((8,(((18,(33,(50,51))),(44,(41,(42,(19,43))))),((20,56),(57,60)))),(54,55)),((53,(45,46)),(58,59))),(14,(12,13)))),(52,(25,(23,24)))),(38,49))));
	TREE * ambiguous = [&R] (1,(2,((((40,((26,((39,((29,(3,(30,(27,28)))),((21,22),(61,(36,37))))),(6,(7,(4,5))))),((((11,(9,10)),(32,(47,48))),(34,35)),(31,(15,(16,17)))))),(((8,(((18,(44,(41,(42,(19,43))))),(33,(50,51))),((20,56),(57,60)))),(54,55)),((53,(45,46)),(58,59)))),((52,(14,(12,13))),(25,(23,24)))),(38,49))));
	TREE * ambiguous = [&R] (1,(2,((((40,((26,((39,(29,(3,((22,(21,(61,(36,37)))),(30,(27,28)))))),(6,(7,(4,5))))),((((9,(10,11)),(32,(47,48))),(34,35)),(31,(15,(16,17)))))),((((8,(((18,(41,(44,(42,(19,43))))),(33,(50,51))),((20,56),(57,60)))),(54,55)),((53,(45,46)),(58,59))),(14,(12,13)))),(52,(25,(23,24)))),(38,49))));
	TREE * ambiguous = [&R] (1,(2,((((40,((26,((39,((29,(3,(30,(27,28)))),((21,22),(61,(36,37))))),(6,(7,(4,5))))),((((11,(9,10)),(32,(47,48))),(34,35)),(31,(15,(16,17)))))),((((8,(((18,(44,(41,(42,(19,43))))),(33,(50,51))),((20,56),(57,60)))),(54,55)),((53,(45,46)),(58,59))),(14,(12,13)))),(52,(25,(23,24)))),(38,49))));
	TREE * ambiguous = [&R] (1,(2,((((40,((26,((39,(29,(3,((22,(21,(61,(36,37)))),(30,(27,28)))))),(6,(7,(4,5))))),((((9,(10,11)),(32,(47,48))),(34,35)),(31,(15,(16,17)))))),((((8,(((18,(44,(41,(42,(19,43))))),(33,(50,51))),((20,56),(57,60)))),(54,55)),((53,(45,46)),(58,59))),(14,(12,13)))),(52,(25,(23,24)))),(38,49))));
	TREE * ambiguous = [&R] (1,(2,((((40,((26,((39,((29,(3,(30,(27,28)))),((21,22),(61,(36,37))))),(6,(7,(4,5))))),((((9,(10,11)),(32,(47,48))),(34,35)),(31,(15,(16,17)))))),(((8,(((18,(41,(44,(42,(19,43))))),(33,(50,51))),((20,56),(57,60)))),(54,55)),((53,(45,46)),(58,59)))),((52,(14,(12,13))),(25,(23,24)))),(38,49))));
	TREE * ambiguous = [&R] (1,(2,((52,(((40,((26,((39,(29,(3,((22,(21,(61,(36,37)))),(30,(27,28)))))),(6,(7,(4,5))))),((((9,(10,11)),(32,(47,48))),(34,35)),(31,(15,(16,17)))))),((((8,(((18,(44,(41,(42,(19,43))))),(33,(50,51))),((20,56),(57,60)))),(54,55)),((53,(45,46)),(58,59))),(14,(12,13)))),(25,(23,24)))),(38,49))));
	TREE * ambiguous = [&R] (1,(2,((((40,((26,((39,((29,(3,(30,(27,28)))),((21,22),(61,(36,37))))),(6,(7,(4,5))))),((((11,(9,10)),(32,(47,48))),(34,35)),(31,(15,(16,17)))))),(((8,(((18,(33,(50,51))),(44,(41,(42,(19,43))))),((20,56),(57,60)))),(54,55)),((53,(45,46)),(58,59)))),((52,(14,(12,13))),(25,(23,24)))),(38,49))));
	TREE * ambiguous = [&R] (1,(2,((((40,((26,((39,(29,(3,((22,(21,(61,(36,37)))),(30,(27,28)))))),(6,(7,(4,5))))),((((11,(9,10)),(32,(47,48))),(34,35)),(31,(15,(16,17)))))),(((8,(((18,(33,(50,51))),(44,(41,(42,(19,43))))),((20,56),(57,60)))),(54,55)),((53,(45,46)),(58,59)))),((52,(14,(12,13))),(25,(23,24)))),(38,49))));
	TREE * ambiguous = [&R] (1,(2,((((40,((26,((39,((29,(3,(30,(27,28)))),((21,22),(61,(36,37))))),(6,(7,(4,5))))),((((9,(10,11)),(32,(47,48))),(34,35)),(31,(15,(16,17)))))),(((8,(((18,(44,(41,(42,(19,43))))),(33,(50,51))),((20,56),(57,60)))),(54,55)),((53,(45,46)),(58,59)))),((52,(14,(12,13))),(25,(23,24)))),(38,49))));
	TREE * ambiguous = [&R] (1,(2,((52,(((40,((26,((39,(29,(3,((22,(21,(61,(36,37)))),(30,(27,28)))))),(6,(7,(4,5))))),((((11,(9,10)),(32,(47,48))),(34,35)),(31,(15,(16,17)))))),((((8,(((18,(44,(41,(42,(19,43))))),(33,(50,51))),((20,56),(57,60)))),(54,55)),((53,(45,46)),(58,59))),(14,(12,13)))),(25,(23,24)))),(38,49))));
	TREE * ambiguous = [&R] (1,(2,((52,(((40,((26,((39,((29,(3,(30,(27,28)))),((21,22),(61,(36,37))))),(6,(7,(4,5))))),((((9,(10,11)),(32,(47,48))),(34,35)),(31,(15,(16,17)))))),((((8,(((18,(44,(41,(42,(19,43))))),(33,(50,51))),((20,56),(57,60)))),(54,55)),((53,(45,46)),(58,59))),(14,(12,13)))),(25,(23,24)))),(38,49))));
	TREE * ambiguous = [&R] (1,(2,((52,(((40,((26,((39,((29,(3,(30,(27,28)))),((21,22),(61,(36,37))))),(6,(7,(4,5))))),((((9,(10,11)),(32,(47,48))),(34,35)),(31,(15,(16,17)))))),((((8,(((18,(33,(50,51))),(44,(41,(42,(19,43))))),((20,56),(57,60)))),(54,55)),((53,(45,46)),(58,59))),(14,(12,13)))),(25,(23,24)))),(38,49))));
	TREE * ambiguous = [&R] (1,(2,((52,(((40,((26,((39,((29,(3,(30,(27,28)))),((21,22),(61,(36,37))))),(6,(7,(4,5))))),((((11,(9,10)),(32,(47,48))),(34,35)),(31,(15,(16,17)))))),((((8,(((18,(41,(44,(42,(19,43))))),(33,(50,51))),((20,56),(57,60)))),(54,55)),((53,(45,46)),(58,59))),(14,(12,13)))),(25,(23,24)))),(38,49))));
	TREE * ambiguous = [&R] (1,(2,((52,(((40,((26,((39,(29,(3,((22,(21,(61,(36,37)))),(30,(27,28)))))),(6,(7,(4,5))))),((((9,(10,11)),(32,(47,48))),(34,35)),(31,(15,(16,17)))))),((((8,(((18,(41,(44,(42,(19,43))))),(33,(50,51))),((20,56),(57,60)))),(54,55)),((53,(45,46)),(58,59))),(14,(12,13)))),(25,(23,24)))),(38,49))));
	TREE * ambiguous = [&R] (1,(2,((((40,((26,((39,((29,(3,(30,(27,28)))),((21,22),(61,(36,37))))),(6,(7,(4,5))))),((((11,(9,10)),(32,(47,48))),(34,35)),(31,(15,(16,17)))))),(((8,(((18,(41,(44,(42,(19,43))))),(33,(50,51))),((20,56),(57,60)))),(54,55)),((53,(45,46)),(58,59)))),((52,(14,(12,13))),(25,(23,24)))),(38,49))));
	TREE * ambiguous = [&R] (1,(2,((((40,((26,((39,(29,(3,((22,(21,(61,(36,37)))),(30,(27,28)))))),(6,(7,(4,5))))),((((9,(10,11)),(32,(47,48))),(34,35)),(31,(15,(16,17)))))),(((8,(((18,(33,(50,51))),(44,(41,(42,(19,43))))),((20,56),(57,60)))),(54,55)),((53,(45,46)),(58,59)))),((52,(14,(12,13))),(25,(23,24)))),(38,49))));
	TREE * ambiguous = [&R] (1,(2,((((40,((26,((39,((29,(3,(30,(27,28)))),((21,22),(61,(36,37))))),(6,(7,(4,5))))),((((9,(10,11)),(32,(47,48))),(34,35)),(31,(15,(16,17)))))),((((8,(((18,(44,(41,(42,(19,43))))),(33,(50,51))),((20,56),(57,60)))),(54,55)),((53,(45,46)),(58,59))),(14,(12,13)))),(52,(25,(23,24)))),(38,49))));
	TREE * ambiguous = [&R] (1,(2,((((40,((26,((39,((29,(3,(30,(27,28)))),((21,22),(61,(36,37))))),(6,(7,(4,5))))),((((9,(10,11)),(32,(47,48))),(34,35)),(31,(15,(16,17)))))),(((8,(((18,(33,(50,51))),(44,(41,(42,(19,43))))),((20,56),(57,60)))),(54,55)),((53,(45,46)),(58,59)))),((52,(14,(12,13))),(25,(23,24)))),(38,49))));
	TREE * ambiguous = [&R] (1,(2,((52,(((40,((26,((39,((29,(3,(30,(27,28)))),((21,22),(61,(36,37))))),(6,(7,(4,5))))),((((11,(9,10)),(32,(47,48))),(34,35)),(31,(15,(16,17)))))),((((8,(((18,(44,(41,(42,(19,43))))),(33,(50,51))),((20,56),(57,60)))),(54,55)),((53,(45,46)),(58,59))),(14,(12,13)))),(25,(23,24)))),(38,49))));
	TREE * ambiguous = [&R] (1,(2,((((40,((26,((39,(29,(3,((22,(21,(61,(36,37)))),(30,(27,28)))))),(6,(7,(4,5))))),((((9,(10,11)),(32,(47,48))),(34,35)),(31,(15,(16,17)))))),(((8,(((18,(44,(41,(42,(19,43))))),(33,(50,51))),((20,56),(57,60)))),(54,55)),((53,(45,46)),(58,59)))),((52,(14,(12,13))),(25,(23,24)))),(38,49))));
	TREE * ambiguous = [&R] (1,(2,((((40,((26,((39,(29,(3,((22,(21,(61,(36,37)))),(30,(27,28)))))),(6,(7,(4,5))))),((((11,(9,10)),(32,(47,48))),(34,35)),(31,(15,(16,17)))))),(((8,(((18,(41,(44,(42,(19,43))))),(33,(50,51))),((20,56),(57,60)))),(54,55)),((53,(45,46)),(58,59)))),((52,(14,(12,13))),(25,(23,24)))),(38,49))));
	TREE * ambiguous = [&R] (1,(2,((((40,((26,((39,(29,(3,((22,(21,(61,(36,37)))),(30,(27,28)))))),(6,(7,(4,5))))),((((9,(10,11)),(32,(47,48))),(34,35)),(31,(15,(16,17)))))),(((8,(((18,(41,(44,(42,(19,43))))),(33,(50,51))),((20,56),(57,60)))),(54,55)),((53,(45,46)),(58,59)))),((52,(14,(12,13))),(25,(23,24)))),(38,49))));
	TREE * extraState = [&R] (1,(2,(((((((((26,(3,((29,(39,((6,(7,(4,5))),(61,((21,22),(36,37)))))),(30,(27,28))))),((31,(15,(16,17))),(34,35))),(10,(9,11))),(32,(47,48))),(40,(53,((((18,(33,(50,51))),(19,44)),(43,(41,42))),(60,(57,(20,56))))))),(8,(((45,46),(58,59)),(54,55)))),(52,(25,(23,24)))),(14,(12,13))),(38,49))));
	TREE * extraState = [&R] (1,(2,(((((((((26,(3,((29,(39,((6,(7,(4,5))),(61,((21,22),(36,37)))))),(30,(27,28))))),((31,(15,(16,17))),(34,35))),(11,(9,10))),(32,(47,48))),(40,(53,((19,(43,(42,(41,(44,(18,(33,(50,51)))))))),(60,(57,(20,56))))))),(8,(((45,46),(58,59)),(54,55)))),(52,(25,(23,24)))),(14,(12,13))),(38,49))));
	TREE * extraState = [&R] (1,(2,(((((((((26,(3,((6,(39,(7,(4,5)))),((21,(22,(61,(36,37)))),(29,(30,(27,28))))))),((31,(15,(16,17))),(34,35))),(9,(10,11))),(32,(47,48))),(40,(53,((((18,(33,(50,51))),(19,44)),(43,(41,42))),(60,(57,(20,56))))))),(8,(((45,46),(58,59)),(54,55)))),(52,(25,(23,24)))),(14,(12,13))),(38,49))));
	TREE * extraState = [&R] (1,(2,(((((((((26,(3,(((6,(7,(4,5))),(29,39)),((21,(22,(61,(36,37)))),(30,(27,28)))))),((31,(15,(16,17))),(34,35))),(10,(9,11))),(32,(47,48))),(40,(53,((19,(43,(42,(44,(41,(18,(33,(50,51)))))))),(60,(57,(20,56))))))),(8,(((45,46),(58,59)),(54,55)))),(52,(25,(23,24)))),(14,(12,13))),(38,49))));
	TREE * extraState = [&R] (1,(2,(((((((((26,(3,(((7,(4,5)),(6,(29,39))),((22,(21,(61,(36,37)))),(30,(27,28)))))),((31,(15,(16,17))),(34,35))),(10,(9,11))),(32,(47,48))),(40,(53,((19,(43,(42,(44,(41,(18,(33,(50,51)))))))),(60,(57,(20,56))))))),(8,(((45,46),(58,59)),(54,55)))),(52,(25,(23,24)))),(14,(12,13))),(38,49))));
	TREE * extraState = [&R] (1,(2,(((((((((26,(3,((6,(39,(7,(4,5)))),((22,(21,(61,(36,37)))),(29,(30,(27,28))))))),((31,(15,(16,17))),(34,35))),(9,(10,11))),(32,(47,48))),(40,(53,((19,(43,(42,((18,(33,(50,51))),(41,44))))),(60,(57,(20,56))))))),(8,(((45,46),(58,59)),(54,55)))),(52,(25,(23,24)))),(14,(12,13))),(38,49))));
	TREE * extraState = [&R] (1,(2,((((((((26,(3,((6,(39,((7,(4,5)),(11,(9,10))))),((21,(22,(61,(36,37)))),(29,(30,(27,28))))))),((31,(15,(16,17))),(34,35))),(32,(47,48))),(40,(53,((43,(42,(41,((18,(33,(50,51))),(19,44))))),(60,(57,(20,56))))))),(8,(((45,46),(58,59)),(54,55)))),(52,(25,(23,24)))),(14,(12,13))),(38,49))));
	TREE * extraState = [&R] (1,(2,(((((((((22,((3,(26,((31,(15,(16,17))),(34,35)))),((6,(4,5)),((39,(7,(11,(9,10)))),(29,(30,(27,28))))))),(21,61)),(36,37)),(32,(47,48))),(40,(53,((43,(42,(41,((18,(33,(50,51))),(19,44))))),(60,(57,(20,56))))))),(8,(((45,46),(58,59)),(54,55)))),(52,(25,(23,24)))),(14,(12,13))),(38,49))));
	TREE * extraState = [&R] (1,(2,(((((((((26,(3,((29,((39,(6,(7,(4,5)))),(21,(61,(22,(36,37)))))),(30,(27,28))))),((31,(15,(16,17))),(34,35))),(11,(9,10))),(32,(47,48))),(40,(53,((19,(43,(42,((18,(33,(50,51))),(41,44))))),(60,(57,(20,56))))))),(8,(((45,46),(58,59)),(54,55)))),(52,(25,(23,24)))),(14,(12,13))),(38,49))));
	TREE * extraState = [&R] (1,(2,(((((((((26,(3,((((6,(7,(4,5))),(29,39)),(30,(27,28))),(22,(21,(61,(36,37))))))),((31,(15,(16,17))),(34,35))),(11,(9,10))),(32,(47,48))),(40,(53,((43,(((18,(33,(50,51))),(19,44)),(41,42))),(60,(57,(20,56))))))),(8,(((45,46),(58,59)),(54,55)))),(52,(25,(23,24)))),(14,(12,13))),(38,49))));
	TREE * extraState = [&R] (1,(2,(((((((((26,(3,(((7,(4,5)),(6,(29,39))),((22,(21,(61,(36,37)))),(30,(27,28)))))),((31,(15,(16,17))),(34,35))),(10,(9,11))),(32,(47,48))),(40,(53,((43,(42,(41,((18,(33,(50,51))),(19,44))))),(60,(57,(20,56))))))),(8,(((45,46),(58,59)),(54,55)))),(52,(25,(23,24)))),(14,(12,13))),(38,49))));
	TREE * extraState = [&R] (1,(2,(((((((((26,(3,((((6,(7,(4,5))),(29,39)),(22,((21,61),(36,37)))),(30,(27,28))))),((31,(15,(16,17))),(34,35))),(11,(9,10))),(32,(47,48))),(40,(53,((19,(43,(42,(44,(41,(18,(33,(50,51)))))))),(60,(57,(20,56))))))),(8,(((45,46),(58,59)),(54,55)))),(52,(25,(23,24)))),(14,(12,13))),(38,49))));
	TREE * extraState = [&R] (1,(2,(((((((((26,(3,((29,((39,(6,(7,(4,5)))),(21,(61,(22,(36,37)))))),(30,(27,28))))),((31,(15,(16,17))),(34,35))),(11,(9,10))),(32,(47,48))),(40,(53,((43,(42,((41,(18,(33,(50,51)))),(19,44)))),(60,(57,(20,56))))))),(8,(((45,46),(58,59)),(54,55)))),(52,(25,(23,24)))),(14,(12,13))),(38,49))));
	TREE * extraState = [&R] (1,(2,(((((((((26,(3,((29,(39,((6,(7,(4,5))),((21,22),(61,(36,37)))))),(30,(27,28))))),((31,(15,(16,17))),(34,35))),(10,(9,11))),(32,(47,48))),(40,(53,((19,(43,(42,((18,(33,(50,51))),(41,44))))),(60,(57,(20,56))))))),(8,(((45,46),(58,59)),(54,55)))),(52,(25,(23,24)))),(14,(12,13))),(38,49))));
	TREE * extraState = [&R] (1,(2,(((((((((26,(3,((6,(39,(7,(4,5)))),((21,(22,(61,(36,37)))),(29,(30,(27,28))))))),((31,(15,(16,17))),(34,35))),(11,(9,10))),(32,(47,48))),(40,(53,((((18,(33,(50,51))),(19,44)),(43,(41,42))),(60,(57,(20,56))))))),(8,(((45,46),(58,59)),(54,55)))),(52,(25,(23,24)))),(14,(12,13))),(38,49))));
	TREE * extraState = [&R] (1,(2,(((((((((26,(3,((29,((39,(6,(7,(4,5)))),(21,(22,(61,(36,37)))))),(30,(27,28))))),((31,(15,(16,17))),(34,35))),(10,(9,11))),(32,(47,48))),(40,(53,((43,(((18,(33,(50,51))),(19,44)),(41,42))),(60,(57,(20,56))))))),(8,(((45,46),(58,59)),(54,55)))),(52,(25,(23,24)))),(14,(12,13))),(38,49))));
	TREE * extraState = [&R] (1,(2,(((((((((26,(3,(((7,(4,5)),(6,(29,39))),((21,(22,(61,(36,37)))),(30,(27,28)))))),((31,(15,(16,17))),(34,35))),(11,(9,10))),(32,(47,48))),(40,(53,((43,(((18,(33,(50,51))),(19,44)),(41,42))),(60,(57,(20,56))))))),(8,(((45,46),(58,59)),(54,55)))),(52,(25,(23,24)))),(14,(12,13))),(38,49))));
	TREE * extraState = [&R] (1,(2,(((((((((26,(3,(((7,(4,5)),(6,(29,39))),((22,(21,(61,(36,37)))),(30,(27,28)))))),((31,(15,(16,17))),(34,35))),(11,(9,10))),(32,(47,48))),(40,(53,((((18,(33,(50,51))),(19,44)),(43,(41,42))),(60,(57,(20,56))))))),(8,(((45,46),(58,59)),(54,55)))),(52,(25,(23,24)))),(14,(12,13))),(38,49))));
	TREE * extraState = [&R] (1,(2,(((((((((26,(3,((29,(39,((6,(7,(4,5))),(61,((21,22),(36,37)))))),(30,(27,28))))),((31,(15,(16,17))),(34,35))),(11,(9,10))),(32,(47,48))),(40,(53,((((18,(33,(50,51))),(19,44)),(43,(41,42))),(60,(57,(20,56))))))),(8,(((45,46),(58,59)),(54,55)))),(52,(25,(23,24)))),(14,(12,13))),(38,49))));
	TREE * extraState = [&R] (1,(2,(((((((((22,((3,(26,((31,(15,(16,17))),(34,35)))),((6,(4,5)),((39,(7,(11,(9,10)))),(29,(30,(27,28))))))),(21,61)),(36,37)),(32,(47,48))),(40,(53,((19,(43,(42,(41,(44,(18,(33,(50,51)))))))),(60,(57,(20,56))))))),(8,(((45,46),(58,59)),(54,55)))),(52,(25,(23,24)))),(14,(12,13))),(38,49))));
	TREE * extraState = [&R] (1,(2,(((((((((26,(3,(((29,(39,(6,(7,(4,5))))),(21,(22,(61,(36,37))))),(30,(27,28))))),((31,(15,(16,17))),(34,35))),(11,(9,10))),(32,(47,48))),(40,(53,((19,(43,(42,(41,(44,(18,(33,(50,51)))))))),(60,(57,(20,56))))))),(8,(((45,46),(58,59)),(54,55)))),(52,(25,(23,24)))),(14,(12,13))),(38,49))));
	TREE * extraState = [&R] (1,(2,(((((((((26,(3,(((7,(4,5)),(6,(29,39))),((22,(21,(61,(36,37)))),(30,(27,28)))))),((31,(15,(16,17))),(34,35))),(11,(9,10))),(32,(47,48))),(40,(53,((43,(42,(41,((18,(33,(50,51))),(19,44))))),(60,(57,(20,56))))))),(8,(((45,46),(58,59)),(54,55)))),(52,(25,(23,24)))),(14,(12,13))),(38,49))));
	TREE * extraState = [&R] (1,(2,((((((((26,(3,((6,(39,((7,(4,5)),(11,(9,10))))),((21,(22,(61,(36,37)))),(29,(30,(27,28))))))),((31,(15,(16,17))),(34,35))),(32,(47,48))),(40,(53,((43,(42,((41,(18,(33,(50,51)))),(19,44)))),(60,(57,(20,56))))))),(8,(((45,46),(58,59)),(54,55)))),(52,(25,(23,24)))),(14,(12,13))),(38,49))));
	TREE * extraState = [&R] (1,(2,(((((((((26,(3,((29,(39,((6,(7,(4,5))),((21,22),(61,(36,37)))))),(30,(27,28))))),((31,(15,(16,17))),(34,35))),(11,(9,10))),(32,(47,48))),(40,(53,((43,(((18,(33,(50,51))),(19,44)),(41,42))),(60,(57,(20,56))))))),(8,(((45,46),(58,59)),(54,55)))),(52,(25,(23,24)))),(14,(12,13))),(38,49))));
	TREE * extraState = [&R] (1,(2,(((((((((26,(3,((29,((39,(6,(7,(4,5)))),((21,22),(61,(36,37))))),(30,(27,28))))),((31,(15,(16,17))),(34,35))),(11,(9,10))),(32,(47,48))),(40,(53,((((18,(33,(50,51))),(19,44)),(43,(41,42))),(60,(57,(20,56))))))),(8,(((45,46),(58,59)),(54,55)))),(52,(25,(23,24)))),(14,(12,13))),(38,49))));
	TREE * extraState = [&R] (1,(2,(((((((((26,(3,((6,(39,(7,(4,5)))),((22,(21,(61,(36,37)))),(29,(30,(27,28))))))),((31,(15,(16,17))),(34,35))),(10,(9,11))),(32,(47,48))),(40,(53,((19,(43,(42,((18,(33,(50,51))),(41,44))))),(60,(57,(20,56))))))),(8,(((45,46),(58,59)),(54,55)))),(52,(25,(23,24)))),(14,(12,13))),(38,49))));
	TREE * extraState = [&R] (1,(2,(((((((((26,(3,(((6,(7,(4,5))),(29,39)),((22,(21,(61,(36,37)))),(30,(27,28)))))),((31,(15,(16,17))),(34,35))),(10,(9,11))),(32,(47,48))),(40,(53,((19,(43,(42,(41,(44,(18,(33,(50,51)))))))),(60,(57,(20,56))))))),(8,(((45,46),(58,59)),(54,55)))),(52,(25,(23,24)))),(14,(12,13))),(38,49))));
	TREE * extraState = [&R] (1,(2,(((((((((26,(3,((29,((39,(6,(7,(4,5)))),(21,(61,(22,(36,37)))))),(30,(27,28))))),((31,(15,(16,17))),(34,35))),(11,(9,10))),(32,(47,48))),(40,(53,((19,(43,(42,(41,(44,(18,(33,(50,51)))))))),(60,(57,(20,56))))))),(8,(((45,46),(58,59)),(54,55)))),(52,(25,(23,24)))),(14,(12,13))),(38,49))));
	TREE * extraState = [&R] (1,(2,(((((((((26,(3,((((6,(7,(4,5))),(29,39)),(30,(27,28))),(22,(21,(61,(36,37))))))),((31,(15,(16,17))),(34,35))),(10,(9,11))),(32,(47,48))),(40,(53,((43,(42,(41,((18,(33,(50,51))),(19,44))))),(60,(57,(20,56))))))),(8,(((45,46),(58,59)),(54,55)))),(52,(25,(23,24)))),(14,(12,13))),(38,49))));
	TREE * extraState = [&R] (1,(2,(((((((((26,(3,((((6,(7,(4,5))),(29,39)),(30,(27,28))),(22,((21,61),(36,37)))))),((31,(15,(16,17))),(34,35))),(10,(9,11))),(32,(47,48))),(40,(53,((((18,(33,(50,51))),(19,44)),(43,(41,42))),(60,(57,(20,56))))))),(8,(((45,46),(58,59)),(54,55)))),(52,(25,(23,24)))),(14,(12,13))),(38,49))));
	TREE * extraState = [&R] (1,(2,(((((((((26,(3,((29,((6,(7,(4,5))),(39,((21,22),(61,(36,37)))))),(30,(27,28))))),((31,(15,(16,17))),(34,35))),(11,(9,10))),(32,(47,48))),(40,(53,((19,(43,(42,(41,(44,(18,(33,(50,51)))))))),(60,(57,(20,56))))))),(8,(((45,46),(58,59)),(54,55)))),(52,(25,(23,24)))),(14,(12,13))),(38,49))));
	TREE * extraState = [&R] (1,(2,(((((((((26,(3,((29,((39,(6,(7,(4,5)))),(21,(22,(61,(36,37)))))),(30,(27,28))))),((31,(15,(16,17))),(34,35))),(10,(9,11))),(32,(47,48))),(40,(53,((19,(43,(42,((18,(33,(50,51))),(41,44))))),(60,(57,(20,56))))))),(8,(((45,46),(58,59)),(54,55)))),(52,(25,(23,24)))),(14,(12,13))),(38,49))));
	TREE * extraState = [&R] (1,(2,(((((((((26,(3,((29,((39,(6,(7,(4,5)))),(21,(22,(61,(36,37)))))),(30,(27,28))))),((31,(15,(16,17))),(34,35))),(10,(9,11))),(32,(47,48))),(40,(53,((43,(42,(41,((18,(33,(50,51))),(19,44))))),(60,(57,(20,56))))))),(8,(((45,46),(58,59)),(54,55)))),(52,(25,(23,24)))),(14,(12,13))),(38,49))));
	TREE * extraState = [&R] (1,(2,(((((((((26,(3,(((6,(7,(4,5))),(29,39)),((22,((21,61),(36,37))),(30,(27,28)))))),((31,(15,(16,17))),(34,35))),(11,(9,10))),(32,(47,48))),(40,(53,((19,(43,(42,((18,(33,(50,51))),(41,44))))),(60,(57,(20,56))))))),(8,(((45,46),(58,59)),(54,55)))),(52,(25,(23,24)))),(14,(12,13))),(38,49))));
	TREE * extraState = [&R] (1,(2,(((((((((26,(3,(((7,(4,5)),(6,(29,39))),((21,(22,(61,(36,37)))),(30,(27,28)))))),((31,(15,(16,17))),(34,35))),(11,(9,10))),(32,(47,48))),(40,(53,((((18,(33,(50,51))),(19,44)),(43,(41,42))),(60,(57,(20,56))))))),(8,(((45,46),(58,59)),(54,55)))),(52,(25,(23,24)))),(14,(12,13))),(38,49))));
	TREE * extraState = [&R] (1,(2,(((((((((26,(3,((6,(39,(7,(4,5)))),((21,(22,(61,(36,37)))),(29,(30,(27,28))))))),((31,(15,(16,17))),(34,35))),(10,(9,11))),(32,(47,48))),(40,(53,((43,(42,(41,((18,(33,(50,51))),(19,44))))),(60,(57,(20,56))))))),(8,(((45,46),(58,59)),(54,55)))),(52,(25,(23,24)))),(14,(12,13))),(38,49))));
	TREE * extraState = [&R] (1,(2,(((((((((22,((3,(26,((31,(15,(16,17))),(34,35)))),((6,(4,5)),((39,(7,(11,(9,10)))),(29,(30,(27,28))))))),(21,61)),(36,37)),(32,(47,48))),(40,(53,((43,(((18,(33,(50,51))),(19,44)),(41,42))),(60,(57,(20,56))))))),(8,(((45,46),(58,59)),(54,55)))),(52,(25,(23,24)))),(14,(12,13))),(38,49))));
	TREE * extraState = [&R] (1,(2,(((((((((26,(3,((29,(39,((6,(7,(4,5))),(61,((21,22),(36,37)))))),(30,(27,28))))),((31,(15,(16,17))),(34,35))),(10,(9,11))),(32,(47,48))),(40,(53,((43,(42,((41,(18,(33,(50,51)))),(19,44)))),(60,(57,(20,56))))))),(8,(((45,46),(58,59)),(54,55)))),(52,(25,(23,24)))),(14,(12,13))),(38,49))));
	TREE * extraState = [&R] (1,(2,(((((((((26,(3,((29,((39,(6,(7,(4,5)))),(21,(61,(22,(36,37)))))),(30,(27,28))))),((31,(15,(16,17))),(34,35))),(11,(9,10))),(32,(47,48))),(40,(53,((((18,(33,(50,51))),(19,44)),(43,(41,42))),(60,(57,(20,56))))))),(8,(((45,46),(58,59)),(54,55)))),(52,(25,(23,24)))),(14,(12,13))),(38,49))));
	TREE * extraState = [&R] (1,(2,(((((((((26,(3,((6,(39,(7,(4,5)))),((21,(22,(61,(36,37)))),(29,(30,(27,28))))))),((31,(15,(16,17))),(34,35))),(11,(9,10))),(32,(47,48))),(40,(53,((19,(43,(42,((18,(33,(50,51))),(41,44))))),(60,(57,(20,56))))))),(8,(((45,46),(58,59)),(54,55)))),(52,(25,(23,24)))),(14,(12,13))),(38,49))));
	TREE * extraState = [&R] (1,(2,(((((((((26,(3,(((6,(7,(4,5))),(29,39)),((21,(22,(61,(36,37)))),(30,(27,28)))))),((31,(15,(16,17))),(34,35))),(10,(9,11))),(32,(47,48))),(40,(53,((43,(42,((41,(18,(33,(50,51)))),(19,44)))),(60,(57,(20,56))))))),(8,(((45,46),(58,59)),(54,55)))),(52,(25,(23,24)))),(14,(12,13))),(38,49))));
	TREE * extraState = [&R] (1,(2,(((((((((26,(3,((29,((39,(6,(7,(4,5)))),(21,(61,(22,(36,37)))))),(30,(27,28))))),((31,(15,(16,17))),(34,35))),(10,(9,11))),(32,(47,48))),(40,(53,((19,(43,(42,((18,(33,(50,51))),(41,44))))),(60,(57,(20,56))))))),(8,(((45,46),(58,59)),(54,55)))),(52,(25,(23,24)))),(14,(12,13))),(38,49))));
	TREE * extraState = [&R] (1,(2,((((((((26,(3,((6,(39,((7,(4,5)),(11,(9,10))))),((21,(22,(61,(36,37)))),(29,(30,(27,28))))))),((31,(15,(16,17))),(34,35))),(32,(47,48))),(40,(53,((19,(43,(42,((18,(33,(50,51))),(41,44))))),(60,(57,(20,56))))))),(8,(((45,46),(58,59)),(54,55)))),(52,(25,(23,24)))),(14,(12,13))),(38,49))));
	TREE * extraState = [&R] (1,(2,(((((((((26,(3,(((7,(4,5)),(6,(29,39))),((21,(22,(61,(36,37)))),(30,(27,28)))))),((31,(15,(16,17))),(34,35))),(10,(9,11))),(32,(47,48))),(40,(53,((43,(42,(41,((18,(33,(50,51))),(19,44))))),(60,(57,(20,56))))))),(8,(((45,46),(58,59)),(54,55)))),(52,(25,(23,24)))),(14,(12,13))),(38,49))));
	TREE * extraState = [&R] (1,(2,((((((((26,(3,((6,(39,((7,(4,5)),(11,(9,10))))),((21,(22,(61,(36,37)))),(29,(30,(27,28))))))),((31,(15,(16,17))),(34,35))),(32,(47,48))),(40,(53,((((18,(33,(50,51))),(19,44)),(43,(41,42))),(60,(57,(20,56))))))),(8,(((45,46),(58,59)),(54,55)))),(52,(25,(23,24)))),(14,(12,13))),(38,49))));
	TREE * extraState = [&R] (1,(2,(((((((((22,((3,(26,((31,(15,(16,17))),(34,35)))),((6,(4,5)),((39,(7,(11,(9,10)))),(29,(30,(27,28))))))),(21,61)),(36,37)),(32,(47,48))),(40,(53,((((18,(33,(50,51))),(19,44)),(43,(41,42))),(60,(57,(20,56))))))),(8,(((45,46),(58,59)),(54,55)))),(52,(25,(23,24)))),(14,(12,13))),(38,49))));
	TREE * extraState = [&R] (1,(2,(((((((((26,(3,((((6,(7,(4,5))),(29,39)),(22,(21,(61,(36,37))))),(30,(27,28))))),((31,(15,(16,17))),(34,35))),(11,(9,10))),(32,(47,48))),(40,(53,((43,(42,((41,(18,(33,(50,51)))),(19,44)))),(60,(57,(20,56))))))),(8,(((45,46),(58,59)),(54,55)))),(52,(25,(23,24)))),(14,(12,13))),(38,49))));
	TREE * extraState = [&R] (1,(2,(((((((((26,(3,(((7,(4,5)),(6,(29,39))),((22,(21,(61,(36,37)))),(30,(27,28)))))),((31,(15,(16,17))),(34,35))),(10,(9,11))),(32,(47,48))),(40,(53,((19,(43,(42,(41,(44,(18,(33,(50,51)))))))),(60,(57,(20,56))))))),(8,(((45,46),(58,59)),(54,55)))),(52,(25,(23,24)))),(14,(12,13))),(38,49))));
	TREE * extraState = [&R] (1,(2,(((((((((26,(3,((((6,(7,(4,5))),(29,39)),(22,((21,61),(36,37)))),(30,(27,28))))),((31,(15,(16,17))),(34,35))),(11,(9,10))),(32,(47,48))),(40,(53,((43,(42,(41,((18,(33,(50,51))),(19,44))))),(60,(57,(20,56))))))),(8,(((45,46),(58,59)),(54,55)))),(52,(25,(23,24)))),(14,(12,13))),(38,49))));
	TREE * extraState = [&R] (1,(2,(((((((((26,(3,((29,((39,(6,(7,(4,5)))),(21,(61,(22,(36,37)))))),(30,(27,28))))),((31,(15,(16,17))),(34,35))),(11,(9,10))),(32,(47,48))),(40,(53,((43,(((18,(33,(50,51))),(19,44)),(41,42))),(60,(57,(20,56))))))),(8,(((45,46),(58,59)),(54,55)))),(52,(25,(23,24)))),(14,(12,13))),(38,49))));
	TREE * inapplicable = [&R] (1,(2,((38,49),(((52,(25,(23,24))),(13,12)),(14,(((40,(53,(((57,60),(20,56)),(19,(43,(42,(44,(41,(18,(33,(51,50))))))))))),((((35,34),((32,(48,47)),(9,(11,10)))),(31,(15,(17,16)))),(26,((((29,39),(6,(7,(5,4)))),(22,(21,(61,(37,36))))),(3,(30,(27,28))))))),(8,((55,54),((59,58),(46,45))))))))));
	TREE * inapplicable = [&R] (1,(2,((49,38),(((52,(25,(24,23))),(13,12)),(14,(((8,(55,54)),((59,58),(46,45))),((40,(53,((19,(43,(42,(44,(41,(18,(33,(50,51)))))))),((57,60),(20,56))))),((26,(3,(((29,(30,(28,27))),(21,(22,(61,(37,36))))),(6,(39,(7,(5,4))))))),(((35,34),((32,(47,48)),(9,(10,11)))),(31,(15,(17,16))))))))))));
	TREE * inapplicable = [&R] (1,(2,((49,38),((52,(25,(23,24))),((((14,((8,(55,54)),((58,59),(46,45)))),(40,(53,(((57,60),(20,56)),(19,(43,(42,(44,(41,(18,(33,(50,51)))))))))))),((((34,35),((32,(48,47)),(11,(9,10)))),(31,(16,(15,17)))),((26,((22,((37,36),(21,61))),(3,(30,(28,27))))),((29,39),(6,(7,(5,4))))))),(13,12))))));
	TREE * inapplicable = [&R] (1,(2,((((((40,(53,(((57,60),(20,56)),(19,(43,(42,((44,41),(18,(33,(51,50)))))))))),(14,((8,(55,54)),((46,45),(59,58))))),((((35,34),((11,(9,10)),(32,(48,47)))),(31,(16,(17,15)))),((26,((6,(7,(5,4))),(39,29))),((22,((21,61),(37,36))),(3,(30,(28,27))))))),(13,12)),(52,(25,(23,24)))),(49,38))));
	TREE * inapplicable = [&R] (1,(2,((((52,(25,(24,23))),(12,13)),(14,((((((35,34),((9,(10,11)),(32,(48,47)))),(31,(15,(16,17)))),(26,(3,(((29,(30,(28,27))),(21,(22,(61,(36,37))))),(6,(39,(7,(4,5)))))))),(40,(53,((19,(43,(42,(44,(41,(18,(33,(50,51)))))))),((57,60),(56,20)))))),(8,((54,55),((59,58),(45,46))))))),(38,49))));
	TREE * inapplicable = [&R] (1,(2,((((13,12),(52,(25,(24,23)))),(14,((8,((55,54),((59,58),(46,45)))),(((26,(3,((6,(39,(7,(5,4)))),((29,(30,(28,27))),(22,(21,(61,(37,36)))))))),(((34,35),((32,(47,48)),(9,(11,10)))),(31,(15,(17,16))))),(40,(53,((19,(43,(42,((44,41),(18,(33,(51,50))))))),((60,57),(20,56))))))))),(38,49))));
	TREE * inapplicable = [&R] (1,(2,((49,38),(((52,(25,(24,23))),(12,13)),(14,(((8,(54,55)),((58,59),(45,46))),((((31,(15,(16,17))),(((32,(48,47)),(9,(10,11))),(34,35))),(26,(3,(((29,(30,(28,27))),(22,(21,(61,(36,37))))),(6,(39,(7,(4,5)))))))),(40,(53,(((60,57),(56,20)),(19,(43,(42,((44,41),(18,(33,(50,51)))))))))))))))));
	TREE * inapplicable = [&R] (1,(2,((49,38),(((12,13),(52,(25,(23,24)))),(14,((((26,(((6,(7,(5,4))),(29,(39,((61,(36,37)),(22,21))))),(3,(30,(28,27))))),(((35,34),((32,(47,48)),(9,(10,11)))),(31,(15,(17,16))))),(40,(53,((19,(43,(42,((41,44),(18,(33,(50,51))))))),((57,60),(56,20)))))),(8,((54,55),((59,58),(45,46))))))))));
	TREE * inapplicable = [&R] (1,(2,((38,49),(((13,12),(52,(25,(23,24)))),(14,((8,((55,54),((59,58),(46,45)))),((((31,(15,(17,16))),(((32,(48,47)),(11,(10,9))),(35,34))),(26,(3,((6,(39,(7,(5,4)))),((29,(30,(28,27))),(22,(21,(61,(37,36))))))))),(40,(53,((19,(43,(42,(41,(44,(18,(33,(51,50)))))))),((60,57),(20,56))))))))))));
	TREE * inapplicable = [&R] (1,(2,((38,49),((14,(((((31,(15,(16,17))),((34,35),((32,(47,48)),(11,(10,9))))),(26,(3,(((22,(21,(61,(36,37)))),(29,(30,(28,27)))),(6,(39,(7,(4,5)))))))),(40,(53,((19,(43,(42,((41,44),(18,(33,(50,51))))))),((60,57),(56,20)))))),(8,((54,55),((58,59),(45,46)))))),((52,(25,(23,24))),(12,13))))));
	TREE * inapplicable = [&R] (1,(2,((49,38),(((52,(25,(24,23))),(13,12)),(14,(((40,(53,((19,(43,(42,((44,41),(18,(33,(51,50))))))),((57,60),(20,56))))),((((35,34),((32,(48,47)),(9,(10,11)))),(31,(15,(17,16)))),(26,((3,(30,(27,28))),(((29,39),(6,(7,(4,5)))),(22,(21,(61,(37,36))))))))),((8,(55,54)),((58,59),(46,45)))))))));
	TREE * inapplicable = [&R] (1,(2,((38,49),((52,(25,(24,23))),((((14,((8,(54,55)),((59,58),(45,46)))),(40,(53,(((60,57),(56,20)),(19,(43,(42,(44,(41,(18,(33,(51,50)))))))))))),((((35,34),((32,(47,48)),(11,(10,9)))),(31,(16,(17,15)))),((26,((39,29),(6,(7,(4,5))))),((22,((36,37),(61,21))),(3,(30,(27,28))))))),(12,13))))));
	TREE * inapplicable = [&R] (1,(2,((49,38),(((52,(25,(24,23))),(13,12)),(14,(((40,(53,((19,(43,(42,((41,44),(18,(33,(51,50))))))),((57,60),(20,56))))),((26,(3,((6,(39,(7,(4,5)))),((29,(30,(28,27))),(21,(22,(61,(37,36)))))))),(((35,34),((32,(48,47)),(9,(10,11)))),(31,(15,(16,17)))))),(8,((55,54),((58,59),(46,45))))))))));
	TREE * inapplicable = [&R] (1,(2,((38,49),((14,(((((31,(15,(16,17))),((34,35),((32,(47,48)),(11,(10,9))))),(26,(((29,(39,((22,21),(61,(36,37))))),(6,(7,(4,5)))),(3,(30,(28,27)))))),(40,(53,((19,(43,(42,(44,(41,(18,(33,(50,51)))))))),((60,57),(56,20)))))),(8,((54,55),((58,59),(45,46)))))),((52,(25,(23,24))),(12,13))))));
	TREE * inapplicable = [&R] (1,(2,((((13,12),(52,(25,(23,24)))),(14,(((40,(53,(((60,57),(20,56)),(19,(43,(42,((41,44),(18,(33,(51,50)))))))))),(((31,(15,(17,16))),((35,34),((11,(10,9)),(32,(48,47))))),(26,(3,(((22,(21,(61,(37,36)))),(29,(30,(28,27)))),(6,(39,(7,(5,4))))))))),((8,(55,54)),((46,45),(59,58)))))),(49,38))));
	TREE * inapplicable = [&R] (1,(2,((49,38),((52,(25,(23,24))),((((14,((8,(55,54)),((58,59),(46,45)))),(40,(53,(((60,57),(20,56)),(19,(43,(42,(44,(41,(18,(33,(50,51)))))))))))),((((35,34),((32,(48,47)),(9,(10,11)))),(31,(16,(17,15)))),((26,(22,((21,61),(37,36)))),(((6,(39,29)),(7,(5,4))),(3,(30,(28,27))))))),(13,12))))));
	TREE * inapplicable = [&R] (1,(2,((49,38),(((13,12),(52,(25,(24,23)))),(14,((((26,(((29,(39,((61,(37,36)),(22,21)))),(6,(7,(4,5)))),(3,(30,(27,28))))),((31,(15,(16,17))),((34,35),((32,(47,48)),(11,(10,9)))))),(40,(53,(((57,60),(20,56)),(19,(43,(42,(41,(44,(18,(33,(51,50)))))))))))),(8,((55,54),((59,58),(46,45))))))))));
	TREE * inapplicable = [&R] (1,(2,((38,49),(((12,13),(52,(25,(24,23)))),(14,(((((31,(15,(17,16))),(((32,(47,48)),(11,(10,9))),(35,34))),(26,((3,(30,(28,27))),((6,(7,(5,4))),(29,(39,((22,21),(61,(36,37))))))))),(40,(53,(((60,57),(56,20)),(19,(43,(42,((44,41),(18,(33,(50,51))))))))))),((8,(54,55)),((58,59),(45,46)))))))));
	TREE * inapplicable = [&R] (1,(2,((49,38),(((12,13),(52,(25,(23,24)))),(14,(((40,(53,(((57,60),(56,20)),(19,(43,(42,(44,(41,(18,(33,(50,51))))))))))),(((31,(15,(17,16))),((35,34),((9,(11,10)),(32,(48,47))))),(26,((3,(30,(28,27))),((29,(39,((22,21),(61,(36,37))))),(6,(7,(4,5)))))))),(8,((54,55),((59,58),(45,46))))))))));
	TREE * inapplicable = [&R] (1,(2,((38,49),(((12,13),(52,(25,(23,24)))),(14,((((26,(((6,(7,(5,4))),(29,(39,((21,22),(61,(36,37)))))),(3,(30,(28,27))))),((31,(15,(17,16))),((35,34),((32,(48,47)),(9,(10,11)))))),(40,(53,(((60,57),(56,20)),(19,(43,(42,(44,(41,(18,(33,(50,51)))))))))))),((8,(54,55)),((58,59),(45,46)))))))));
	TREE * inapplicable = [&R] (1,(2,((49,38),(((13,12),(52,(25,(24,23)))),(14,(((8,(55,54)),((59,58),(46,45))),((((31,(15,(16,17))),(((32,(47,48)),(11,(10,9))),(34,35))),(26,(((29,(39,((21,22),(61,(37,36))))),(6,(7,(4,5)))),(3,(30,(27,28)))))),(40,(53,(((57,60),(20,56)),(19,(43,(42,(41,(44,(18,(33,(51,50))))))))))))))))));
	TREE * inapplicable = [&R] (1,(2,((49,38),((52,(25,(23,24))),((((14,((8,(55,54)),((58,59),(46,45)))),(40,(53,(((57,60),(20,56)),(19,(43,(42,(44,(41,(18,(33,(50,51)))))))))))),(((31,(16,(17,15))),((35,34),((32,(47,48)),(11,(9,10))))),((26,((39,(29,(3,(30,(28,27))))),(6,(7,(5,4))))),(22,((61,21),(37,36)))))),(13,12))))));
	TREE * inapplicable = [&R] (1,(2,((49,38),(((((14,(((46,45),(58,59)),(8,(55,54)))),(40,(53,(((60,57),(20,56)),(19,(43,(42,(44,(41,(18,(33,(51,50)))))))))))),((((34,35),((32,(47,48)),(11,(10,9)))),(31,(16,(15,17)))),((26,(22,((37,36),(61,21)))),((6,(7,(4,5))),(39,(29,(3,(30,(27,28))))))))),(13,12)),(52,(25,(24,23)))))));
	TREE * inapplicable = [&R] (1,(2,(((14,(((8,(54,55)),((59,58),(45,46))),((40,(53,((19,(43,(42,(41,(44,(18,(33,(50,51)))))))),((57,60),(56,20))))),((26,(3,((6,(39,(7,(4,5)))),((29,(30,(27,28))),(21,(22,(61,(36,37)))))))),(((34,35),((32,(47,48)),(11,(9,10)))),(31,(15,(17,16)))))))),((12,13),(52,(25,(23,24))))),(38,49))));
	TREE * inapplicable = [&R] (1,(2,((49,38),(((13,12),(52,(25,(24,23)))),(14,((8,((55,54),((58,59),(46,45)))),((40,(53,((19,(43,(42,((44,41),(18,(33,(51,50))))))),((60,57),(20,56))))),((26,(3,((6,(39,(7,(5,4)))),((29,(30,(28,27))),(21,(22,(61,(37,36)))))))),(((35,34),((32,(48,47)),(11,(9,10)))),(31,(15,(16,17))))))))))));
	TREE * inapplicable = [&R] (1,(2,((49,38),(((((14,(((46,45),(58,59)),(8,(55,54)))),(40,(53,(((60,57),(20,56)),(19,(43,(42,(44,(41,(18,(33,(51,50)))))))))))),((((34,35),((32,(47,48)),(9,(10,11)))),(31,(16,(15,17)))),((26,(22,((37,36),(61,21)))),((6,(7,(4,5))),(39,(29,(3,(30,(27,28))))))))),(13,12)),(52,(25,(24,23)))))));
	TREE * inapplicable = [&R] (1,(2,((((52,(25,(24,23))),(12,13)),(14,((((26,((3,(30,(28,27))),(((29,39),(6,(7,(4,5)))),(22,(21,(61,(36,37))))))),(((34,35),((11,(10,9)),(32,(48,47)))),(31,(15,(16,17))))),(40,(53,((19,(43,(42,(41,(44,(18,(33,(50,51)))))))),((57,60),(56,20)))))),(8,((54,55),((59,58),(45,46))))))),(38,49))));
	TREE * inapplicable = [&R] (1,(2,((38,49),(((((14,(((59,58),(45,46)),(8,(54,55)))),(40,(53,(((60,57),(56,20)),(19,(43,(42,(41,(44,(18,(33,(50,51)))))))))))),(((26,(22,((61,21),(36,37)))),(((6,(7,(5,4))),(39,29)),(3,(30,(28,27))))),((31,(16,(17,15))),(((32,(47,48)),(11,(10,9))),(35,34))))),(12,13)),(52,(25,(23,24)))))));
	TREE * inapplicable = [&R] (1,(2,((38,49),(((52,(25,(23,24))),(13,12)),(14,(((40,(53,(((57,60),(20,56)),(19,(43,(42,((41,44),(18,(33,(51,50)))))))))),((26,(((29,(39,((61,(37,36)),(21,22)))),(6,(7,(5,4)))),(3,(30,(28,27))))),((31,(15,(16,17))),((35,34),((32,(48,47)),(9,(11,10))))))),((8,(55,54)),((59,58),(46,45)))))))));
	TREE * inapplicable = [&R] (1,(2,((38,49),(((52,(25,(24,23))),(13,12)),(14,(((40,(53,(((60,57),(20,56)),(19,(43,(42,(44,(41,(18,(33,(51,50))))))))))),((26,((((39,29),(6,(7,(4,5)))),(22,(21,(61,(37,36))))),(3,(30,(27,28))))),(((34,35),((11,(10,9)),(32,(48,47)))),(31,(15,(16,17)))))),(8,((55,54),((58,59),(46,45))))))))));
	TREE * inapplicable = [&R] (1,(2,((38,49),((52,(25,(24,23))),((((14,((8,(54,55)),((59,58),(45,46)))),(40,(53,((19,(43,(42,((41,44),(18,(33,(51,50))))))),((60,57),(56,20)))))),(((31,(16,(15,17))),((34,35),((32,(48,47)),(11,(9,10))))),((26,(((6,(7,(4,5))),(29,39)),(3,(30,(27,28))))),(22,((61,21),(36,37)))))),(12,13))))));
	TREE * inapplicable = [&R] (1,(2,((49,38),((52,(25,(23,24))),((((14,((8,(55,54)),((58,59),(46,45)))),(40,(53,(((57,60),(20,56)),(19,(43,(42,(41,(44,(18,(33,(50,51)))))))))))),((((35,34),((32,(47,48)),(11,(9,10)))),(31,(16,(17,15)))),((26,((3,(30,(28,27))),(22,((61,21),(37,36))))),((39,29),(6,(7,(5,4))))))),(13,12))))));
	TREE * inapplicable = [&R] (1,(2,((49,38),(((((14,((8,(55,54)),((46,45),(58,59)))),(40,(53,(((60,57),(20,56)),(19,(43,(42,(44,(41,(18,(33,(51,50)))))))))))),((((34,35),((32,(47,48)),(9,(10,11)))),(31,(16,(15,17)))),((26,(((6,(7,(4,5))),(29,39)),(3,(30,(27,28))))),(22,((37,36),(61,21)))))),(13,12)),(52,(25,(24,23)))))));
	TREE * inapplicable = [&R] (1,(2,((((52,(25,(23,24))),(13,12)),(14,((((26,(((22,(21,(61,(37,36)))),((6,(7,(5,4))),(29,39))),(3,(30,(27,28))))),((31,(15,(17,16))),(((9,(11,10)),(32,(48,47))),(35,34)))),(40,(53,((19,(43,(42,(41,(44,(18,(33,(51,50)))))))),((60,57),(20,56)))))),(8,((55,54),((59,58),(46,45))))))),(49,38))));
	TREE * inapplicable = [&R] (1,(2,((((12,13),(52,(25,(24,23)))),(14,(((40,(53,(((57,60),(56,20)),(19,(43,(42,((44,41),(18,(33,(50,51)))))))))),((26,(3,(((21,(22,(61,(36,37)))),(29,(30,(27,28)))),(6,(39,(7,(4,5))))))),((((11,(9,10)),(32,(47,48))),(34,35)),(31,(15,(16,17)))))),((8,(54,55)),((45,46),(58,59)))))),(38,49))));
	TREE * inapplicable = [&R] (1,(2,((49,38),(((13,12),(52,(25,(23,24)))),(14,((((26,(((29,(39,((61,(37,36)),(22,21)))),(6,(7,(4,5)))),(3,(30,(27,28))))),(((34,35),((32,(47,48)),(9,(11,10)))),(31,(15,(16,17))))),(40,(53,(((57,60),(20,56)),(19,(43,(42,(41,(44,(18,(33,(51,50)))))))))))),((8,(55,54)),((59,58),(46,45)))))))));
	TREE * inapplicable = [&R] (1,(2,((49,38),(((52,(25,(23,24))),(12,13)),(14,((8,((54,55),((58,59),(45,46)))),(((((34,35),((9,(10,11)),(32,(47,48)))),(31,(15,(16,17)))),(26,(3,((6,(39,(7,(4,5)))),((22,(21,(61,(36,37)))),(29,(30,(27,28)))))))),(40,(53,((19,(43,(42,(44,(41,(18,(33,(50,51)))))))),((60,57),(56,20))))))))))));
	TREE * inapplicable = [&R] (1,(2,((49,38),(((((14,(((46,45),(58,59)),(8,(55,54)))),(40,(53,(((60,57),(20,56)),(19,(43,(42,(44,(41,(18,(33,(51,50)))))))))))),((((34,35),((32,(47,48)),(9,(10,11)))),(31,(16,(15,17)))),((26,((6,(7,(5,4))),(39,(29,(3,(30,(28,27))))))),(22,((61,21),(37,36)))))),(13,12)),(52,(25,(24,23)))))));
	TREE * inapplicable = [&R] (1,(2,((38,49),(((12,13),(52,(25,(23,24)))),(14,(((((31,(15,(17,16))),(((32,(47,48)),(11,(9,10))),(35,34))),(26,((3,(30,(28,27))),((6,(7,(5,4))),(29,(39,((22,21),(61,(36,37))))))))),(40,(53,(((60,57),(56,20)),(19,(43,(42,((44,41),(18,(33,(50,51))))))))))),(8,((54,55),((58,59),(45,46))))))))));
	TREE * inapplicable = [&R] (1,(2,((38,49),(((52,(25,(24,23))),(13,12)),(14,((8,((55,54),((59,58),(46,45)))),((40,(53,((19,(43,(42,(41,(44,(18,(33,(50,51)))))))),((60,57),(20,56))))),((26,(3,(((29,(30,(28,27))),(22,(21,(61,(37,36))))),(6,(39,(7,(4,5))))))),((31,(15,(17,16))),((35,34),((32,(48,47)),(9,(10,11)))))))))))));
	TREE * inapplicable = [&R] (1,(2,((38,49),(((52,(25,(23,24))),(13,12)),(14,(((40,(53,(((60,57),(20,56)),(19,(43,(42,(41,(44,(18,(33,(51,50))))))))))),((26,((3,(30,(27,28))),(((39,29),(6,(7,(5,4)))),(22,(21,(61,(37,36))))))),(((34,35),((9,(11,10)),(32,(48,47)))),(31,(15,(16,17)))))),((8,(55,54)),((58,59),(46,45)))))))));
	TREE * inapplicable = [&R] (1,(2,((49,38),(((13,12),(52,(25,(24,23)))),(14,(((((31,(15,(17,16))),((35,34),((32,(48,47)),(11,(10,9))))),(26,((((29,39),(6,(7,(5,4)))),(22,(21,(61,(37,36))))),(3,(30,(28,27)))))),(40,(53,(((60,57),(20,56)),(19,(43,(42,(41,(44,(18,(33,(51,50)))))))))))),((8,(55,54)),((59,58),(46,45)))))))));
	TREE * inapplicable = [&R] (1,(2,((49,38),((14,((((((35,34),((32,(48,47)),(11,(9,10)))),(31,(15,(17,16)))),(26,(3,((6,(39,(7,(5,4)))),((29,(30,(28,27))),(21,(22,(61,(37,36))))))))),(40,(53,(((60,57),(20,56)),(19,(43,(42,(44,(41,(18,(33,(51,50)))))))))))),(8,((55,54),((59,58),(46,45)))))),((52,(25,(24,23))),(13,12))))));
	TREE * inapplicable = [&R] (1,(2,((((((14,((8,(55,54)),((58,59),(46,45)))),(40,(53,((19,(43,(42,((44,41),(18,(33,(51,50))))))),((60,57),(20,56)))))),(((31,(16,(15,17))),(((32,(48,47)),(9,(10,11))),(35,34))),((26,(22,((21,61),(37,36)))),((3,(29,(30,(28,27)))),((6,39),(7,(5,4))))))),(13,12)),(52,(25,(24,23)))),(49,38))));
	TREE * inapplicable = [&R] (1,(2,((49,38),(((52,(25,(24,23))),(13,12)),(14,((8,((55,54),((58,59),(46,45)))),((40,(53,(((60,57),(20,56)),(19,(43,(42,(41,(44,(18,(33,(50,51))))))))))),(((31,(15,(16,17))),(((32,(48,47)),(9,(10,11))),(35,34))),(26,(3,(((21,(22,(61,(37,36)))),(29,(30,(28,27)))),(6,(39,(7,(5,4)))))))))))))));
	TREE * inapplicable = [&R] (1,(2,((49,38),(((((14,(((59,58),(46,45)),(8,(55,54)))),(40,(53,(((60,57),(20,56)),(19,(43,(42,((44,41),(18,(33,(51,50))))))))))),(((((11,(10,9)),(32,(47,48))),(35,34)),(31,(16,(17,15)))),((26,(22,((21,61),(37,36)))),(((6,39),(7,(5,4))),(3,(29,(30,(28,27)))))))),(13,12)),(52,(25,(24,23)))))));
	TREE * inapplicable = [&R] (1,(2,((38,49),(((((14,(((58,59),(45,46)),(8,(54,55)))),(40,(53,(((60,57),(56,20)),(19,(43,(42,((44,41),(18,(33,(50,51))))))))))),(((((11,(9,10)),(32,(48,47))),(34,35)),(31,(16,(17,15)))),((26,(22,((61,21),(36,37)))),((3,(30,(27,28))),((6,(7,(4,5))),(29,39)))))),(12,13)),(52,(25,(23,24)))))));
	TREE * inapplicable = [&R] (1,(2,((49,38),((14,((8,((55,54),((59,58),(46,45)))),((40,(53,((19,(43,(42,((41,44),(18,(33,(51,50))))))),((60,57),(20,56))))),((26,((((39,29),(6,(7,(5,4)))),(22,(21,(61,(37,36))))),(3,(30,(27,28))))),(((34,35),((32,(48,47)),(9,(11,10)))),(31,(15,(17,16)))))))),((13,12),(52,(25,(23,24))))))));
	TREE * inapplicable = [&R] (1,(2,((((52,(25,(23,24))),(13,12)),(14,((((((34,35),((11,(10,9)),(32,(47,48)))),(31,(15,(17,16)))),(26,(3,(((29,(30,(27,28))),(21,(22,(61,(37,36))))),(6,(39,(7,(5,4)))))))),(40,(53,((19,(43,(42,(41,(44,(18,(33,(51,50)))))))),((60,57),(20,56)))))),(8,((55,54),((58,59),(46,45))))))),(49,38))));
	TREE * inapplicable = [&R] (1,(2,((38,49),((52,(25,(24,23))),((((14,((8,(54,55)),((59,58),(45,46)))),(40,(53,(((60,57),(56,20)),(19,(43,(42,((44,41),(18,(33,(51,50))))))))))),((((34,35),((32,(47,48)),(11,(9,10)))),(31,(16,(17,15)))),((26,(22,((36,37),(61,21)))),(((6,(29,39)),(7,(4,5))),(3,(30,(27,28))))))),(12,13))))));
END;
