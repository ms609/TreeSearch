#NEXUS
begin data;
  dimensions ntax=36 nchar=52;
  format datatype=standard gap=x missing=? Interleave=no;
  matrix
    Aphidounguis_mali                0001?111100001111?00111???0101?100-100?11002223334-1
    Byrsocryptoides_zelkovae         000?210010000110111010010000-0?100-110?00-0111114522
    Byrsocryptoides_zelkovaecola     ?001?11110001110111?100???00-0?10??110?00-0?????????
    Colopha_compressa                100??111000011111?0210010010-00?0?0110011?02434???00
    Colopha_kansugei                 000?21?10000111100-2100100110?0??0-???01110243445501
    Colopha_setaricola               100??1110000111010-2100100110?0??0-???00110243445500
    Colopha_ulmicola                 000121110000111?00-210010010-00100-0-0011?024344350?
    Colophina_arma                   0010311100101112?1101101?0110001010100000-0243445601
    Colophina_clematis               0010311100101112?110110100110001111100000-0243445601
    Eriosoma_grossulariae            01?331211010100-11?0110??0110111212100111102223334-1
    Eriosoma_harunire                0112312110?0??0-11?011?110110111212100111102223334-1
    Eriosoma_japonicum               011231?11000???01110111111110111212100111001111112-0
    Eriosoma_lanigerum               0???312110001110211011???0110?1??12???111102223334-1
    Eriosoma_yangi                   01023111?000?00-11?0110110?10111212100111102434334-0
    Gharesia_polunini                000??101100001100110100100110?0??0-???000-0243445500
    Hemipodaphis_persimilis          ?000?111100001?020-??00???1100?10??110??1?0231111520
    Kaltenbachiella_nirecola         10?12101000011120??0222000?100?100-0-0?11?02434454-1
    Kaltenbachiella_pallida          10?1?1?100001112???11??100?1000?-0-0-0011202434454-1
    Kaltenbachiella_spinosa          10?1210?0000111201?01110000100??00-0-0?11002434454-1
    Kaltenbachiella_ulmifusa         10?13101000011120??1111100?100?100-??0?1120243445???
    Paracolopha_morrisoni            0001?1?100000111?0-110010000-0?0-100-0011?02434334-1
    Schizoneurata_tissoti            ??0??121001001?0111?111???110?0??0-???011002223334-0
    Schizoneurella_indica            100?21111010?1?0?11011?0001101?110-??0?11002223334-1
    Siciunguis_decima                011?311110?001111110111111110????11????11102223334-1
    Tetraneura_nigriabdominalis      1001?1000000110-?0-01?010000-000-100-0110-02434454-0
    Tetraneura_ulmi                  100??10010001110?0-01?010000-11?0100-1111202434454-0
    Tetraneura_yezoensis             10012100?00011?0?0-01?010000-1110100-1110-02434454-0
    Zelkovaphis_trinacriae           ?000?11100001110111?111???1100?11??100?00-0243434500
    Gootiella_tremulae               10022101?10?-00-01?0000000?1100110-111100-1000222310
    Pachypappa_tremulae              0??221011101-00-0110???100?1100100-0-1100-1000222310
    Pemphigus_bursarius              1001?10110001??20110?0010001100100-111100-10002221-0
    Prociphilus_oriens               01?221011?01-1?20110??0??0011000-0-0-0100-01111112-0
    Thecabius_affinis                011?310110000??2011033322201100?00-111100-1000222300
    Forda_marginata                  1?012?010200-??2?110???222010010-0-1010---00000000-0
    Geoica_utricularia               11012?01?200-??0?1101111?0010010-0-1110---00000000-0
    Ceratovacuna_nekoashi            0001101-001011120110?001101100010100-0000-01111112-3
  ;
end;

BEGIN TAXA;
	DIMENSIONS NTAX = 36;
	TAXLABELS
		Aphidounguis_mali
		Byrsocryptoides_zelkovae
		Byrsocryptoides_zelkovaecola
		Colopha_compressa
		Colopha_kansugei
		Colopha_setaricola
		Colopha_ulmicola
		Colophina_arma
		Colophina_clematis
		Eriosoma_grossulariae
		Eriosoma_harunire
		Eriosoma_japonicum
		Eriosoma_lanigerum
		Eriosoma_yangi
		Gharesia_polunini
		Hemipodaphis_persimilis
		Kaltenbachiella_nirecola
		Kaltenbachiella_pallida
		Kaltenbachiella_spinosa
		Kaltenbachiella_ulmifusa
		Paracolopha_morrisoni
		Schizoneurata_tissoti
		Schizoneurella_indica
		Siciunguis_decima
		Tetraneura_nigriabdominalis
		Tetraneura_ulmi
		Tetraneura_yezoensis
		Zelkovaphis_trinacriae
		Gootiella_tremulae
		Pachypappa_tremulae
		Pemphigus_bursarius
		Prociphilus_oriens
		Thecabius_affinis
		Forda_marginata
		Geoica_utricularia
		Ceratovacuna_nekoashi
	;
END;
BEGIN TREES;
	TRANSLATE
		1	Aphidounguis_mali,
		2	Byrsocryptoides_zelkovae,
		3	Byrsocryptoides_zelkovaecola,
		4	Colopha_compressa,
		5	Colopha_kansugei,
		6	Colopha_setaricola,
		7	Colopha_ulmicola,
		8	Colophina_arma,
		9	Colophina_clematis,
		10	Eriosoma_grossulariae,
		11	Eriosoma_harunire,
		12	Eriosoma_japonicum,
		13	Eriosoma_lanigerum,
		14	Eriosoma_yangi,
		15	Gharesia_polunini,
		16	Hemipodaphis_persimilis,
		17	Kaltenbachiella_nirecola,
		18	Kaltenbachiella_pallida,
		19	Kaltenbachiella_spinosa,
		20	Kaltenbachiella_ulmifusa,
		21	Paracolopha_morrisoni,
		22	Schizoneurata_tissoti,
		23	Schizoneurella_indica,
		24	Siciunguis_decima,
		25	Tetraneura_nigriabdominalis,
		26	Tetraneura_ulmi,
		27	Tetraneura_yezoensis,
		28	Zelkovaphis_trinacriae,
		29	Gootiella_tremulae,
		30	Pachypappa_tremulae,
		31	Pemphigus_bursarius,
		32	Prociphilus_oriens,
		33	Thecabius_affinis,
		34	Forda_marginata,
		35	Geoica_utricularia,
		36	Ceratovacuna_nekoashi
	;
	TREE * ambiguous = [&R] (1,(((16,((2,(3,(36,(32,(30,(29,(31,(33,(34,35))))))))),(15,((6,(4,((5,7),((18,(20,(17,19))),(21,(25,(26,27))))))),(28,(8,9)))))),((13,(11,(10,14))),(12,24))),(22,23)));
	TREE * ambiguous = [&R] (1,(((16,(((2,3),(36,(32,(30,(29,(31,(33,(34,35)))))))),(15,((6,(4,((5,7),((20,(18,(17,19))),(21,(25,(26,27))))))),(28,(8,9)))))),(14,((13,(10,11)),(12,24)))),(22,23)));
	TREE * ambiguous = [&R] (1,((23,(22,(28,(((15,(16,((2,3),(36,(32,(30,(29,(31,(33,(34,35)))))))))),(6,(4,((5,7),((18,(20,(17,19))),(21,(25,(26,27)))))))),(8,9))))),(12,(24,(13,(14,(10,11)))))));
	TREE * ambiguous = [&R] (1,(((28,(((15,(16,(2,(3,(36,(32,(30,(29,(31,(33,(34,35))))))))))),(6,(4,((5,7),((20,(18,(17,19))),(21,(25,(26,27)))))))),(8,9))),((13,(11,(10,14))),(12,24))),(22,23)));
	TREE * ambiguous = [&R] (1,(23,((22,(28,(((15,(16,(2,(3,(36,(32,(30,(29,(31,(33,(34,35))))))))))),(6,(4,((5,7),((20,(18,(17,19))),(21,(25,(26,27)))))))),(8,9)))),(12,(24,(13,(10,(11,14))))))));
	TREE * ambiguous = [&R] (1,(23,(22,((16,(((2,3),(36,(32,(30,(29,(31,(33,(34,35)))))))),(15,((6,(4,((5,7),((20,(18,(17,19))),(21,(25,(26,27))))))),(28,(8,9)))))),(14,((13,(10,11)),(12,24)))))));
	TREE * ambiguous = [&R] (1,(((28,(((15,(16,((2,3),(36,(32,(30,(29,(31,(33,(34,35)))))))))),(6,(4,((5,7),((20,(18,(17,19))),(21,(25,(26,27)))))))),(8,9))),((13,(14,(10,11))),(12,24))),(22,23)));
	TREE * ambiguous = [&R] (1,(((16,(((2,3),(36,(32,(30,(29,(31,(33,(34,35)))))))),(15,((6,(4,((5,7),(((17,19),(18,20)),(21,(25,(26,27))))))),(28,(8,9)))))),((13,(11,(10,14))),(12,24))),(22,23)));
	TREE * ambiguous = [&R] (1,((22,(28,(((15,(16,(2,(3,(36,(32,(30,(29,(31,(33,(34,35))))))))))),(6,(4,((5,7),((20,(18,(17,19))),(21,(25,(26,27)))))))),(8,9)))),(23,((13,(14,(10,11))),(12,24)))));
	TREE * ambiguous = [&R] (1,(23,(22,((16,((2,(3,(36,(32,(30,(29,(31,(33,(34,35))))))))),(15,((6,(4,((5,7),(((17,19),(18,20)),(21,(25,(26,27))))))),(28,(8,9)))))),(14,((13,(10,11)),(12,24)))))));
	TREE * ambiguous = [&R] (1,((23,(22,(28,(((15,(16,((2,3),(36,(32,(30,(29,(31,(33,(34,35)))))))))),(6,(4,((5,7),((18,(20,(17,19))),(21,(25,(26,27)))))))),(8,9))))),((13,(14,(10,11))),(12,24))));
	TREE * ambiguous = [&R] (1,(((28,(((15,(16,((2,3),(36,(32,(30,(29,(31,(33,(34,35)))))))))),(6,(4,((5,7),((20,(18,(17,19))),(21,(25,(26,27)))))))),(8,9))),((10,14),((11,13),(12,24)))),(22,23)));
	TREE * ambiguous = [&R] (1,(((28,(((15,(16,((2,3),(36,(32,(30,(29,(31,(33,(34,35)))))))))),(6,(4,((5,7),((20,(18,(17,19))),(21,(25,(26,27)))))))),(8,9))),((13,(10,(11,14))),(12,24))),(22,23)));
	TREE * ambiguous = [&R] (1,(((16,((2,(3,(36,(32,(30,(29,(31,(33,(34,35))))))))),(15,((6,(4,((5,7),(((17,19),(18,20)),(21,(25,(26,27))))))),(28,(8,9)))))),(14,((13,(10,11)),(12,24)))),(22,23)));
	TREE * ambiguous = [&R] (1,(((28,(((15,(16,(2,(3,(36,(32,(30,(29,(31,(33,(34,35))))))))))),(6,(4,((5,7),((20,(18,(17,19))),(21,(25,(26,27)))))))),(8,9))),((13,(14,(10,11))),(12,24))),(22,23)));
	TREE * ambiguous = [&R] (1,(((28,(((15,(16,((2,3),(36,(32,(30,(29,(31,(33,(34,35)))))))))),(6,(4,((5,7),((20,(18,(17,19))),(21,(25,(26,27)))))))),(8,9))),((14,(10,11)),(13,(12,24)))),(22,23)));
	TREE * ambiguous = [&R] (1,(((28,(((15,(16,(2,(3,(36,(32,(30,(29,(31,(33,(34,35))))))))))),(6,(4,((5,7),(((17,19),(18,20)),(21,(25,(26,27)))))))),(8,9))),((14,(10,11)),(13,(12,24)))),(22,23)));
	TREE * ambiguous = [&R] (1,(((28,(((15,(16,(2,(3,(36,(32,(30,(29,(31,(33,(34,35))))))))))),(6,(4,((5,7),((18,(20,(17,19))),(21,(25,(26,27)))))))),(8,9))),((10,14),((11,13),(12,24)))),(22,23)));
	TREE * extraState = [&R] (1,(23,((22,(28,(((15,(16,((2,3),(((33,(31,(29,30))),(34,35)),(32,36))))),(6,(4,((5,7),((20,(17,19)),(18,(21,(25,(26,27))))))))),(8,9)))),(12,(24,(13,(14,(10,11))))))));
	TREE * extraState = [&R] (1,(23,((22,(28,(((15,(16,((2,3),((((29,30),(31,33)),(34,35)),(32,36))))),(6,(4,((5,7),((20,(18,(17,19))),(21,(25,(26,27)))))))),(8,9)))),((13,(14,(10,11))),(12,24)))));
	TREE * extraState = [&R] (1,((22,(28,(((15,(16,((2,3),(((31,(33,(29,30))),(34,35)),(32,36))))),(6,(4,((5,7),((20,(18,(17,19))),(21,(25,(26,27)))))))),(8,9)))),(23,(12,(24,(13,(14,(10,11))))))));
	TREE * extraState = [&R] (1,((22,(28,(((15,(16,((2,3),(36,(32,(30,(29,(31,(33,(34,35)))))))))),(6,(4,((5,7),((18,(20,(17,19))),(21,(25,(26,27)))))))),(8,9)))),(23,((13,(10,(11,14))),(12,24)))));
	TREE * extraState = [&R] (1,(23,((22,(28,(((15,(16,((2,3),(36,(32,(31,((29,30),(33,(34,35))))))))),(6,(4,((5,7),(((17,19),(18,20)),(21,(25,(26,27)))))))),(8,9)))),((13,(11,(10,14))),(12,24)))));
	TREE * extraState = [&R] (1,(23,((22,(28,(((15,(16,((2,3),(36,(32,(30,(29,(31,(33,(34,35)))))))))),(6,(4,((5,7),((20,(17,19)),(18,(21,(25,(26,27))))))))),(8,9)))),(12,(24,(13,(14,(10,11))))))));
	TREE * extraState = [&R] (1,(23,((22,(28,(((15,(16,((2,3),(36,(32,(30,(29,(31,(33,(34,35)))))))))),(6,(4,((5,7),((18,(20,(17,19))),(21,(25,(26,27)))))))),(8,9)))),(12,(24,(13,(11,(10,14))))))));
	TREE * extraState = [&R] (1,((22,(28,(((15,(16,((2,3),(36,(32,(33,((31,(29,30)),(34,35)))))))),(6,(4,((5,7),((20,(17,19)),(18,(21,(25,(26,27))))))))),(8,9)))),(23,(12,(24,(13,(10,(11,14))))))));
	TREE * extraState = [&R] (1,((22,(28,(((15,(16,((2,3),(36,(32,(31,((29,30),(33,(34,35))))))))),(6,(4,((5,7),((20,(18,(17,19))),(21,(25,(26,27)))))))),(8,9)))),(23,(12,(24,(13,(11,(10,14))))))));
	TREE * extraState = [&R] (1,((22,(28,(((15,(16,((2,3),(36,(32,((33,(31,(29,30))),(34,35))))))),(6,(4,((5,7),((20,(17,19)),(18,(21,(25,(26,27))))))))),(8,9)))),(23,((13,(14,(10,11))),(12,24)))));
	TREE * extraState = [&R] (1,(23,((22,(28,(((15,(16,((2,3),(36,(32,(33,((31,(29,30)),(34,35)))))))),(6,(4,((5,7),((20,(17,19)),(18,(21,(25,(26,27))))))))),(8,9)))),((13,(10,(11,14))),(12,24)))));
	TREE * extraState = [&R] (1,(23,((22,(28,(((15,(16,((2,3),(36,(32,(31,((29,30),(33,(34,35))))))))),(6,(4,((5,7),((20,(17,19)),(18,(21,(25,(26,27))))))))),(8,9)))),(12,(24,(13,(11,(10,14))))))));
	TREE * extraState = [&R] (1,((23,(22,(28,(((15,(16,((2,3),(36,(32,((33,(31,(29,30))),(34,35))))))),(6,(4,((5,7),((18,(20,(17,19))),(21,(25,(26,27)))))))),(8,9))))),(12,(24,(13,(10,(11,14)))))));
	TREE * extraState = [&R] (1,(23,((22,(28,(((15,(16,((2,3),(((33,(31,(29,30))),(34,35)),(32,36))))),(6,(4,((5,7),((20,(17,19)),(18,(21,(25,(26,27))))))))),(8,9)))),((13,(11,(10,14))),(12,24)))));
	TREE * extraState = [&R] (1,(23,((22,(28,(((15,(16,((2,3),(36,(32,((33,(31,(29,30))),(34,35))))))),(6,(4,((5,7),(((17,19),(18,20)),(21,(25,(26,27)))))))),(8,9)))),((13,(10,(11,14))),(12,24)))));
	TREE * extraState = [&R] (1,(23,((22,(28,(((15,(16,((2,3),(36,(32,(33,((31,(29,30)),(34,35)))))))),(6,(4,((5,7),((20,(18,(17,19))),(21,(25,(26,27)))))))),(8,9)))),((13,(10,(11,14))),(12,24)))));
	TREE * extraState = [&R] (1,((23,(22,(28,(((15,(16,((2,3),(36,(32,((33,(31,(29,30))),(34,35))))))),(6,(4,((5,7),((20,(17,19)),(18,(21,(25,(26,27))))))))),(8,9))))),(12,(24,(13,(14,(10,11)))))));
	TREE * extraState = [&R] (1,((23,(22,(28,(((15,(16,((2,3),(36,(32,(30,(29,(31,(33,(34,35)))))))))),(6,(4,((5,7),((20,(17,19)),(18,(21,(25,(26,27))))))))),(8,9))))),((13,(14,(10,11))),(12,24))));
	TREE * extraState = [&R] (1,((23,(22,(28,(((15,(16,((2,3),(36,(32,(33,((31,(29,30)),(34,35)))))))),(6,(4,((5,7),((20,(18,(17,19))),(21,(25,(26,27)))))))),(8,9))))),(12,(24,(13,(10,(11,14)))))));
	TREE * extraState = [&R] (1,(23,((22,(28,(((15,(16,((2,3),(36,(32,(31,((29,30),(33,(34,35))))))))),(6,(4,((5,7),((20,(17,19)),(18,(21,(25,(26,27))))))))),(8,9)))),((13,(10,(11,14))),(12,24)))));
	TREE * inapplicable = [&R] (1,((23,(12,(24,(13,(10,(14,11)))))),(22,(28,((9,8),((6,(4,((5,7),((21,(25,(26,27))),(18,(20,(19,17))))))),(15,(16,((3,2),(36,(32,((31,(33,(34,35))),(30,29)))))))))))));
	TREE * inapplicable = [&R] (1,((23,(12,(24,(13,(10,(11,14)))))),(22,(28,(((15,(16,(2,(3,(36,(32,((31,(29,30)),(33,(35,34))))))))),(6,(4,((5,7),((21,(25,(27,26))),((18,20),(17,19))))))),(9,8))))));
	TREE * inapplicable = [&R] (1,((23,(22,(28,(((15,(16,((3,2),(36,(32,(31,((33,(35,34)),(29,30)))))))),(6,(4,((5,7),(((18,20),(17,19)),(21,(25,(26,27)))))))),(8,9))))),((24,12),(13,(11,(10,14))))));
	TREE * inapplicable = [&R] (1,((23,(22,(28,((9,8),((15,(16,((3,2),(36,(32,((33,(31,(29,30))),(35,34))))))),(6,(4,((5,7),((21,(25,(26,27))),(20,(18,(17,19)))))))))))),(12,(24,(13,(11,(14,10)))))));
	TREE * inapplicable = [&R] (1,((23,(22,(28,(((15,(16,(2,(3,(36,(32,(33,((35,34),(31,(29,30)))))))))),(6,(4,((7,5),(((18,20),(17,19)),(21,(25,(26,27)))))))),(9,8))))),((24,12),(13,(11,(14,10))))));
	TREE * inapplicable = [&R] (1,((23,((12,24),(13,(10,(14,11))))),(22,(28,(((15,(16,(2,(3,(36,(32,(31,((33,(35,34)),(29,30))))))))),(6,(4,(((21,(25,(26,27))),(18,(20,(17,19)))),(5,7))))),(8,9))))));
	TREE * inapplicable = [&R] (1,((23,(12,(24,(13,(10,(11,14)))))),(22,(28,((9,8),((15,(16,(2,(3,(36,(32,((33,(35,34)),(31,(30,29))))))))),(6,(4,((7,5),((20,(18,(19,17))),(21,(25,(26,27)))))))))))));
	TREE * inapplicable = [&R] (1,((23,(22,(28,((8,9),((15,(16,((3,2),(36,(32,((31,(33,(35,34))),(30,29))))))),(6,(4,((5,7),((18,(20,(17,19))),(21,(25,(27,26)))))))))))),((24,12),(13,(10,(11,14))))));
	TREE * inapplicable = [&R] (1,(23,((22,(28,((8,9),((6,(4,((5,7),((18,(20,(19,17))),(21,(25,(27,26))))))),(15,(16,((3,2),(36,(32,(33,((31,(29,30)),(35,34)))))))))))),(12,(24,(13,(11,(10,14))))))));
	TREE * inapplicable = [&R] (1,(23,(((24,12),(13,(14,(11,10)))),(22,(28,(((6,(4,((7,5),((21,(25,(26,27))),((20,18),(19,17)))))),(15,(16,((2,3),(36,(32,((33,(34,35)),(31,(30,29))))))))),(9,8)))))));
	TREE * inapplicable = [&R] (1,((23,(22,(28,((8,9),((15,(16,((3,2),(36,(32,(33,((31,(29,30)),(35,34)))))))),(6,(4,((5,7),((21,(25,(27,26))),(20,(18,(19,17)))))))))))),((12,24),(13,(14,(10,11))))));
	TREE * inapplicable = [&R] (1,((23,(12,(24,(13,(14,(10,11)))))),(22,(28,((9,8),((6,(4,((5,7),(((18,20),(17,19)),(21,(25,(26,27))))))),(15,(16,((2,3),(36,(32,(31,((33,(34,35)),(30,29))))))))))))));
	TREE * inapplicable = [&R] (1,(23,(((12,24),(13,(14,(11,10)))),(22,(28,(((15,(16,(2,(3,(36,(32,((31,(30,29)),(33,(34,35))))))))),(6,(4,((7,5),((18,(20,(19,17))),(21,(25,(26,27)))))))),(9,8)))))));
	TREE * inapplicable = [&R] (1,(23,((22,(28,((9,8),((15,(16,(2,(3,(36,(32,(31,((29,30),(33,(35,34)))))))))),(6,(4,((7,5),((18,(20,(19,17))),(21,(25,(26,27))))))))))),((24,12),(13,(11,(14,10)))))));
	TREE * inapplicable = [&R] (1,((23,(12,(24,(13,(11,(14,10)))))),(22,(28,(((15,(16,((3,2),(36,(32,((31,(33,(34,35))),(29,30))))))),(6,(4,((7,5),(((18,20),(17,19)),(21,(25,(26,27)))))))),(9,8))))));
	TREE * inapplicable = [&R] (1,((23,((12,24),(13,(10,(14,11))))),(22,(28,((9,8),((15,(16,((2,3),(36,(32,(33,((31,(29,30)),(34,35)))))))),(6,(4,((7,5),((21,(25,(26,27))),((20,18),(17,19))))))))))));
	TREE * inapplicable = [&R] (1,(23,((22,(28,((8,9),((15,(16,(2,(3,(36,(32,(31,((33,(35,34)),(30,29))))))))),(6,(4,((7,5),((21,(25,(26,27))),(20,(18,(19,17))))))))))),((12,24),(13,(10,(14,11)))))));
	TREE * inapplicable = [&R] (1,((23,(22,(28,(((6,(4,((7,5),((21,(25,(26,27))),(20,(18,(17,19))))))),(15,(16,(2,(3,(36,(32,(31,((30,29),(33,(35,34))))))))))),(8,9))))),((24,12),(13,(14,(10,11))))));
	TREE * inapplicable = [&R] (1,((23,(12,(24,(13,(10,(11,14)))))),(22,(28,(((15,(16,(2,(3,(36,(32,((33,(34,35)),(31,(30,29))))))))),(6,(4,((5,7),((18,(20,(19,17))),(21,(25,(26,27)))))))),(8,9))))));
	TREE * inapplicable = [&R] (1,((23,(22,(28,((9,8),((15,(16,((2,3),(36,(32,((31,(29,30)),(33,(34,35)))))))),(6,(4,(((21,(25,(27,26))),(20,(18,(19,17)))),(7,5))))))))),(12,(24,(13,(14,(10,11)))))));
	TREE * inapplicable = [&R] (1,((23,(22,(28,((9,8),((15,(16,((3,2),(36,(32,((31,(33,(35,34))),(29,30))))))),(6,(4,((7,5),((21,(25,(27,26))),((18,20),(17,19))))))))))),(12,(24,(13,(11,(10,14)))))));
	TREE * inapplicable = [&R] (1,((23,((13,(14,(11,10))),(24,12))),(22,(28,(((15,(16,(2,(3,(36,(32,((33,(31,(29,30))),(35,34)))))))),(6,(4,((7,5),((18,(20,(17,19))),(21,(25,(26,27)))))))),(9,8))))));
	TREE * inapplicable = [&R] (1,((23,((24,12),(13,(10,(11,14))))),(22,(28,(((15,(16,(2,(3,(36,(32,(31,((33,(35,34)),(29,30))))))))),(6,(4,((7,5),((20,(18,(17,19))),(21,(25,(27,26)))))))),(9,8))))));
	TREE * inapplicable = [&R] (1,((23,(22,(28,(((15,(16,((3,2),(36,(32,(33,((31,(29,30)),(35,34)))))))),(6,(4,((7,5),((21,(25,(27,26))),(18,(20,(17,19)))))))),(9,8))))),(12,(24,(13,(10,(14,11)))))));
	TREE * inapplicable = [&R] (1,((23,((24,12),(13,(14,(11,10))))),(22,(28,(((15,(16,(2,(3,(36,(32,((31,(33,(35,34))),(29,30)))))))),(6,(4,((5,7),((21,(25,(26,27))),((20,18),(17,19))))))),(8,9))))));
	TREE * inapplicable = [&R] (1,((23,(22,(28,(((6,(4,((7,5),((21,(25,(26,27))),((18,20),(17,19)))))),(15,(16,((36,(32,((33,(34,35)),(31,(30,29))))),(2,3))))),(9,8))))),((12,24),(13,(14,(11,10))))));
	TREE * inapplicable = [&R] (1,((23,(22,(28,(((15,(16,((2,3),(36,(32,(31,((33,(34,35)),(30,29)))))))),(6,(4,((5,7),((21,(25,(26,27))),((18,20),(17,19))))))),(9,8))))),((24,12),(13,(14,(11,10))))));
	TREE * inapplicable = [&R] (1,(23,((22,(28,(((6,(4,(((18,(20,(17,19))),(21,(25,(27,26)))),(5,7)))),(15,(16,(2,(3,(36,(32,((33,(35,34)),(31,(29,30)))))))))),(9,8)))),(12,(24,(13,(14,(10,11))))))));
	TREE * inapplicable = [&R] (1,((23,(22,(28,((9,8),((6,(4,((7,5),((21,(25,(27,26))),(18,(20,(19,17))))))),(15,(16,((2,3),(36,(32,((33,(31,(30,29))),(34,35)))))))))))),((24,12),(13,(10,(14,11))))));
	TREE * inapplicable = [&R] (1,((23,((12,24),(13,(11,(14,10))))),(22,(28,(((15,(16,((2,3),(36,(32,((33,(35,34)),(31,(29,30)))))))),(6,(4,((7,5),((21,(25,(27,26))),(18,(20,(17,19)))))))),(9,8))))));
	TREE * inapplicable = [&R] (1,(23,(((12,24),(13,(10,(11,14)))),(22,(28,(((15,(16,(2,(3,(36,(32,(33,((31,(30,29)),(34,35))))))))),(6,(4,((5,7),(((20,18),(19,17)),(21,(25,(27,26)))))))),(9,8)))))));
	TREE * inapplicable = [&R] (1,((23,(22,(28,((8,9),((15,(16,(2,(3,(36,(32,(33,((31,(29,30)),(35,34))))))))),(6,(4,((7,5),((21,(25,(26,27))),(20,(18,(19,17)))))))))))),(12,(24,(13,(10,(14,11)))))));
	TREE * inapplicable = [&R] (1,((23,(12,(24,(13,(14,(11,10)))))),(22,(28,((9,8),((15,(16,(2,(3,(36,(32,((33,(35,34)),(31,(29,30))))))))),(6,(4,((7,5),(((20,18),(17,19)),(21,(25,(26,27)))))))))))));
	TREE * inapplicable = [&R] (1,(23,(((24,12),(13,(14,(11,10)))),(22,(28,((9,8),((6,(4,((7,5),((21,(25,(26,27))),(20,(18,(17,19))))))),(15,(16,(2,(3,(36,(32,(33,((31,(30,29)),(34,35))))))))))))))));
	TREE * inapplicable = [&R] (1,((23,(22,(28,((9,8),((6,(4,((7,5),((21,(25,(26,27))),((18,20),(17,19)))))),(15,(16,((2,3),(36,(32,(31,((33,(34,35)),(30,29))))))))))))),((12,24),(13,(10,(11,14))))));
	TREE * inapplicable = [&R] (1,((23,((13,(11,(14,10))),(12,24))),(22,(28,(((15,(16,((3,2),(36,(32,((31,(33,(35,34))),(30,29))))))),(6,(4,((7,5),((20,(18,(19,17))),(21,(25,(27,26)))))))),(8,9))))));
	TREE * inapplicable = [&R] (1,((23,(22,(28,(((6,(4,((5,7),((18,(20,(19,17))),(21,(25,(26,27))))))),(15,(16,(2,(3,(36,(32,((31,(33,(35,34))),(30,29))))))))),(9,8))))),(12,(24,(13,(14,(11,10)))))));
	TREE * inapplicable = [&R] (1,(23,((22,(28,(((6,(4,((7,5),((21,(25,(27,26))),(20,(18,(17,19))))))),(15,(16,(2,(3,(36,(32,(33,((34,35),(31,(29,30))))))))))),(9,8)))),((24,12),(13,(11,(10,14)))))));
	TREE * inapplicable = [&R] (1,((23,(22,(28,((9,8),((6,(4,((7,5),((21,(25,(26,27))),(20,(18,(17,19))))))),(15,(16,(2,(3,(36,(32,(31,((30,29),(33,(35,34))))))))))))))),((12,24),(13,(10,(14,11))))));
	TREE * inapplicable = [&R] (1,((23,(22,(28,((8,9),((15,(16,(2,(3,(36,(32,(31,((33,(35,34)),(30,29))))))))),(6,(4,(((21,(25,(26,27))),((18,20),(17,19))),(5,7))))))))),((24,12),(13,(14,(10,11))))));
	TREE * inapplicable = [&R] (1,((23,(22,(28,(((15,(16,((2,3),(36,(32,((31,(33,(34,35))),(30,29))))))),(6,(4,((5,7),((21,(25,(27,26))),(20,(18,(19,17)))))))),(9,8))))),(12,(24,(13,(14,(11,10)))))));
	TREE * inapplicable = [&R] (1,(23,((22,(28,((9,8),((15,(16,((2,3),(36,(32,(33,((31,(30,29)),(34,35)))))))),(6,(4,((7,5),((21,(25,(26,27))),((20,18),(19,17)))))))))),((13,(10,(14,11))),(24,12)))));
	TREE * inapplicable = [&R] (1,(23,((22,(28,(((15,(16,(2,(3,(36,(32,(31,((30,29),(33,(35,34)))))))))),(6,(4,((7,5),((21,(25,(27,26))),(20,(18,(19,17)))))))),(8,9)))),(12,(24,(13,(11,(10,14))))))));
	TREE * inapplicable = [&R] (1,(23,((22,(28,(((15,(16,((3,2),(36,(32,(31,((30,29),(33,(34,35))))))))),(6,(4,((7,5),((20,(18,(19,17))),(21,(25,(26,27)))))))),(8,9)))),((24,12),(13,(11,(14,10)))))));
	TREE * inapplicable = [&R] (1,((23,(22,(28,((9,8),((15,(16,(2,(3,(36,(32,(31,((33,(35,34)),(29,30))))))))),(6,(4,((7,5),((21,(25,(26,27))),(18,(20,(17,19)))))))))))),(12,(24,(13,(11,(10,14)))))));
	TREE * inapplicable = [&R] (1,((23,(22,(28,((9,8),((6,(4,((5,7),((21,(25,(26,27))),((18,20),(17,19)))))),(15,(16,((2,3),(36,(32,((33,(35,34)),(31,(29,30))))))))))))),((12,24),(13,(11,(14,10))))));
	TREE * inapplicable = [&R] (1,((23,(12,(24,(13,(14,(11,10)))))),(22,(28,((9,8),((15,(16,((2,3),(36,(32,(33,((35,34),(31,(29,30))))))))),(6,(4,((5,7),(((18,20),(19,17)),(21,(25,(27,26)))))))))))));
	TREE * inapplicable = [&R] (1,(23,((12,(24,(13,(14,(11,10))))),(22,(28,((9,8),((15,(16,((3,2),(36,(32,((33,(31,(29,30))),(35,34))))))),(6,(4,((7,5),((21,(25,(26,27))),(20,(18,(17,19))))))))))))));
	TREE * inapplicable = [&R] (1,((23,(22,(28,((8,9),((15,(16,(2,(3,(36,(32,(33,((35,34),(31,(30,29)))))))))),(6,(4,(((21,(25,(26,27))),(18,(20,(17,19)))),(5,7))))))))),(12,(24,(13,(10,(14,11)))))));
	TREE * inapplicable = [&R] (1,((23,(22,(28,((8,9),((6,(4,((5,7),((21,(25,(26,27))),(20,(18,(17,19))))))),(15,(16,(2,(3,(36,(32,((31,(33,(35,34))),(29,30))))))))))))),(12,(24,(13,(10,(11,14)))))));
END;
