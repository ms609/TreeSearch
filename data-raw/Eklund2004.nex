#NEXUS
begin data;
  dimensions ntax=54 nchar=131;
  format datatype=standard gap=- missing=? Interleave=no SYMBOLS= "0123456789";
  matrix
    Amborella                       00020?00-0001010001--1-00-00-000000100000000?0210----0-00--0---000000?000-01-000000002000110-101101100000000000010-10000001100??110
    Cabombaceae                     2002?110-???21??0?1--0-01-0?-000001??10000?0?1000----0-00--0---011100?000-01-11000010?10?020-0010000?0100011101120-00?0??02000??010
    Nuphar                          200??110-???2100001--0-01-10-0??001??11000?0?1000----0-00--0---001100?000-01-11022010?00?100-002000000100011101000-0110?012000??100
    Austrobaileya                   0002000100001020001--0-00-00-010000010010000?0000----0-00--0---000000?000-01-10000110210?100-012101001020000000010-201000011010?020
    Trimenia                        00020001?0??102000?--1-00-10-110000?10011000?0?10----0-00--0---000000?100-11-000?001?0000?00-00211?100110000?00020-10000?011??0?120
    Illicium                        0011?00100000000000--0-00-10-000000011111000?0000----0-00--0---000000?000-01-00101111210?121-022?0110?110000000010-00?0000111120020
    Schisandraceae                  0011?00100001000000--1-00-00-000000010111000?0?00----0-00--0---000000?00?-01-10000111?00?100-012101??0110000000010-00100?0111120020
    Saururaceae                     2000?0011001?010011--0-01-00-00?003?1101?000?1020----0-00--0---1------0-?-01-1021301121000??-1101101000?0101001120-00000100100??021
    Asaroideae                      2003?00111?1?010011--0-01-00-000001??1010000?1000----0-00--0---011110?011-01-102231102?00021-0101????00?0200001120-1010020110?21020
    Winteraceae                     00?3?000-0010000000--0-00-10-000000000010000?1010----0-00--0---00121??000-01-102031102100000-011100000100000001210-0011020110120020
    Ascarina_coursii                00????0-??????200000110001110011104??????000??220000?000000000-1------1-?-01?0?0-????1000000-?0?????0????????0?000-101?010110110121
    Ascarina_diffusa                000??001000100200?0101000111001210412????000??132000?010000000-1------1-0-01?000-????1000000-10?????2????????1??00-102?01011011?121
    Ascarina_lucida                 000200010001??200?00211000110012104120?10000??132000?010000000-1------1-0-01?000-000010??000-10021002??????0?1??00-101????110110121
    Ascarina_marquesensis           00????0-??????200?0011000111001210???????000??2220?0?000??00??-1------???-?1????-????????0??-????????????????0?000-00??01011011012?
    Ascarina_phillipinensis         000??001000100200?00?100011010111041?????000??220000?000000000-1------1-?-010000-????1000000-10?????0????????0?000-101?010110110121
    Ascarina_rubricaulis            00????011001??200?0101000111001210412001000011122000?000000000-1------1-?-010000-00001000000-10021002?001200?0?000-1021010110110121
    Ascarina_solmsiana              00????010001??200?01110001100011104??0???00011220?00?0?0000000-1------1-?-01?000-????1000000-1002???00001200?0?000-101??101101?0121
    Ascarina_swamyana               00????010001??200?0111000111001210???0???000??132000?010010000-1------1-?-01?0?0-????1000000-?0?????2????????1??00-10??010?????????
    Chloranthus_angustifolius       210??00-?1??00200?01011000000001112110???0002?020310?0?0000010-1------1-1-11?0?0-????00000000???????????????????0213-??10111413102?
    Chloranthus_erectus             10021001000100200?02110000000001100110?1?0002?020010?0?0000100-1------1-1-112000-????0010000110220??00001200?????221-00101115111021
    Chloranthus_fortunei            2002100-?1??00211?00211000000001112??0???00021020310?0?0030010-1------1-1-11?0?0-????00000001???????0???????????0213-0?10111413102?
    Chloranthus_japonicus           2102100111?100211?01211000000001112110???00021020310?0?0010000-1------1-1-111000-0???0000000?10220??00001200????0313-00111114111120
    Chloranthus_nervosus            21?????-?1????211?01211000100001112110???0012?020300?0?0001000-1------1-1-11?0?0-????00000001???????????????????0213-0?00101413102?
    Chloranthus_oldhamii            20?????-??????2?0?01211000000001100110???00121020010?0?0001000-1------1-1-?1?000-????0000000??0?????????????????0202-0?20111413?021
    Chloranthus_serratus            21021?011011??200?01111000000001100110???00021020000?0?0031100-1------1-1-111000-0???0000000110220??00001?00????1212-00201114131020
    Chloranthus_spicatus            10021001?00?00200000110000000002100110?1000021020010?0?0000000-1------1-1-?11000-00010010000110220010?001200?????221-10101014111020
    Hedyosmum_angustifolium         00????0-??????200?0101000102000210????01?010??231211100120000110211?1011-000?0?0-?????101030-???????0????????1??00-001?010113110121
    Hedyosmum_arborescens           0002000110?100200?011100010?1102103?000100000?231010000110000100211?0011-000?0?0-?????101030-???????0????????1??00-?11?010113110121
    Hedyosmum_bonplandianum         00????0100?1??200?0111000002100210???011?100??22?000111110?00100211?0011-101?0?0-?????101030-???????0????????1??00-011?01011311012?
    Hedysomum_brasiliense           00????01001100200?02010001??0002103?0001010000231000010110200100211?0011-000?0?0-?????101030-???????1????????1??00-011?010113110121
    Hedyosmum_burgerianum           00????0-??????200?0011000002100210????0??000??231?011001100001-0211?0111-000?0?0-?????10?030-????????????????1??00-011??1011310?12?
    Hedyosmum_cuatrecazanum         00????0-??????200?0111200102100210????01?100??231?010?012??00110211?1011-000?0?0-?????100030-???????0????????1??00-011?01011311012?
    Hedyosmum_cumbalense            00????010011??200?0011000102100211???001?100??2313?1000120000110211?1011-000?0?0-?????10?030-???????0????????1??00-011?010113110121
    Hedyosmum_dombeyanum            00????0-??????200?0111000002100211????11?000??231000010110200100211?1011-000?0?0-?????101030-???????0????????1??00-011?01?????????1
    Hedyosmum_grisebachii           000???01??????200?0101000102100210????0??100??2310100001022100-0211?0011-10000?0-?????101030-???????0????????1??00-10??010113110121
    Hedyosmum_huascari              00????0-??????200??011000-??-0?211????0??100??231?0010?112?001-0211?1?11-000?0?0-?????10?030-????????????????1??00-????????????????
    Hedyosmum_mexicanum             00????011011??200?02010001021002103000010000??23100000112??00100211?1011-??0?000-00101100030-1011001?0000000?1??00-0111010113110121
    Hedyosmum_nutans                00020001000100200?010100010?1002103???01?001??1311100011002000-0211?0111-0000000-0???1101030-10110??0000000001??00-101?010113110121
    Hedyosmum_orientale             10????0-??????200?0201000102100211300001?000002310100011020100-0211?0011-0000000-0???110?030-101?0???????????1??00-101?010113110120
    Hedyosmum_pseudoandromeda       00????0-??????200?0021000000110210????0??000??23101010?110200110211?0111-000?0?0-?????101030-???????0????????1??00-?????1??????????
    Hedyosmum_pungens               00????0-??????200??211200?0?-0?211????01?110??231000011110200100211?1011-101?0?0-?????101030-????????????????1??00-011?01011310?121
    Hedyosmum_racemosum             00????010011?0200?0211000?021002113?0?01?100??231000010110000100211??011-000?0?0-?????101030-???????0????????1??00-011?010113110121
    Hedyosmum_scabrum               00????010011??200?0111200100100210????01?110??231211000120200110211?1011-000?0?0-?????101030-???????0????????1??00-101?010113110121
    Hedyosmum_spectabile            00????0-??????200??111210?02100210????11?1100?231000010110200100211?0011-000?0?0-?????101030-????????????????1??00-?11?01011310?121
    Hedyosmum_sprucei               00????0-??????200?0211000102100210????11?110??231000110110200100211?1011-000?0?0-?????101030-???????1????????1??00-001?010113110121
    Hedyosmum_steinii               00????0-??????200?0111?10002100210????1??110??231010010110200100211?1011-101?0?0-?????101030-???????1????????1??00-011?01011310?12?
    Sarcandra_chloranthoides        10????0-?00???200002111000000002102?0??100002?020000?0?0000000-1------1-1-010000-00010010000010221000?00100001??10-0010011115121021
    Sarcandra_glabra                10021001?00110200?01111000000002102?0001000020020000?0?0000000-1------1-1-010000-????000000001022???01001000?1??10-0000011115121021
    Asteropollis_plant              ????????????????????????????????????????????????????????0????0-0211?00?1-000?0?0-?????1??030?????????????????????-????????11311012?
    Chloranthistemon_alatus         ??????????????????????????????????????????????020?10?0?0000100-1------1-1-?1???0-????00??0??????????????????????0202-??001?0010?021
    Chloranthistemon_crossmanensis  ??????????????????????????????????????????????????????????????-0?????????-?1????-????????0??????????????????????0212-??001?1411102?
    Chloranthistemon_endressii      ??????????????????????????????????????????????020?10?0?00100?0-1------1-1-?1???0-????????0??????????????????????0202-??001?12121020
    Couperites_mauldinensis         ????????????????????????????????????????????????????????0????0-0?????????-01?0?0-?????0?0000-00?????0?10020??????-????????11011?121
    Tripartite_androecium           ??????????????????????????????????????????????????????????????-0?????????-?1????-????????0??????????????????????11-0????11?1412102?

 ;                                                                     
end;                                                                       

BEGIN TAXA;
	DIMENSIONS NTAX = 54;
	TAXLABELS
		Amborella
		Cabombaceae
		Nuphar
		Austrobaileya
		Trimenia
		Illicium
		Schisandraceae
		Saururaceae
		Asaroideae
		Winteraceae
		Ascarina_coursii
		Ascarina_diffusa
		Ascarina_lucida
		Ascarina_marquesensis
		Ascarina_phillipinensis
		Ascarina_rubricaulis
		Ascarina_solmsiana
		Ascarina_swamyana
		Chloranthus_angustifolius
		Chloranthus_erectus
		Chloranthus_fortunei
		Chloranthus_japonicus
		Chloranthus_nervosus
		Chloranthus_oldhamii
		Chloranthus_serratus
		Chloranthus_spicatus
		Hedyosmum_angustifolium
		Hedyosmum_arborescens
		Hedyosmum_bonplandianum
		Hedysomum_brasiliense
		Hedyosmum_burgerianum
		Hedyosmum_cuatrecazanum
		Hedyosmum_cumbalense
		Hedyosmum_dombeyanum
		Hedyosmum_grisebachii
		Hedyosmum_huascari
		Hedyosmum_mexicanum
		Hedyosmum_nutans
		Hedyosmum_orientale
		Hedyosmum_pseudoandromeda
		Hedyosmum_pungens
		Hedyosmum_racemosum
		Hedyosmum_scabrum
		Hedyosmum_spectabile
		Hedyosmum_sprucei
		Hedyosmum_steinii
		Sarcandra_chloranthoides
		Sarcandra_glabra
		Asteropollis_plant
		Chloranthistemon_alatus
		Chloranthistemon_crossmanensis
		Chloranthistemon_endressii
		Couperites_mauldinensis
		Tripartite_androecium
	;
END;
BEGIN TREES;
	TRANSLATE
		1	Amborella,
		2	Cabombaceae,
		3	Nuphar,
		4	Austrobaileya,
		5	Trimenia,
		6	Illicium,
		7	Schisandraceae,
		8	Saururaceae,
		9	Asaroideae,
		10	Winteraceae,
		11	Ascarina_coursii,
		12	Ascarina_diffusa,
		13	Ascarina_lucida,
		14	Ascarina_marquesensis,
		15	Ascarina_phillipinensis,
		16	Ascarina_rubricaulis,
		17	Ascarina_solmsiana,
		18	Ascarina_swamyana,
		19	Chloranthus_angustifolius,
		20	Chloranthus_erectus,
		21	Chloranthus_fortunei,
		22	Chloranthus_japonicus,
		23	Chloranthus_nervosus,
		24	Chloranthus_oldhamii,
		25	Chloranthus_serratus,
		26	Chloranthus_spicatus,
		27	Hedyosmum_angustifolium,
		28	Hedyosmum_arborescens,
		29	Hedyosmum_bonplandianum,
		30	Hedysomum_brasiliense,
		31	Hedyosmum_burgerianum,
		32	Hedyosmum_cuatrecazanum,
		33	Hedyosmum_cumbalense,
		34	Hedyosmum_dombeyanum,
		35	Hedyosmum_grisebachii,
		36	Hedyosmum_huascari,
		37	Hedyosmum_mexicanum,
		38	Hedyosmum_nutans,
		39	Hedyosmum_orientale,
		40	Hedyosmum_pseudoandromeda,
		41	Hedyosmum_pungens,
		42	Hedyosmum_racemosum,
		43	Hedyosmum_scabrum,
		44	Hedyosmum_spectabile,
		45	Hedyosmum_sprucei,
		46	Hedyosmum_steinii,
		47	Sarcandra_chloranthoides,
		48	Sarcandra_glabra,
		49	Asteropollis_plant,
		50	Chloranthistemon_alatus,
		51	Chloranthistemon_crossmanensis,
		52	Chloranthistemon_endressii,
		53	Couperites_mauldinensis,
		54	Tripartite_androecium
	;
	TREE * ambiguous = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,(((17,(11,15)),(14,(16,(13,(12,18))))),(((51,((25,(19,(21,(22,23)))),(52,(24,50)))),(20,26)),(54,(47,48))))),((28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,(30,(45,((29,34),(44,(41,46))))))))),(38,(49,(35,39)))))));
	TREE * ambiguous = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,(((17,(11,15)),(14,(16,(18,(12,13))))),(((50,(52,(51,(25,(24,(23,(22,(19,21)))))))),(20,26)),(54,(47,48))))),((28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,(30,(45,((29,34),(44,(41,46))))))))),(38,(39,(35,49)))))));
	TREE * ambiguous = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,((17,(15,(11,(14,(13,(18,(12,16))))))),((26,(20,(51,((25,(23,(22,(19,21)))),(52,(24,50)))))),(54,(47,48))))),((28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,(30,(45,((29,34),(44,(41,46))))))))),(38,(39,(35,49)))))));
	TREE * ambiguous = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,((17,(15,(11,(14,(13,(18,(12,16))))))),((26,(20,(51,(24,(50,(52,(25,(23,(22,(19,21)))))))))),(54,(47,48))))),((28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,(30,(45,((29,34),(44,(41,46))))))))),(38,(35,(39,49)))))));
	TREE * ambiguous = [&R] (1,((53,(5,(4,((10,((2,3),(8,9))),(6,7))))),((((17,(11,15)),(14,(16,(18,(12,13))))),(((52,(51,(50,(24,(25,(23,(22,(19,21)))))))),(20,26)),(54,(47,48)))),((49,(28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,(30,(45,((29,34),(44,(41,46)))))))))),(38,(35,39))))));
	TREE * ambiguous = [&R] (1,((53,(5,(4,((10,((2,3),(8,9))),(6,7))))),((((17,(11,15)),(14,(16,(13,(12,18))))),((26,(20,(50,((24,(25,(19,(21,(22,23))))),(51,52))))),(54,(47,48)))),((28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,(30,(45,((29,34),(44,(41,46))))))))),(38,(35,(39,49)))))));
	TREE * ambiguous = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,((17,(15,(11,(14,(16,(18,(12,13))))))),((((24,(25,(19,(22,(21,23))))),(50,(51,52))),(20,26)),(54,(47,48))))),((28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,(30,(45,((29,34),(44,(41,46))))))))),(38,(39,(35,49)))))));
	TREE * ambiguous = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,(((17,(11,15)),(14,(16,(12,(13,18))))),((26,(20,(51,(24,(50,(52,(25,(19,(23,(21,22)))))))))),(54,(47,48))))),((28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,(30,(45,((29,34),(44,(41,46))))))))),(38,(35,(39,49)))))));
	TREE * ambiguous = [&R] (1,((53,(5,(4,((10,((2,3),(8,9))),(6,7))))),(((17,(15,(11,(14,(16,(12,(13,18))))))),((26,(20,((25,(19,(21,(23,(22,(51,52)))))),(24,50)))),(54,(47,48)))),((28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,(30,(45,((29,34),(44,(41,46))))))))),(49,(38,(35,39)))))));
	TREE * ambiguous = [&R] (1,((53,(5,(4,((10,((2,3),(8,9))),(6,7))))),(((17,(15,(11,(14,(16,(18,(12,13))))))),((26,(20,(52,(51,(50,(24,(25,(19,(23,(21,22)))))))))),(54,(47,48)))),((49,(28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,(30,(45,((29,34),(44,(41,46)))))))))),(38,(35,39))))));
	TREE * ambiguous = [&R] (1,((53,(5,(4,((10,((2,3),(8,9))),(6,7))))),((((17,(11,15)),(14,(16,(13,(12,18))))),((26,(20,(51,(((19,(21,(22,23))),(25,52)),(24,50))))),(54,(47,48)))),((28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,(30,(45,((29,34),(44,(41,46))))))))),(38,(49,(35,39)))))));
	TREE * ambiguous = [&R] (1,((53,(5,(4,((10,((2,3),(8,9))),(6,7))))),((((17,(11,15)),(14,(16,(18,(12,13))))),(((50,(52,(51,((19,(23,(21,22))),(24,25))))),(20,26)),(54,(47,48)))),((28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,(30,(45,((29,34),(44,(41,46))))))))),(38,(39,(35,49)))))));
	TREE * ambiguous = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,(((17,(11,15)),(14,(16,(18,(12,13))))),((26,(20,((51,(24,(25,(19,(21,(22,23)))))),(50,52)))),(54,(47,48))))),(49,((28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,(30,(45,((29,34),(44,(41,46))))))))),(38,(35,39)))))));
	TREE * ambiguous = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,((17,(15,(11,(14,(16,(13,(12,18))))))),((26,(20,(50,(24,(25,(19,((21,23),(22,(51,52))))))))),(54,(47,48))))),((49,(28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,(30,(45,((29,34),(44,(41,46)))))))))),(38,(35,39))))));
	TREE * ambiguous = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,(((17,(11,15)),(14,(16,(13,(12,18))))),((((50,(24,(25,(19,(21,(22,23)))))),(51,52)),(20,26)),(54,(47,48))))),((28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,(30,(45,((29,34),(44,(41,46))))))))),(49,(38,(35,39)))))));
	TREE * ambiguous = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,((17,(15,(11,(14,(13,(18,(12,16))))))),(((50,(52,(51,(25,(24,(19,(23,(21,22)))))))),(20,26)),(54,(47,48))))),((28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,(30,(45,((29,34),(44,(41,46))))))))),(38,(39,(35,49)))))));
	TREE * ambiguous = [&R] (1,((53,(5,(4,((10,((2,3),(8,9))),(6,7))))),(((17,(15,(11,(14,(16,(12,(13,18))))))),(((50,(52,(51,(25,(24,(19,(22,(21,23)))))))),(20,26)),(54,(47,48)))),((28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,(30,(45,((29,34),(44,(41,46))))))))),(38,(39,(35,49)))))));
	TREE * ambiguous = [&R] (1,((53,(5,(4,((10,((2,3),(8,9))),(6,7))))),(((17,(15,(11,(14,(16,(18,(12,13))))))),(((51,(25,((19,(21,(22,23))),(52,(24,50))))),(20,26)),(54,(47,48)))),((28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,(30,(45,((29,34),(44,(41,46))))))))),(38,(39,(35,49)))))));
	TREE * ambiguous = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,(((17,(11,15)),(14,(16,(13,(12,18))))),((50,(52,(51,(((19,(22,(21,23))),(24,25)),(20,26))))),(47,(48,54))))),((28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,(30,(45,((29,34),(44,(41,46))))))))),(38,(35,(39,49)))))));
	TREE * ambiguous = [&R] (1,((53,(5,(4,((10,((2,3),(8,9))),(6,7))))),((((17,(11,15)),(14,(16,(12,(13,18))))),(((51,((24,(25,(19,(23,(21,22))))),(50,52))),(20,26)),(54,(47,48)))),((28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,(30,(45,((29,34),(44,(41,46))))))))),((35,39),(38,49))))));
	TREE * ambiguous = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,((17,(15,(11,(14,(16,(18,(12,13))))))),((26,(20,(51,((52,(25,(19,(22,(21,23))))),(24,50))))),(54,(47,48))))),((28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,(30,(45,((29,34),(44,(41,46))))))))),(38,(49,(35,39)))))));
	TREE * ambiguous = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,(((17,(11,15)),(14,(16,(12,(13,18))))),((26,(20,((25,((19,(22,(21,23))),(24,52))),(50,51)))),(54,(47,48))))),(49,((28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,(30,(45,((29,34),(44,(41,46))))))))),(38,(35,39)))))));
	TREE * ambiguous = [&R] (1,((53,(5,(4,((10,((2,3),(8,9))),(6,7))))),(((17,(15,(11,(14,(16,(18,(12,13))))))),((50,(52,(51,(((19,(22,(21,23))),(24,25)),(20,26))))),(54,(47,48)))),(49,((28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,(30,(45,((29,34),(44,(41,46))))))))),(38,(35,39)))))));
	TREE * ambiguous = [&R] (1,((53,(5,(4,((10,((2,3),(8,9))),(6,7))))),(((17,(15,(11,(14,(16,(18,(12,13))))))),(((51,((25,(19,(23,(21,22)))),(50,(24,52)))),(20,26)),(54,(47,48)))),((28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,(30,(45,((29,34),(44,(41,46))))))))),(38,(49,(35,39)))))));
	TREE * ambiguous = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,((17,(15,(11,(14,(16,(18,(12,13))))))),((26,(20,(50,(51,(24,(52,(25,(19,(21,(22,23)))))))))),(54,(47,48))))),((28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,(30,(45,((29,34),(44,(41,46))))))))),(38,(35,(39,49)))))));
	TREE * ambiguous = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,((17,(15,(11,(14,(16,(12,(13,18))))))),((26,(20,(50,(51,(25,((19,(21,(22,23))),(24,52))))))),(54,(47,48))))),((28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,(30,(45,((29,34),(44,(41,46))))))))),(38,(49,(35,39)))))));
	TREE * ambiguous = [&R] (1,((53,(5,(4,((10,((2,3),(8,9))),(6,7))))),((((17,(11,15)),(14,(16,(12,(13,18))))),((26,(20,(50,(51,(24,(52,(25,(19,(23,(21,22)))))))))),(54,(47,48)))),(49,((28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,(30,(45,((29,34),(44,(41,46))))))))),(38,(35,39)))))));
	TREE * ambiguous = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,(((17,(11,15)),(14,(16,(12,(13,18))))),(((51,(((23,(22,(19,21))),(25,52)),(24,50))),(20,26)),(54,(47,48))))),((28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,(30,(45,((29,34),(44,(41,46))))))))),(38,(49,(35,39)))))));
	TREE * ambiguous = [&R] (1,((53,(5,(4,((10,((2,3),(8,9))),(6,7))))),(((17,(15,(11,(14,(16,(18,(12,13))))))),((26,(20,((25,(19,(23,(21,22)))),(51,(52,(24,50)))))),(54,(47,48)))),((28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,(30,(45,((29,34),(44,(41,46))))))))),((35,39),(38,49))))));
	TREE * ambiguous = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,((17,(15,(11,(14,(16,(12,(13,18))))))),((26,(20,(50,(52,(51,(25,(24,(19,(21,(22,23)))))))))),(54,(47,48))))),((28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,(30,(45,((29,34),(44,(41,46))))))))),(38,(49,(35,39)))))));
	TREE * ambiguous = [&R] (1,((53,(5,(4,((10,((2,3),(8,9))),(6,7))))),((((17,(11,15)),(14,(16,(12,(13,18))))),((26,(20,(51,(25,(50,(24,(52,(19,(21,(22,23)))))))))),(54,(47,48)))),((28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,(30,(45,((29,34),(44,(41,46))))))))),(38,(49,(35,39)))))));
	TREE * ambiguous = [&R] (1,((53,(5,(4,((10,((2,3),(8,9))),(6,7))))),(((17,(15,(11,(14,(16,(18,(12,13))))))),((26,(20,(51,(25,((19,(23,(21,22))),(52,(24,50))))))),(54,(47,48)))),((28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,(30,(45,((29,34),(44,(41,46))))))))),((35,39),(38,49))))));
	TREE * ambiguous = [&R] (1,((53,(5,(4,((10,((2,3),(8,9))),(6,7))))),(((17,(15,(11,(14,(16,(18,(12,13))))))),((26,(20,((52,(25,(51,(19,(23,(21,22)))))),(24,50)))),(54,(47,48)))),((28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,(30,(45,((29,34),(44,(41,46))))))))),(38,(39,(35,49)))))));
	TREE * ambiguous = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,((17,(15,(11,(14,(16,(12,(13,18))))))),((26,(20,(50,(24,(52,(51,(25,(19,(21,(22,23)))))))))),(54,(47,48))))),((28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,(30,(45,((29,34),(44,(41,46))))))))),((35,39),(38,49))))));
	TREE * ambiguous = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,(((17,(11,15)),(14,(16,(13,(12,18))))),((26,(20,((52,(51,(25,(19,(22,(21,23)))))),(24,50)))),(54,(47,48))))),((28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,(30,(45,((29,34),(44,(41,46))))))))),(38,(49,(35,39)))))));
	TREE * ambiguous = [&R] (1,((53,(5,(4,((10,((2,3),(8,9))),(6,7))))),((((17,(11,15)),(14,(16,(13,(12,18))))),(((50,((24,(25,(19,(21,(22,23))))),(51,52))),(20,26)),(54,(47,48)))),((28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,(30,(45,((29,34),(44,(41,46))))))))),(38,(35,(39,49)))))));
	TREE * ambiguous = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,(((17,(11,15)),(14,(16,(18,(12,13))))),((26,(20,(50,(51,(24,(52,(25,(19,(22,(21,23)))))))))),(54,(47,48))))),(49,((28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,(30,(45,((29,34),(44,(41,46))))))))),(38,(35,39)))))));
	TREE * ambiguous = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,((17,(15,(11,(14,(16,(18,(12,13))))))),((26,(20,(50,(52,(51,((19,(22,(21,23))),(24,25))))))),(54,(47,48))))),(49,((28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,(30,(45,((29,34),(44,(41,46))))))))),(38,(35,39)))))));
	TREE * ambiguous = [&R] (1,((53,(5,(4,((10,((2,3),(8,9))),(6,7))))),((((17,(11,15)),(14,(16,(18,(12,13))))),((26,(20,(51,(50,(25,((19,(22,(21,23))),(24,52))))))),(54,(47,48)))),((28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,(30,(45,((29,34),(44,(41,46))))))))),(38,(35,(39,49)))))));
	TREE * ambiguous = [&R] (1,((53,(5,(4,((10,((2,3),(8,9))),(6,7))))),(((17,(15,(11,(14,(16,(12,(13,18))))))),((26,(20,(24,(50,(52,(25,(51,(23,(22,(19,21)))))))))),(54,(47,48)))),(49,((28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,(30,(45,((29,34),(44,(41,46))))))))),(38,(35,39)))))));
	TREE * ambiguous = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,((17,(15,(11,(14,(16,(12,(13,18))))))),((26,(20,(51,((52,(25,(19,(22,(21,23))))),(24,50))))),(54,(47,48))))),((28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,(30,(45,((29,34),(44,(41,46))))))))),(38,(35,(39,49)))))));
	TREE * ambiguous = [&R] (1,((53,(5,(4,((10,((2,3),(8,9))),(6,7))))),(((17,(15,(11,(14,(16,(18,(12,13))))))),(((50,(24,(52,(25,(51,(19,(23,(21,22)))))))),(20,26)),(54,(47,48)))),((28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,(30,(45,((29,34),(44,(41,46))))))))),((35,39),(38,49))))));
	TREE * ambiguous = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,((17,(15,(11,(14,(16,(13,(12,18))))))),(((50,(52,(51,((19,(23,(21,22))),(24,25))))),(20,26)),(54,(47,48))))),((28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,(30,(45,((29,34),(44,(41,46))))))))),(49,(38,(35,39)))))));
	TREE * ambiguous = [&R] (1,((53,(5,(4,((10,((2,3),(8,9))),(6,7))))),(((17,(15,(11,(14,(16,(12,(13,18))))))),(((51,(((23,(22,(19,21))),(25,52)),(24,50))),(20,26)),(54,(47,48)))),((28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,(30,(45,((29,34),(44,(41,46))))))))),(38,(35,(39,49)))))));
	TREE * ambiguous = [&R] (1,((53,(5,(4,((10,((2,3),(8,9))),(6,7))))),(((17,(15,(11,(14,(13,(18,(12,16))))))),((26,(20,(51,(50,(25,((19,(23,(21,22))),(24,52))))))),(54,(47,48)))),((28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,(30,(45,((29,34),(44,(41,46))))))))),(38,(39,(35,49)))))));
	TREE * ambiguous = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,((17,(15,(11,(14,(13,(18,(12,16))))))),((26,(20,(51,(50,(25,((19,(23,(21,22))),(24,52))))))),(54,(47,48))))),((28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,(30,(45,((29,34),(44,(41,46))))))))),(38,(39,(35,49)))))));
	TREE * ambiguous = [&R] (1,((53,(5,(4,((10,((2,3),(8,9))),(6,7))))),(((17,(15,(11,(14,(16,(18,(12,13))))))),((50,(52,(51,(((19,(22,(21,23))),(24,25)),(20,26))))),(54,(47,48)))),((28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,(30,(45,((29,34),(44,(41,46))))))))),(38,(39,(35,49)))))));
	TREE * ambiguous = [&R] (1,((53,(5,(4,((10,((2,3),(8,9))),(6,7))))),((((17,(11,15)),(14,(16,(18,(12,13))))),(((51,(((23,(22,(19,21))),(25,52)),(24,50))),(20,26)),(54,(47,48)))),((28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,(30,(45,((29,34),(44,(41,46))))))))),(38,(49,(35,39)))))));
	TREE * ambiguous = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,((17,(15,(11,(14,(16,(18,(12,13))))))),(((52,(51,(50,(24,(25,(23,(22,(19,21)))))))),(20,26)),(54,(47,48))))),((28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,(30,(45,((29,34),(44,(41,46))))))))),((35,39),(38,49))))));
	TREE * ambiguous = [&R] (1,((53,(5,(4,((10,((2,3),(8,9))),(6,7))))),(((17,(15,(11,(14,(16,(13,(12,18))))))),((26,(20,(50,(52,(51,(25,(24,(19,(23,(21,22)))))))))),(54,(47,48)))),((28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,(30,(45,((29,34),(44,(41,46))))))))),(38,(35,(39,49)))))));
	TREE * extraState = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,((17,(15,(11,(14,(16,(18,(12,13))))))),((26,(20,(50,(52,(51,(25,(24,(19,(21,(22,23)))))))))),(54,(47,48))))),(((((33,(32,(27,43))),((29,(34,(45,(44,(41,46))))),(30,42))),(28,37)),(36,(31,40))),(38,(49,(35,39)))))));
	TREE * extraState = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,(((17,(11,15)),(14,(16,(13,(12,18))))),((26,(20,(50,(51,(25,((19,(22,(21,23))),(24,52))))))),(54,(47,48))))),(((((33,(32,(27,43))),(42,(30,(29,(34,(45,(44,(41,46)))))))),(28,37)),(31,(36,40))),(38,(39,(35,49)))))));
	TREE * extraState = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,(((17,(15,(11,14))),(16,(12,(13,18)))),((26,(20,(51,(25,(50,(24,(52,(19,(23,(21,22)))))))))),(54,(47,48))))),((((28,(37,((27,43),(32,33)))),(42,(30,(29,(34,(45,(44,(41,46)))))))),(40,(31,36))),(38,(49,(35,39)))))));
	TREE * extraState = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,(((17,(15,(11,14))),(16,(13,(12,18)))),((26,(20,(25,((19,(22,(21,23))),(51,(52,(24,50))))))),(54,(47,48))))),(((((33,(32,(27,43))),(42,(30,(29,(34,(45,(44,(41,46)))))))),(28,37)),(40,(31,36))),(38,(35,(39,49)))))));
	TREE * extraState = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,(((17,(15,(11,14))),(16,(12,(13,18)))),((26,(20,(50,(52,(51,(25,(24,(23,(22,(19,21)))))))))),(54,(47,48))))),(((((32,(33,(27,43))),((29,(34,(45,(44,(41,46))))),(30,42))),(28,37)),(31,(36,40))),(38,(35,(39,49)))))));
	TREE * extraState = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,((((11,14),(16,(18,(12,13)))),(15,17)),((26,(20,(51,(25,((23,(22,(19,21))),(52,(24,50))))))),(54,(47,48))))),(((28,((37,(32,(33,(27,43)))),(42,(30,(29,(34,(45,(44,(41,46))))))))),(40,(31,36))),(38,(39,(35,49)))))));
	TREE * extraState = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,((17,(15,(11,(14,(16,(12,(13,18))))))),(((51,(25,((19,(21,(22,23))),(52,(24,50))))),(20,26)),(54,(47,48))))),(((((33,(32,(27,43))),((29,(34,(45,(44,(41,46))))),(30,42))),(28,37)),(31,(36,40))),(49,(38,(35,39)))))));
	TREE * extraState = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,(((17,(11,15)),(14,(16,(18,(12,13))))),(((51,(25,((23,(22,(19,21))),(52,(24,50))))),(20,26)),(54,(47,48))))),((((((27,43),(32,33)),((29,(34,(45,(44,(41,46))))),(30,42))),(28,37)),(40,(31,36))),(49,(38,(35,39)))))));
	TREE * extraState = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,((((11,14),(16,(12,(13,18)))),(15,17)),(((50,(52,(51,(25,(24,(23,(22,(19,21)))))))),(20,26)),(54,(47,48))))),(((28,((37,(33,(32,(27,43)))),(42,(30,(29,(34,(45,(44,(41,46))))))))),(31,(36,40))),(38,(35,(39,49)))))));
	TREE * extraState = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,((((11,14),(16,(18,(12,13)))),(15,17)),(((50,(52,(51,(25,(24,(19,(22,(21,23)))))))),(20,26)),(54,(47,48))))),((((((27,43),(32,33)),(42,(30,(29,(34,(45,(44,(41,46)))))))),(28,37)),(36,(31,40))),((35,39),(38,49))))));
	TREE * extraState = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,((((11,14),(16,(13,(12,18)))),(15,17)),((26,(20,(50,(51,(25,((23,(22,(19,21))),(24,52))))))),(54,(47,48))))),((((28,(37,(32,(33,(27,43))))),((29,(34,(45,(44,(41,46))))),(30,42))),(36,(31,40))),(38,(49,(35,39)))))));
	TREE * extraState = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,(((17,(15,(11,14))),((12,16),(13,18))),((26,(20,(51,(25,((23,(22,(19,21))),(52,(24,50))))))),(54,(47,48))))),((49,((28,((37,((27,43),(32,33))),((29,(34,(45,(44,(41,46))))),(30,42)))),(31,(36,40)))),(38,(35,39))))));
	TREE * extraState = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,(((17,(11,15)),(14,(16,(13,(12,18))))),(((50,(52,(51,(25,(24,(19,(21,(22,23)))))))),(20,26)),(54,(47,48))))),(49,((((28,(37,(33,(32,(27,43))))),(42,(30,(29,(34,(45,(44,(41,46)))))))),(40,(31,36))),(38,(35,39)))))));
	TREE * extraState = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,(((17,(11,15)),(14,(16,(12,(13,18))))),((26,(20,(50,(52,(51,(25,(24,(19,(22,(21,23)))))))))),(54,(47,48))))),(49,(((((32,(33,(27,43))),((29,(34,(45,(44,(41,46))))),(30,42))),(28,37)),(40,(31,36))),(38,(35,39)))))));
	TREE * extraState = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,(((17,(11,15)),(14,(16,(18,(12,13))))),((26,(20,(50,(52,(51,(25,(24,(19,(21,(22,23)))))))))),(54,(47,48))))),(((((33,(32,(27,43))),((29,(34,(45,(44,(41,46))))),(30,42))),(28,37)),(40,(31,36))),(38,(35,(39,49)))))));
	TREE * extraState = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,(((17,(11,15)),(14,(16,(12,(13,18))))),((26,(20,(50,(52,(51,(25,(24,(19,(23,(21,22)))))))))),(54,(47,48))))),((((28,(37,((27,43),(32,33)))),(42,(30,(29,(34,(45,(44,(41,46)))))))),(36,(31,40))),(38,(35,(39,49)))))));
	TREE * extraState = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,(((17,(11,15)),(14,(16,(13,(12,18))))),((26,(20,(51,(25,(50,(24,(52,(19,(22,(21,23)))))))))),(54,(47,48))))),((49,(((28,(37,(32,(33,(27,43))))),((29,(34,(45,(44,(41,46))))),(30,42))),(36,(31,40)))),(38,(35,39))))));
	TREE * extraState = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,(((17,(15,(11,14))),(16,(18,(12,13)))),((26,(20,(51,(25,((19,(22,(21,23))),(52,(24,50))))))),(54,(47,48))))),(49,((((37,(33,(32,(27,43)))),(28,(42,(30,(29,(34,(45,(44,(41,46))))))))),(40,(31,36))),(38,(35,39)))))));
	TREE * extraState = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,(((17,(15,(11,14))),(16,(18,(12,13)))),((26,(20,((25,((19,(21,(22,23))),(24,52))),(50,51)))),(54,(47,48))))),((((28,(37,(32,(33,(27,43))))),((29,(34,(45,(44,(41,46))))),(30,42))),(36,(31,40))),(38,(49,(35,39)))))));
	TREE * extraState = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,((17,(15,(11,(14,(16,(18,(12,13))))))),((26,(20,(51,(25,((19,(22,(21,23))),(52,(24,50))))))),(54,(47,48))))),(49,((((28,(37,(33,(32,(27,43))))),((29,(34,(45,(44,(41,46))))),(30,42))),(40,(31,36))),(38,(35,39)))))));
	TREE * extraState = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,(((17,(11,15)),(14,(16,(18,(12,13))))),((26,(20,(51,(25,((23,(22,(19,21))),(52,(24,50))))))),(54,(47,48))))),((((28,(37,((27,43),(32,33)))),(42,(30,(29,(34,(45,(44,(41,46)))))))),(36,(31,40))),(38,(35,(39,49)))))));
	TREE * extraState = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,(((17,(15,(11,14))),(16,(13,(12,18)))),((26,(20,(25,((19,(22,(21,23))),(51,(52,(24,50))))))),(54,(47,48))))),((((28,(37,((27,43),(32,33)))),(42,(30,(29,(34,(45,(44,(41,46)))))))),(36,(31,40))),(38,(35,(39,49)))))));
	TREE * extraState = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,(((17,(11,15)),(14,(16,(18,(12,13))))),((26,(20,(50,(52,(51,(25,(24,(19,(22,(21,23)))))))))),(54,(47,48))))),((((28,(37,((27,43),(32,33)))),(42,(30,(29,(34,(45,(44,(41,46)))))))),(40,(31,36))),(49,(38,(35,39)))))));
	TREE * extraState = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,(((17,(11,15)),(14,(16,(18,(12,13))))),((26,(20,(25,((19,(22,(21,23))),(51,(52,(24,50))))))),(54,(47,48))))),((49,((((32,(33,(27,43))),(42,(30,(29,(34,(45,(44,(41,46)))))))),(28,37)),(31,(36,40)))),(38,(35,39))))));
	TREE * extraState = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,((17,(15,(11,(14,(16,(12,(13,18))))))),(((51,(25,((19,(21,(22,23))),(52,(24,50))))),(20,26)),(54,(47,48))))),((((((27,43),(32,33)),(42,(30,(29,(34,(45,(44,(41,46)))))))),(28,37)),(40,(31,36))),(38,(39,(35,49)))))));
	TREE * extraState = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,(((17,(15,(11,14))),((12,16),(13,18))),((26,(20,(50,(51,(25,((19,(23,(21,22))),(24,52))))))),(54,(47,48))))),((((28,(37,(32,(33,(27,43))))),((29,(34,(45,(44,(41,46))))),(30,42))),(36,(31,40))),(38,(49,(35,39)))))));
	TREE * extraState = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,((((11,14),(16,(18,(12,13)))),(15,17)),(((51,(25,((19,(21,(22,23))),(52,(24,50))))),(20,26)),(54,(47,48))))),(((((32,(33,(27,43))),(42,(30,(29,(34,(45,(44,(41,46)))))))),(28,37)),(36,(31,40))),(38,(35,(39,49)))))));
	TREE * extraState = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,(((17,(11,15)),(14,(16,(18,(12,13))))),(((51,(25,((19,(23,(21,22))),(52,(24,50))))),(20,26)),(54,(47,48))))),((49,(((((27,43),(32,33)),((29,(34,(45,(44,(41,46))))),(30,42))),(28,37)),(36,(31,40)))),(38,(35,39))))));
	TREE * extraState = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,((17,(15,(11,(14,(16,(13,(12,18))))))),((26,(20,(51,(50,(25,((19,(21,(22,23))),(24,52))))))),(54,(47,48))))),(49,((((((27,43),(32,33)),((29,(34,(45,(44,(41,46))))),(30,42))),(28,37)),(36,(31,40))),(38,(35,39)))))));
	TREE * extraState = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,(((17,(15,(11,14))),(13,(18,(12,16)))),(((50,(52,(51,(25,(24,(19,(22,(21,23)))))))),(20,26)),(54,(47,48))))),((49,(((28,(37,((27,43),(32,33)))),(42,(30,(29,(34,(45,(44,(41,46)))))))),(36,(31,40)))),(38,(35,39))))));
	TREE * extraState = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,((17,(15,(11,(14,(16,(12,(13,18))))))),((26,(20,(25,((19,(22,(21,23))),(51,(52,(24,50))))))),(54,(47,48))))),((((37,(33,(32,(27,43)))),(28,((29,(34,(45,(44,(41,46))))),(30,42)))),(40,(31,36))),(38,(39,(35,49)))))));
	TREE * extraState = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,((17,(15,(11,(14,(13,(18,(12,16))))))),((26,(20,(51,(25,((19,(21,(22,23))),(52,(24,50))))))),(54,(47,48))))),((((((27,43),(32,33)),((29,(34,(45,(44,(41,46))))),(30,42))),(28,37)),(31,(36,40))),(49,(38,(35,39)))))));
	TREE * extraState = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,(((17,(15,(11,14))),((12,16),(13,18))),(((51,(25,((19,(22,(21,23))),(52,(24,50))))),(20,26)),(54,(47,48))))),((((37,(33,(32,(27,43)))),(28,((29,(34,(45,(44,(41,46))))),(30,42)))),(40,(31,36))),(38,(35,(39,49)))))));
	TREE * extraState = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,((17,(15,(11,(14,(16,(12,(13,18))))))),((26,(20,(51,(25,(50,(24,(52,(23,(22,(19,21)))))))))),(54,(47,48))))),((((28,(37,((27,43),(32,33)))),(42,(30,(29,(34,(45,(44,(41,46)))))))),(31,(36,40))),(38,(39,(35,49)))))));
	TREE * extraState = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,(((17,(15,(11,14))),(16,(13,(12,18)))),(((50,(52,(51,(25,(24,(23,(22,(19,21)))))))),(20,26)),(54,(47,48))))),((((28,(37,(32,(33,(27,43))))),((29,(34,(45,(44,(41,46))))),(30,42))),(36,(31,40))),(38,(49,(35,39)))))));
	TREE * extraState = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,(((17,(15,(11,14))),(16,(12,(13,18)))),((26,(20,(51,(25,((23,(22,(19,21))),(52,(24,50))))))),(54,(47,48))))),((((37,(33,(32,(27,43)))),(28,(42,(30,(29,(34,(45,(44,(41,46))))))))),(31,(36,40))),(38,(35,(39,49)))))));
	TREE * extraState = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,((17,(15,(11,(14,(13,(18,(12,16))))))),((26,(20,(51,(25,((19,(22,(21,23))),(52,(24,50))))))),(54,(47,48))))),(((((33,(32,(27,43))),(42,(30,(29,(34,(45,(44,(41,46)))))))),(28,37)),(36,(31,40))),(38,(35,(39,49)))))));
	TREE * extraState = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,((17,(15,(11,(14,(13,(18,(12,16))))))),((26,(20,(25,((19,(23,(21,22))),(51,(52,(24,50))))))),(54,(47,48))))),((((((27,43),(32,33)),(42,(30,(29,(34,(45,(44,(41,46)))))))),(28,37)),(36,(31,40))),(38,(49,(35,39)))))));
	TREE * extraState = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,(((17,(11,15)),(14,(16,(12,(13,18))))),((26,(20,(51,(25,(50,(24,(52,(23,(22,(19,21)))))))))),(54,(47,48))))),(((((33,(32,(27,43))),((29,(34,(45,(44,(41,46))))),(30,42))),(28,37)),(40,(31,36))),(38,(35,(39,49)))))));
	TREE * extraState = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,((17,(15,(11,(14,(16,(18,(12,13))))))),((26,(20,(25,((19,(23,(21,22))),(51,(52,(24,50))))))),(54,(47,48))))),(((((32,(33,(27,43))),(42,(30,(29,(34,(45,(44,(41,46)))))))),(28,37)),(40,(31,36))),(38,(39,(35,49)))))));
	TREE * extraState = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,(((17,(15,(11,14))),((12,16),(13,18))),((26,(20,(50,(51,(25,((19,(22,(21,23))),(24,52))))))),(54,(47,48))))),(((28,((37,(32,(33,(27,43)))),((29,(34,(45,(44,(41,46))))),(30,42)))),(40,(31,36))),((35,39),(38,49))))));
	TREE * extraState = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,((((11,14),(16,(13,(12,18)))),(15,17)),(((50,(52,(51,(25,(24,(19,(21,(22,23)))))))),(20,26)),(54,(47,48))))),(((((32,(33,(27,43))),((29,(34,(45,(44,(41,46))))),(30,42))),(28,37)),(40,(31,36))),(38,(49,(35,39)))))));
	TREE * extraState = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,((((11,14),(16,(13,(12,18)))),(15,17)),((26,(20,(51,(25,(50,(24,(52,(19,(23,(21,22)))))))))),(54,(47,48))))),(((28,((37,(32,(33,(27,43)))),((29,(34,(45,(44,(41,46))))),(30,42)))),(31,(36,40))),(38,(49,(35,39)))))));
	TREE * extraState = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,(((17,(15,(11,14))),(18,(13,(12,16)))),((26,(20,(51,(25,((19,(23,(21,22))),(52,(24,50))))))),(54,(47,48))))),(((28,((37,((27,43),(32,33))),((29,(34,(45,(44,(41,46))))),(30,42)))),(36,(31,40))),(38,(39,(35,49)))))));
	TREE * extraState = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,(((17,(15,(11,14))),(16,(18,(12,13)))),(((51,(25,((19,(23,(21,22))),(52,(24,50))))),(20,26)),(54,(47,48))))),((((28,(37,(33,(32,(27,43))))),((29,(34,(45,(44,(41,46))))),(30,42))),(40,(31,36))),(38,(35,(39,49)))))));
	TREE * extraState = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,((((11,14),(16,(13,(12,18)))),(15,17)),(((50,(52,(51,(25,(24,(19,(21,(22,23)))))))),(20,26)),(54,(47,48))))),(((((33,(32,(27,43))),(42,(30,(29,(34,(45,(44,(41,46)))))))),(28,37)),(36,(31,40))),(38,(35,(39,49)))))));
	TREE * extraState = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,((((11,14),(16,(12,(13,18)))),(15,17)),((26,(20,(51,(25,((19,(22,(21,23))),(52,(24,50))))))),(54,(47,48))))),((((37,(33,(32,(27,43)))),(28,(42,(30,(29,(34,(45,(44,(41,46))))))))),(36,(31,40))),(49,(38,(35,39)))))));
	TREE * extraState = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,(((17,(15,(11,14))),(16,(18,(12,13)))),((26,(20,(25,((19,(22,(21,23))),(51,(52,(24,50))))))),(54,(47,48))))),(((28,((37,((27,43),(32,33))),((29,(34,(45,(44,(41,46))))),(30,42)))),(36,(31,40))),(49,(38,(35,39)))))));
	TREE * extraState = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,(((17,(15,(11,14))),(16,(13,(12,18)))),((26,(20,(51,(25,(50,(24,(52,(23,(22,(19,21)))))))))),(54,(47,48))))),((((28,(37,(33,(32,(27,43))))),((29,(34,(45,(44,(41,46))))),(30,42))),(40,(31,36))),(38,(39,(35,49)))))));
	TREE * extraState = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,(((17,(15,(11,14))),(16,(18,(12,13)))),((26,(20,(51,(25,((19,(22,(21,23))),(52,(24,50))))))),(54,(47,48))))),((((28,(37,((27,43),(32,33)))),(42,(30,(29,(34,(45,(44,(41,46)))))))),(31,(36,40))),(49,(38,(35,39)))))));
	TREE * inapplicable = [&R] (1,((5,(4,((10,((9,8),(3,2))),(6,7)))),((53,((17,(15,(11,(14,(16,(13,(12,18))))))),(((26,20),(51,(24,(50,(52,(25,(19,(22,(23,21))))))))),(54,(48,47))))),(((38,49),(35,39)),(28,(37,((42,((30,45),(34,(29,(41,(44,46)))))),((33,(32,(43,27))),(36,(31,40))))))))));
	TREE * inapplicable = [&R] (1,((5,(4,((10,((9,8),(2,3))),(6,7)))),((53,(((54,(48,47)),((26,20),((24,50),(52,(25,(51,(23,(22,(19,21))))))))),((17,(11,15)),(14,(16,(18,(12,13))))))),(((49,38),(35,39)),(28,(37,((42,((30,45),(34,(29,(41,(44,46)))))),((36,(31,40)),(33,(32,(27,43)))))))))));
	TREE * inapplicable = [&R] (1,((5,(4,((7,6),(10,((8,9),(2,3)))))),((53,(((17,(11,15)),(14,(16,(13,(12,18))))),((26,(20,(24,(50,(52,(51,(25,(19,(22,(23,21)))))))))),(54,(48,47))))),((38,(35,(49,39))),(28,(37,((42,((34,(29,(41,(44,46)))),(45,30))),((33,(32,(27,43))),(36,(40,31))))))))));
	TREE * inapplicable = [&R] (1,((5,(4,((10,((9,8),(3,2))),(7,6)))),((53,((17,(15,(11,(14,(13,(18,(16,12))))))),((26,(20,(50,(24,(25,(23,((22,(51,52)),(21,19)))))))),(54,(48,47))))),((28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,((45,30),(34,(29,(41,(46,44))))))))),(38,(35,(49,39)))))));
	TREE * inapplicable = [&R] (1,((5,(4,((10,((8,9),(3,2))),(7,6)))),((53,(((54,(47,48)),(26,(20,((51,(24,(25,(23,(22,(21,19)))))),(50,52))))),(17,(15,(11,(14,(16,(13,(18,12))))))))),((49,(28,(37,((42,((30,45),(34,(29,(41,(46,44)))))),((33,(32,(43,27))),(36,(40,31))))))),(38,(35,39))))));
	TREE * inapplicable = [&R] (1,((5,(4,((10,((8,9),(2,3))),(6,7)))),((53,(((54,(48,47)),((20,26),((51,(52,50)),(24,(25,(23,(22,(19,21)))))))),(17,(15,(11,(14,(16,(18,(12,13))))))))),((49,(38,(39,35))),(28,(37,(((36,(31,40)),(33,(32,(27,43)))),(42,((30,45),(34,(29,(41,(44,46)))))))))))));
	TREE * inapplicable = [&R] (1,((5,(4,((10,((8,9),(2,3))),(7,6)))),((53,(((26,(20,(50,(24,(52,(25,(51,(23,(22,(19,21)))))))))),(54,(48,47))),((17,(15,11)),(14,(16,(18,(12,13))))))),(((35,39),(49,38)),(28,(37,((42,((45,30),(34,(29,(41,(44,46)))))),((33,(32,(27,43))),(36,(40,31))))))))));
	TREE * inapplicable = [&R] (1,((5,(4,((10,((9,8),(2,3))),(6,7)))),((53,((17,(15,(11,(14,(16,(18,(13,12))))))),(((26,20),(51,(50,(52,(24,(25,(19,(22,(21,23))))))))),(54,(48,47))))),((49,(28,(37,((42,((30,45),(34,(29,(41,(44,46)))))),((33,(32,(43,27))),(36,(40,31))))))),(38,(39,35))))));
	TREE * inapplicable = [&R] (1,((5,(4,((7,6),(10,((9,8),(3,2)))))),((53,((17,(15,(11,(14,(16,(12,(18,13))))))),((26,(20,(51,((24,50),((25,52),(19,(22,(23,21)))))))),(54,(48,47))))),((49,(28,(37,((42,((30,45),(34,(29,(41,(46,44)))))),((36,(40,31)),(33,(32,(27,43)))))))),(38,(39,35))))));
	TREE * inapplicable = [&R] (1,((5,(4,((10,((9,8),(2,3))),(6,7)))),((53,((17,(15,(11,(14,(13,(18,(16,12))))))),((26,(20,(24,(50,(52,((25,51),(19,(22,(21,23))))))))),(54,(48,47))))),((28,(37,(((33,(32,(43,27))),(36,(40,31))),(42,((30,45),(34,(29,(41,(44,46))))))))),(49,(38,(35,39)))))));
	TREE * inapplicable = [&R] (1,(((53,(((26,(20,((50,51),(24,(52,(25,(19,(22,(21,23))))))))),(54,(47,48))),(17,(15,(11,(14,(13,(18,(16,12))))))))),((38,(49,(35,39))),(28,(37,((42,((30,45),(34,(29,(41,(44,46)))))),((33,(32,(43,27))),(36,(40,31)))))))),(5,(4,((10,((8,9),(2,3))),(7,6))))));
	TREE * inapplicable = [&R] (1,((5,(4,((10,((8,9),(2,3))),(6,7)))),((53,(((17,(11,15)),(14,(16,(13,(12,18))))),(((26,20),(51,((24,50),(25,(52,(23,(22,(19,21)))))))),(54,(47,48))))),((38,(49,(35,39))),(28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,((30,45),(34,(29,(41,(46,44)))))))))))));
	TREE * inapplicable = [&R] (1,((5,(4,((10,((9,8),(3,2))),(7,6)))),((53,((((26,20),((50,(51,52)),(24,(25,(19,(22,(21,23))))))),(54,(48,47))),((17,(15,11)),(14,(16,(18,(12,13))))))),((49,(38,(39,35))),(28,(37,(((36,(40,31)),(33,(32,(43,27)))),(42,((34,(29,(41,(44,46)))),(45,30))))))))));
	TREE * inapplicable = [&R] (1,((5,(4,((7,6),(10,((9,8),(3,2)))))),((53,(((26,(20,(50,((52,51),(24,(25,(19,(22,(21,23))))))))),(54,(48,47))),(17,(15,(11,(14,(13,(18,(12,16))))))))),((49,(38,(39,35))),(28,(37,((42,((45,30),(34,(29,(41,(44,46)))))),((36,(40,31)),(33,(32,(43,27)))))))))));
	TREE * inapplicable = [&R] (1,((5,(4,((10,((8,9),(2,3))),(7,6)))),((53,(((17,(11,15)),(14,(16,(13,(18,12))))),((26,(20,((52,(50,51)),(24,(25,(19,(22,(23,21)))))))),(54,(47,48))))),(49,((28,(37,((42,((34,(29,(41,(46,44)))),(30,45))),((33,(32,(43,27))),(36,(40,31)))))),(38,(39,35)))))));
	TREE * inapplicable = [&R] (1,((5,(4,((10,((8,9),(2,3))),(6,7)))),((53,((17,(15,(11,(14,(16,(13,(18,12))))))),((26,(20,((24,50),(52,((51,25),(23,(22,(19,21)))))))),(54,(47,48))))),((38,(35,(49,39))),(28,(37,(((33,(32,(43,27))),(36,(40,31))),(42,((30,45),(34,(29,(41,(44,46)))))))))))));
	TREE * inapplicable = [&R] (1,((5,(4,((10,((3,2),(9,8))),(7,6)))),((53,(((17,(15,11)),(14,(16,(13,(12,18))))),(((20,26),((24,50),(52,(25,(51,(23,(22,(19,21)))))))),(54,(48,47))))),((38,(49,(35,39))),(28,(37,((42,((45,30),(34,(29,(41,(46,44)))))),((33,(32,(43,27))),(36,(31,40))))))))));
	TREE * inapplicable = [&R] (1,((5,(4,((10,((2,3),(8,9))),(6,7)))),((53,((((26,20),(52,(50,(24,(51,(25,(23,(22,(21,19))))))))),(54,(48,47))),((14,(16,(12,(13,18)))),(17,(11,15))))),((28,(37,((42,((30,45),(34,(29,(41,(46,44)))))),((36,(31,40)),(33,(32,(43,27))))))),(38,(49,(39,35)))))));
	TREE * inapplicable = [&R] (1,((5,(4,((10,((9,8),(3,2))),(7,6)))),((53,(((17,(15,11)),(14,(16,(13,(12,18))))),(((26,20),(51,((52,(25,(23,(22,(19,21))))),(24,50)))),(54,(48,47))))),(((49,38),(35,39)),(28,(37,((42,((45,30),(34,(29,(41,(46,44)))))),((33,(32,(43,27))),(36,(31,40))))))))));
	TREE * inapplicable = [&R] (1,(((53,((17,(15,(11,(14,(13,(18,(16,12))))))),(((26,20),(52,(51,(50,(24,(25,(23,(22,(21,19))))))))),(54,(47,48))))),((49,(28,(37,(((36,(40,31)),(33,(32,(43,27)))),(42,((34,(29,(41,(46,44)))),(45,30))))))),(38,(35,39)))),(5,(4,((10,((8,9),(2,3))),(7,6))))));
	TREE * inapplicable = [&R] (1,((5,(4,((10,((9,8),(2,3))),(6,7)))),((53,((17,(15,(11,(14,(13,(18,(16,12))))))),(((20,26),(51,(50,(52,(24,(25,(19,(22,(23,21))))))))),(54,(47,48))))),((28,(37,((42,((45,30),(34,(29,(41,(44,46)))))),((36,(31,40)),(33,(32,(43,27))))))),((49,38),(39,35))))));
	TREE * inapplicable = [&R] (1,((5,(4,((10,((9,8),(2,3))),(6,7)))),((53,(((54,(48,47)),(26,(20,(51,(24,(50,(52,(25,(19,(22,(21,23))))))))))),((17,(15,11)),(14,(16,(12,(13,18))))))),((38,(49,(35,39))),(28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,((34,(29,(41,(46,44)))),(30,45))))))))));
	TREE * inapplicable = [&R] (1,((5,(4,((7,6),(10,((2,3),(9,8)))))),((53,((((20,26),((50,(24,(25,(19,(22,(23,21)))))),(51,52))),(54,(48,47))),(17,(15,(11,(14,(16,(13,(18,12))))))))),((28,(37,((42,((34,(29,(41,(44,46)))),(45,30))),((36,(40,31)),(33,(32,(27,43))))))),((49,38),(35,39))))));
	TREE * inapplicable = [&R] (1,((5,(4,((10,((9,8),(3,2))),(7,6)))),((53,(((26,(20,(52,((24,(25,(23,(22,(19,21))))),(50,51))))),(54,(47,48))),((14,(16,(13,(18,12)))),(17,(15,11))))),((28,(37,((42,((45,30),(34,(29,(41,(44,46)))))),((36,(40,31)),(33,(32,(27,43))))))),(38,(39,(49,35)))))));
	TREE * inapplicable = [&R] (1,((5,(4,((7,6),(10,((2,3),(9,8)))))),((53,(((26,(20,((50,52),(51,(24,(25,(19,(22,(23,21))))))))),(54,(48,47))),(17,(15,(11,(14,(16,(18,(12,13))))))))),((28,(37,((42,((34,(29,(41,(44,46)))),(45,30))),((36,(40,31)),(33,(32,(27,43))))))),(38,(39,(35,49)))))));
	TREE * inapplicable = [&R] (1,((5,((4,(10,((9,8),(3,2)))),(7,6))),(((53,(17,(15,(11,(14,(13,(18,(12,16)))))))),((49,(38,(35,39))),(28,(37,((42,((45,30),(34,(29,(41,(46,44)))))),((36,(40,31)),(33,(32,(43,27))))))))),(54,((50,(52,(51,(((25,24),(19,(22,(23,21)))),(20,26))))),(48,47))))));
	TREE * inapplicable = [&R] (1,((5,(4,((10,((8,9),(2,3))),(6,7)))),((53,(((26,(20,((50,(51,52)),(24,(25,(19,(22,(21,23)))))))),(54,(48,47))),(17,(15,(11,(14,(16,(18,(12,13))))))))),((38,(49,(35,39))),(28,(37,((42,((45,30),(34,(29,(41,(46,44)))))),((36,(31,40)),(33,(32,(43,27)))))))))));
	TREE * inapplicable = [&R] (1,((5,(4,((10,((8,9),(2,3))),(7,6)))),((53,(((54,(47,48)),((20,26),(50,(52,(24,(51,(25,(23,(22,(21,19)))))))))),((17,(11,15)),(14,(16,(13,(12,18))))))),((28,(37,(((33,(32,(27,43))),(36,(40,31))),(42,((30,45),(34,(29,(41,(44,46))))))))),((49,38),(39,35))))));
	TREE * inapplicable = [&R] (1,((5,(4,((10,((8,9),(2,3))),(6,7)))),((53,(((26,(20,(50,(51,(52,(24,(25,(19,(22,(23,21)))))))))),(54,(47,48))),(17,(15,(11,(14,(16,(13,(18,12))))))))),((38,(35,(49,39))),(28,(37,(((33,(32,(43,27))),(36,(40,31))),(42,((45,30),(34,(29,(41,(44,46)))))))))))));
	TREE * inapplicable = [&R] (1,((5,(4,((10,((8,9),(2,3))),(6,7)))),((53,(((54,(48,47)),(26,(20,(24,(50,(25,(19,((22,(51,52)),(23,21))))))))),(17,(15,(11,(14,(16,(12,(18,13))))))))),((49,(28,(37,(((36,(31,40)),(33,(32,(27,43)))),(42,((30,45),(34,(29,(41,(46,44)))))))))),(38,(35,39))))));
	TREE * inapplicable = [&R] (1,((5,(4,((10,((8,9),(2,3))),(7,6)))),(((49,(28,(37,(((33,(32,(27,43))),(36,(40,31))),(42,((45,30),(34,(29,(41,(46,44)))))))))),(38,(39,35))),(53,((17,(15,(11,(14,(16,(18,(12,13))))))),((26,(20,((50,52),(24,(51,(25,(23,(22,(21,19))))))))),(54,(47,48))))))));
	TREE * inapplicable = [&R] (1,((5,(4,((10,((9,8),(2,3))),(6,7)))),((53,(((54,(48,47)),(26,(20,(50,(51,(24,(52,(25,(23,(22,(19,21))))))))))),(17,(15,(11,(14,(16,(18,(12,13))))))))),(49,((28,(37,((42,((45,30),(34,(29,(41,(44,46)))))),((36,(31,40)),(33,(32,(27,43))))))),(38,(39,35)))))));
	TREE * inapplicable = [&R] (1,((5,(4,((10,((8,9),(3,2))),(7,6)))),((53,(((54,(47,48)),(26,(20,(51,((50,(52,24)),(25,(19,(22,(23,21))))))))),((17,(15,11)),(14,(16,(12,(13,18))))))),((49,(28,(37,(((36,(40,31)),(33,(32,(27,43)))),(42,((30,45),(34,(29,(41,(46,44)))))))))),(38,(35,39))))));
	TREE * inapplicable = [&R] (1,((5,(4,((10,((3,2),(9,8))),(7,6)))),((53,((((20,26),(24,(50,(52,(51,(25,(23,(22,(21,19))))))))),(54,(47,48))),(17,(15,(11,(14,(16,(12,(18,13))))))))),((28,(37,((42,((34,(29,(41,(44,46)))),(30,45))),((33,(32,(27,43))),(36,(40,31)))))),(38,(39,(49,35)))))));
	TREE * inapplicable = [&R] (1,((5,(4,((10,((9,8),(3,2))),(6,7)))),((53,((17,(15,(11,(14,(16,(13,(12,18))))))),(((20,26),(24,(50,(52,((51,25),(23,(22,(21,19)))))))),(54,(48,47))))),(((38,49),(35,39)),(28,(37,(((36,(40,31)),(33,(32,(43,27)))),(42,((45,30),(34,(29,(41,(44,46)))))))))))));
	TREE * inapplicable = [&R] (1,((5,(4,((10,((8,9),(2,3))),(6,7)))),((53,(((54,(48,47)),(26,(20,(50,(24,(25,(19,((22,(51,52)),(23,21))))))))),(17,(15,(11,(14,(16,(13,(18,12))))))))),((49,(28,(37,(((36,(31,40)),(33,(32,(27,43)))),(42,((30,45),(34,(29,(41,(46,44)))))))))),(38,(35,39))))));
	TREE * inapplicable = [&R] (1,((5,(4,((10,((8,9),(2,3))),(6,7)))),((53,((((20,26),((52,(24,(25,(19,(22,(23,21)))))),(50,51))),(54,(47,48))),(17,(15,(11,(14,(16,(13,(18,12))))))))),((49,(38,(35,39))),(28,(37,(((36,(31,40)),(33,(32,(27,43)))),(42,((34,(29,(41,(46,44)))),(30,45))))))))));
	TREE * inapplicable = [&R] (1,((5,(4,((10,((9,8),(3,2))),(6,7)))),((53,(((17,(15,11)),(14,(16,(18,(13,12))))),((26,(20,((24,50),(52,((51,25),(19,(22,(23,21)))))))),(54,(48,47))))),(((38,49),(35,39)),(28,(37,(((33,(32,(43,27))),(36,(31,40))),(42,((30,45),(34,(29,(41,(44,46)))))))))))));
	TREE * inapplicable = [&R] (1,((5,(4,((10,((9,8),(3,2))),(7,6)))),((53,(((17,(15,11)),(14,(16,(12,(18,13))))),((26,(20,(52,(50,(51,(24,(25,(23,(22,(21,19)))))))))),(54,(48,47))))),((38,(49,(39,35))),(28,(37,((42,((30,45),(34,(29,(41,(46,44)))))),((33,(32,(27,43))),(36,(31,40))))))))));
	TREE * inapplicable = [&R] (1,(((53,(((26,(20,(51,(50,(24,(52,(25,(23,(22,(21,19)))))))))),(54,(47,48))),((17,(11,15)),(14,(16,(12,(18,13))))))),(49,((28,(37,((42,((34,(29,(41,(46,44)))),(30,45))),((33,(32,(43,27))),(36,(31,40)))))),(38,(35,39))))),(5,(4,((10,((9,8),(3,2))),(6,7))))));
	TREE * inapplicable = [&R] (1,((5,(4,((10,((8,9),(3,2))),(7,6)))),((53,(((54,(47,48)),(26,(20,((24,50),(52,((51,25),(19,(22,(21,23))))))))),((17,(15,11)),(14,(16,(12,(18,13))))))),((38,(39,(49,35))),(28,(37,(((33,(32,(43,27))),(36,(40,31))),(42,((34,(29,(41,(44,46)))),(45,30))))))))));
	TREE * inapplicable = [&R] (1,((5,(4,((10,((8,9),(2,3))),(7,6)))),((53,((((50,(52,(51,(24,(25,(23,(22,(19,21)))))))),(20,26)),(54,(48,47))),(17,(15,(11,(14,(16,(18,(12,13))))))))),((28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,((45,30),(34,(29,(41,(44,46))))))))),(38,(39,(35,49)))))));
	TREE * inapplicable = [&R] (1,((5,(4,((10,((9,8),(3,2))),(7,6)))),((53,(((17,(11,15)),(14,(16,(12,(13,18))))),(((20,26),((50,(24,(25,(23,(22,(21,19)))))),(51,52))),(54,(48,47))))),(49,((28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,((45,30),(34,(29,(41,(44,46))))))))),(38,(35,39)))))));
	TREE * inapplicable = [&R] (1,((5,(4,((10,((8,9),(2,3))),(6,7)))),((53,((17,(15,(11,(14,(13,(18,(12,16))))))),((26,(20,(50,(52,(24,((51,25),(23,(22,(19,21))))))))),(54,(48,47))))),(((49,38),(35,39)),(28,(37,(((33,(32,(27,43))),(36,(31,40))),(42,((30,45),(34,(29,(41,(46,44)))))))))))));
	TREE * inapplicable = [&R] (1,((5,(4,((10,((8,9),(3,2))),(7,6)))),((53,(((54,(47,48)),(26,(20,(51,(50,(52,(24,(25,(19,(22,(23,21))))))))))),((17,(11,15)),(14,(16,(13,(12,18))))))),((49,(28,(37,(((33,(32,(43,27))),(36,(40,31))),(42,((34,(29,(41,(44,46)))),(45,30))))))),(38,(35,39))))));
	TREE * inapplicable = [&R] (1,((5,(4,((10,((8,9),(3,2))),(7,6)))),(((53,((14,(16,(18,(13,12)))),(17,(15,11)))),((28,(37,(((36,(40,31)),(33,(32,(27,43)))),(42,((30,45),(34,(29,(41,(46,44))))))))),(38,(39,(49,35))))),(50,((54,(47,48)),(52,(51,((20,26),((24,25),(19,(22,(23,21))))))))))));
	TREE * inapplicable = [&R] (1,((5,(4,((10,((8,9),(2,3))),(6,7)))),((53,((17,(15,(11,(14,(16,(18,(12,13))))))),((26,(20,(51,((52,50),(24,(25,(23,(22,(19,21))))))))),(54,(47,48))))),(49,((28,(37,((42,((45,30),(34,(29,(41,(46,44)))))),((36,(31,40)),(33,(32,(27,43))))))),(38,(35,39)))))));
	TREE * inapplicable = [&R] (1,((5,(4,((7,6),(10,((9,8),(3,2)))))),((53,((17,(15,(11,(14,(16,(13,(12,18))))))),((26,(20,(51,((24,50),(25,(52,(19,(22,(23,21))))))))),(54,(48,47))))),((49,(28,(37,((42,((30,45),(34,(29,(41,(46,44)))))),((36,(40,31)),(33,(32,(27,43)))))))),(38,(39,35))))));
	TREE * inapplicable = [&R] (1,((5,(4,((6,7),(10,((9,8),(3,2)))))),((53,((((26,20),(52,((50,51),(24,(25,(23,(22,(21,19)))))))),(54,(47,48))),(17,(15,(11,(14,(16,(12,(13,18))))))))),(49,((38,(39,35)),(28,(37,((42,((45,30),(34,(29,(41,(46,44)))))),((33,(32,(27,43))),(36,(40,31)))))))))));
	TREE * inapplicable = [&R] (1,((5,(4,((6,7),(10,((8,9),(2,3)))))),((53,(((26,(20,((51,(52,(50,24))),(25,(19,(22,(23,21))))))),(54,(48,47))),((17,(15,11)),(14,(16,(18,(12,13))))))),((38,(49,(35,39))),(28,(37,((42,((30,45),(34,(29,(41,(46,44)))))),((36,(31,40)),(33,(32,(43,27)))))))))));
END;
