# Generated by roxygen2: do not edit by hand

S3method(MinimumLength,numeric)
S3method(MinimumLength,phyDat)
S3method(SPRMoves,matrix)
S3method(SPRMoves,phylo)
S3method(TBRMoves,matrix)
S3method(TBRMoves,phylo)
S3method(TreeLength,list)
S3method(TreeLength,multiPhylo)
S3method(TreeLength,numeric)
S3method(TreeLength,phylo)
S3method(summary,morphyPtr)
export(C_MorphyLength)
export(Carter1)
export(CharacterLength)
export(Consistency)
export(EasyTrees)
export(EasyTreesy)
export(EdgeListSearch)
export(Evaluate)
export(ExtraSteps)
export(Fitch)
export(GetMorphyLength)
export(IWBootstrap)
export(IWDestroyMorphy)
export(IWInitMorphy)
export(IWMultiRatchet)
export(IWRatchet)
export(IWRatchetConsensus)
export(IWScore)
export(IWScoreMorphy)
export(IWTreeSearch)
export(JackLabels)
export(Jackknife)
export(Log2Carter1)
export(LogisticPoints)
export(MaddisonSlatkin)
export(MaximizeParsimony)
export(MinimumLength)
export(MorphyBootstrap)
export(MorphyErrorCheck)
export(MorphyLength)
export(MorphyTreeLength)
export(MorphyWeights)
export(MultiRatchet)
export(NNI)
export(NNISwap)
export(PhyDat2Morphy)
export(PrepareDataIW)
export(PrepareDataProfile)
export(ProfileBootstrap)
export(ProfileDestroyMorphy)
export(ProfileInitMorphy)
export(ProfileRatchet)
export(ProfileScore)
export(ProfileScoreMorphy)
export(ProfileTreeSearch)
export(RandomMorphyTree)
export(RandomTreeScore)
export(Ratchet)
export(RatchetConsensus)
export(RearrangeEdges)
export(RootedNNI)
export(RootedNNISwap)
export(RootedSPR)
export(RootedSPRSwap)
export(RootedTBR)
export(RootedTBRSwap)
export(SPR)
export(SPRMoves)
export(SPRSwap)
export(SPRWarning)
export(SetMorphyWeights)
export(SingleCharMorphy)
export(StepInformation)
export(StopUnlessBifurcating)
export(Suboptimality)
export(SuccessiveApproximations)
export(SuccessiveWeights)
export(TBR)
export(TBRMoves)
export(TBRSwap)
export(TBRWarning)
export(TipsAreColumns)
export(TipsAreNames)
export(TreeLength)
export(TreeSearch)
export(UniqueExceptHits)
export(UnloadMorphy)
export(WithOneExtraStep)
export(cNNI)
export(cSPR)
export(mpl_apply_tipdata)
export(mpl_attach_rawdata)
export(mpl_attach_symbols)
export(mpl_delete_Morphy)
export(mpl_delete_rawdata)
export(mpl_first_down_recon)
export(mpl_first_up_recon)
export(mpl_get_charac_weight)
export(mpl_get_num_charac)
export(mpl_get_num_internal_nodes)
export(mpl_get_numtaxa)
export(mpl_get_symbols)
export(mpl_init_Morphy)
export(mpl_new_Morphy)
export(mpl_second_down_recon)
export(mpl_second_up_recon)
export(mpl_set_charac_weight)
export(mpl_set_num_internal_nodes)
export(mpl_set_parsim_t)
export(mpl_translate_error)
export(mpl_update_lower_root)
export(mpl_update_tip)
importFrom(R.cache,addMemoization)
importFrom(Rdpack,reprompt)
importFrom(TreeDist,ClusteringInfoDistance)
importFrom(TreeTools,CharacterInformation)
importFrom(TreeTools,DescendantEdges)
importFrom(TreeTools,DoubleFactorial)
importFrom(TreeTools,EdgeAncestry)
importFrom(TreeTools,Log2DoubleFactorial)
importFrom(TreeTools,Log2Unrooted)
importFrom(TreeTools,NJTree)
importFrom(TreeTools,NRooted)
importFrom(TreeTools,NTip)
importFrom(TreeTools,NUnrooted)
importFrom(TreeTools,NUnrootedMult)
importFrom(TreeTools,NonDuplicateRoot)
importFrom(TreeTools,PhyToString)
importFrom(TreeTools,Postorder)
importFrom(TreeTools,Preorder)
importFrom(TreeTools,RandomTree)
importFrom(TreeTools,Renumber)
importFrom(TreeTools,RenumberEdges)
importFrom(TreeTools,RenumberTips)
importFrom(TreeTools,RenumberTree)
importFrom(TreeTools,RootTree)
importFrom(TreeTools,SampleOne)
importFrom(TreeTools,SplitFrequency)
importFrom(TreeTools,SupportColour)
importFrom(TreeTools,TreeIsRooted)
importFrom(ape,consensus)
importFrom(ape,nodelabels)
importFrom(ape,root)
importFrom(cluster,pam)
importFrom(cluster,silhouette)
importFrom(graphics,plot)
importFrom(phangorn,Descendants)
importFrom(phangorn,phyDat)
importFrom(protoclust,protoclust)
importFrom(rgl,plot3d)
importFrom(shiny,runApp)
importFrom(shiny,setProgress)
importFrom(shiny,withProgress)
importFrom(shinyjs,useShinyjs)
importFrom(stats,nls)
importFrom(stats,setNames)
useDynLib(TreeSearch, .registration = TRUE)
